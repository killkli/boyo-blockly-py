{"pages": {"IntroducingTheShell": {"slug": "IntroducingTheShell", "title": "Introducing The Shell", "index": 0, "step_names": ["first_expression", "more_calculation", "final_text"], "steps": [{"index": 0, "text": "<p>On the right is the <em>shell</em>. This is a place for running small bits of Python code. Just type in some code, press enter, and it'll run! Try it now:</p>\n<ol>\n<li>Click anywhere on the shell (the black area).</li>\n<li>Type <code>1+2</code></li>\n<li>Press the Enter key on your keyboard.</li>\n</ol>", "name": "first_expression", "hints": [], "solution": {"tokens": ["1", "+", "2"], "maskedIndices": [0, 2, 1], "mask": [true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Great! Python evaluated <code>1+2</code> and got the result <code>3</code>, so the shell displays that.</p>\n<p>The shell is probably your most important tool for learning Python, and you should spend lots of time experimenting and exploring in it. Be curious! Constantly ask yourself \"What would happen if I ran X?\" and then immediately answer that question by running it. Never be scared to try something out - if you get something wrong, nothing bad will happen.</p>\n<p>Try doing some more calculations now. You can multiply numbers with <code>*</code>, divide with <code>/</code>, and subtract with <code>-</code>. You can also use parentheses, i.e. <code>(</code> and <code>)</code>.</p>", "name": "more_calculation", "hints": [], "solution": {"tokens": ["5", " ", "-", " ", "6"], "maskedIndices": [4, 2, 0], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Run code in the shell similar to <code>1 + 2</code>, but instead of <code>+</code>, use <code>*</code>, <code>/</code>, or <code>-</code>.</p>"}]}, {"index": 2, "text": "<p>Excellent! Keep experimenting. When you're ready, click 'Next' to continue.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "NavigatingShellHistory": {"slug": "NavigatingShellHistory", "title": "Navigating Shell History", "index": 1, "step_names": ["final_text"], "steps": [{"index": 0, "text": "<p>Here's a tip: often you will want to re-run a previously entered bit of code, or a slightly modified version of it. You can copy and paste, but that's tedious and gets in the way of experimenting. A better method is to press the Up Arrow key on your keyboard. This will insert the previous line of code into the shell. Keep pressing it to go further back in your history, and if you go too far, press the Down Arrow key to go the other way. Try using it now.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingStrings": {"slug": "IntroducingStrings", "title": "Introducing Strings", "index": 2, "step_names": ["hello_string", "final_text"], "steps": [{"index": 0, "text": "<p>Python lets you do much more than calculate. In fact, we're not going to touch numbers or maths for a while. Instead, we're going to look at <em>strings</em>. Strings are essentially snippets of text. For example, enter the following into the shell, quotes (<code>'</code>) included:</p>\n<pre><code class=\"codehilite\"><span><span class=\"s1\">'hello'</span>\n</span></code></pre>", "name": "hello_string", "hints": [], "solution": {"tokens": ["'hello'"], "maskedIndices": [0], "mask": [true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>The shell simply gives the same thing back because there's nothing further to calculate. <code>'hello'</code> is simply equal to <code>'hello'</code>.</p>\n<p>A string is a sequence of characters. A character is a single symbol such as a letter, number, punctuation, space, etc. In this case the string contains the 5 characters <code>hello</code>. The quotes are not part of the string - they are there to tell both humans and computers that this is a string consisting of whatever characters are between the quotes.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "AddingStrings": {"slug": "AddingStrings", "title": "Adding Strings", "index": 3, "step_names": ["hello_world_concat", "hello_world_space", "final_text"], "steps": [{"index": 0, "text": "<p>Strings can be added together using <code>+</code>, although this means something very different from adding numbers. For example, try:</p>\n<pre><code class=\"codehilite\"><span><span class=\"s1\">'hello'</span> <span class=\"o\">+</span> <span class=\"s1\">'world'</span>\n</span></code></pre>", "name": "hello_world_concat", "hints": [], "solution": {"tokens": ["'hello'", " ", "+", " ", "'world'"], "maskedIndices": [0, 2, 4], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>You can see that <code>+</code> combines or joins two strings together end to end. Technically, this is called concatenation.</p>\n<p>Here's an exercise: change the previous code slightly so that the result is the string <code>'hello world'</code>, i.e. with a space between the words.</p>\n<p>By the way, if you get stuck, you can click the lightbulb icon in the bottom right for a hint.</p>", "name": "hello_world_space", "hints": ["<p>A space is a character just like any other, like <code>o</code> or <code>w</code>.</p>", "<p>The space character must be somewhere inside quotes.</p>"], "solution": {"tokens": ["'hello '", " ", "+", " ", "'world'"], "maskedIndices": [0, 4, 2], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Use <code>+</code> to add two or more strings together, so that the result is the string <code>'hello world'</code>.</p>"}]}, {"index": 2, "text": "<p>Well done! Any of the following are valid solutions:</p>\n<pre><code class=\"codehilite\"><span><span class=\"s1\">'hello '</span> <span class=\"o\">+</span> <span class=\"s1\">'world'</span>\n<span class=\"s1\">'hello'</span> <span class=\"o\">+</span> <span class=\"s1\">' world'</span>\n<span class=\"s1\">'hello'</span> <span class=\"o\">+</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"s1\">'world'</span>\n</span></code></pre>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingVariables": {"slug": "IntroducingVariables", "title": "Introducing Variables", "index": 4, "step_names": ["word_assign", "word_check", "word_string_check", "sunshine_undefined_check", "final_text"], "steps": [{"index": 0, "text": "<p>To make interesting programs, we can't always manipulate the same values. We need a way to refer to values that are unknown ahead of time and can change - values that can vary. These are called <em>variables</em>.</p>\n<p>Run this code:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello'</span>\n</span></code></pre>", "name": "word_assign", "hints": [], "solution": {"tokens": ["word", " ", "=", " ", "'Hello'"], "maskedIndices": [0, 4, 2], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>This creates a variable with the name <code>word</code> that refers to the string value <code>'Hello'</code>.</p>\n<p>Now see what happens when you run <code>word</code> in the shell by itself.</p>", "name": "word_check", "hints": [], "solution": {"tokens": ["word"], "maskedIndices": [0], "mask": [true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>Good. For comparison, run <code>'word'</code> in the shell by itself, with the quotes.</p>", "name": "word_string_check", "hints": [], "solution": {"tokens": ["'word'"], "maskedIndices": [0], "mask": [true], "lines": null}, "prediction": {"choices": ["word", "'word'", "Hello", "'Hello'", "Error"], "answer": "'word'"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>As you can see, the quotes make all the difference. <code>'word'</code> is literally just <code>'word'</code>, hence it's technically called a <em>string literal</em>. On the other hand, <code>word</code> is a variable, whose value may be anything.</p>\n<p>Similarly, <code>'sunshine'</code> is <code>'sunshine'</code>, but what's <code>sunshine</code> without quotes?</p>", "name": "sunshine_undefined_check", "hints": [], "solution": {"tokens": ["sunshine"], "maskedIndices": [0], "mask": [true], "lines": null}, "prediction": {"choices": ["sunshine", "'sunshine'", "Hello", "'Hello'", "Error"], "answer": "Error"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 4, "text": "<p>The answer is that <code>sunshine</code> looks like a variable, so Python tries to look up its value, but since we never defined a variable with that name we get an error.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "UsingVariables": {"slug": "UsingVariables", "title": "Using Variables and <code>print()</code>", "index": 5, "step_names": ["name_assign", "hello_plus_name", "word_plus_name", "word_plus_name_with_space", "word_assign_goodbye", "goodbye_plus_name", "first_print", "final_text"], "steps": [{"index": 0, "text": "<p>Previously we made a variable called <code>word</code> with the value <code>'Hello'</code> with this code:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello'</span>\n</span></code></pre>\n<p>Now make a variable called <code>your_name</code> whose value is another string.</p>\n<p>(The character <code>_</code> in <code>your_name</code> is called an <em>underscore</em>. Use it to separate words when you want a variable name containing multiple words. You can type it on most keyboards by pressing Shift and hyphen/dash/minus (<code>-</code>).)</p>", "name": "name_assign", "hints": [], "solution": {"tokens": ["your_name", " ", "=", " ", "'Alex'"], "maskedIndices": [2, 0, 4], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Run something similar to <code>word = 'Hello'</code>, but replace <code>word</code> with <code>your_name</code>.</p>"}]}, {"index": 1, "text": "<p>You can use variables in calculations just like you would use literals. For example, try:</p>\n<pre><code class=\"codehilite\"><span><span class=\"s1\">'Hello '</span> <span class=\"o\">+</span> <span class=\"n\">your_name</span>\n</span></code></pre>", "name": "hello_plus_name", "hints": [], "solution": {"tokens": ["'Hello '", " ", "+", " ", "your_name"], "maskedIndices": [4, 0, 2], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>Or you can just add variables together. Try:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">word</span> <span class=\"o\">+</span> <span class=\"n\">your_name</span>\n</span></code></pre>", "name": "word_plus_name", "hints": [], "solution": {"tokens": ["word", " ", "+", " ", "your_name"], "maskedIndices": [2, 0, 4], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>Oops...that doesn't look nice. Can you modify the code above so that there's a space between the word and your name?</p>", "name": "word_plus_name_with_space", "hints": ["<p>You will need to use <code>+</code> twice, like 1+2+3.</p>", "<p>Your answer should contain a mixture of variables (no quotes) and string literals (quotes).</p>", "<p>You will need to have a space character inside quotes.</p>"], "solution": {"tokens": ["word", " ", "+", " ", "' '", " ", "+", " ", "your_name"], "maskedIndices": [2, 0, 8, 6, 4], "mask": [true, false, true, false, true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}]}, {"index": 4, "text": "<p>Perfect!</p>\n<p>Variables can also change their values over time. Right now <code>word</code> has the value <code>'Hello'</code>. You can change its value in the same way that you set it for the first time. Run this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'Goodbye'</span>\n</span></code></pre>", "name": "word_assign_goodbye", "hints": [], "solution": {"tokens": ["word", " ", "=", " ", "'Goodbye'"], "maskedIndices": [0, 4, 2], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 5, "text": "<p>Now observe the effect of this change by running <code>word + ' ' + your_name</code> again.</p>", "name": "goodbye_plus_name", "hints": [], "solution": {"tokens": ["word", " ", "+", " ", "' '", " ", "+", " ", "your_name"], "maskedIndices": [0, 6, 8, 2, 4], "mask": [true, false, true, false, true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 6, "text": "<p>Those quotes around strings are getting annoying. Try running this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">word</span> <span class=\"o\">+</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"n\">your_name</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "first_print", "hints": [], "solution": {"tokens": ["print", "(", "word", " ", "+", " ", "' '", " ", "+", " ", "your_name", ")"], "maskedIndices": [1, 4, 8, 0, 2, 6, 10, 11], "mask": [true, true, true, false, true, false, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 7, "text": "<p>Hooray! No more quotes! We'll break down what's happening in this code later. For now just know that <code>print(&lt;something&gt;)</code> displays <code>&lt;something&gt;</code> in the shell. In particular it displays the actual content of strings that we usually care about, instead of a representation of strings that's suitable for code which has things like quotes. The word <code>print</code> here has nothing to do with putting ink on paper.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "WritingPrograms": {"slug": "WritingPrograms", "title": "Writing Programs", "index": 6, "step_names": ["editor_hello_world", "final_text"], "steps": [{"index": 0, "text": "<p>It's time to stop doing everything in the shell. In the top right you can see the <em>editor</em>. This is a place where you can write and run longer programs. The shell is great and you should keep using it to explore, but the editor is where real programs live.</p>\n<p>Type the program below into the editor, then click the 'Run' button:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello'</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">word</span> <span class=\"o\">+</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'Goodbye'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">word</span> <span class=\"o\">+</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "editor_hello_world", "hints": [], "solution": {"tokens": ["word", " ", "=", " ", "'Hello'", "\n", "name", " ", "=", " ", "'World'", "\n", "print", "(", "word", " ", "+", " ", "' '", " ", "+", " ", "name", ")", "\n", "word", " ", "=", " ", "'Goodbye'", "\n", "print", "(", "word", " ", "+", " ", "' '", " ", "+", " ", "name", ")"], "maskedIndices": [29, 39, 10, 33, 14, 8, 12, 42, 32, 25, 16, 6, 2, 23, 20, 31, 13, 18, 27, 0, 35, 37, 22, 41, 4], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Congratulations, you have run your first actual program!</p>\n<p>Take some time to understand this program. Python runs each line one at a time from top to bottom. You should try simulating this process in your head - think about what each line does. See how the value of <code>word</code> was changed and what effect this had. Note that when <code>print</code> is used multiple times, each thing (<code>Hello World</code> and <code>Goodbye World</code> in this case) is printed on its own line.</p>\n<p>Some things to note about programs in the editor:</p>\n<ol>\n<li>The program runs in the shell, meaning that the variables defined in the program now exist in the shell with the last values they had in the program. This lets you explore in the shell after the program completes. For example, <code>name</code> now has the value <code>'World'</code> in the shell.</li>\n<li>Programs run in isolation - they don't depend on any previously defined variables. The shell is reset and all previous variables are cleared. So even though <code>word</code> currently exists in the shell, if you delete the first line of the program and run it again, you'll get an error about <code>word</code> being undefined.</li>\n<li>If you enter code in the shell and it has a value, that value will automatically be displayed. That doesn't happen for programs in the editor - you have to print values. If you remove <code>print()</code> from the program, changing the two lines to just <code>word + ' ' + name</code>, nothing will be displayed.</li>\n</ol>\n<p>I recommend that you check all of these things for yourself.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "StoringCalculationsInVariables": {"slug": "StoringCalculationsInVariables", "title": "Storing Calculations In Variables", "index": 7, "step_names": ["sentence_equals_word_plus_name", "sentence_doesnt_change", "final_text"], "steps": [{"index": 0, "text": "<p>Often you will use variables to store the results of calculations. This will help to build more complex programs. For example, try this program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello'</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n<span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"n\">word</span> <span class=\"o\">+</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"n\">name</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "sentence_equals_word_plus_name", "hints": [], "solution": {"tokens": ["word", " ", "=", " ", "'Hello'", "\n", "name", " ", "=", " ", "'World'", "\n", "sentence", " ", "=", " ", "word", " ", "+", " ", "' '", " ", "+", " ", "name", "\n", "print", "(", "sentence", ")"], "maskedIndices": [14, 0, 20, 4, 18, 22, 12, 6, 10, 24, 27, 26, 16, 8, 2, 28, 29], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["sentence", "word + ' ' + name", "Hello + ' ' + World", "'Hello' + ' ' + 'World'", "Hello World", "'Hello World'", "Error"], "answer": "Hello World"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Now <code>sentence</code> has the value <code>'Hello World'</code> which can be used multiple times. Note that it will continue to have this value until it is directly reassigned, e.g. with another statement like <code>sentence = &lt;something&gt;</code>. For example, add these two lines to the end of the program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'Goodbye'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "sentence_doesnt_change", "hints": [], "solution": {"tokens": ["word", " ", "=", " ", "'Hello'", "\n", "name", " ", "=", " ", "'World'", "\n", "sentence", " ", "=", " ", "word", " ", "+", " ", "' '", " ", "+", " ", "name", "\n", "print", "(", "sentence", ")", "\n", "word", " ", "=", " ", "'Goodbye'", "\n", "print", "(", "sentence", ")"], "maskedIndices": [22, 29, 39, 6, 28, 27, 16, 4, 26, 2, 40, 8, 38, 37, 0, 31, 12, 10, 18, 14, 33, 20, 24, 35], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["Hello World\nHello World", "Hello World\nGoodbye World", "Goodbye World\nGoodbye World", "Error"], "answer": "Hello World\nHello World"}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run a program consisting of the four lines in the previous step followed by the two lines here.</p>"}]}, {"index": 2, "text": "<p>Unlike a spreadsheet where formulas update automatically, a variable like <code>sentence</code> doesn't remember how it was calculated and won't change if the underlying values <code>word</code> or <code>name</code> are changed.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingForLoops": {"slug": "IntroducingForLoops", "title": "Introducing For Loops", "index": 8, "step_names": ["first_for_loop", "final_text"], "steps": [{"index": 0, "text": "<p>Good news! You've made it past the boring basics. We can start to write some interesting programs and have a bit of fun. One of the most powerful concepts in programming is the <em>loop</em>, which lets you repeat the same code over and over. Python has two kinds of loop: <code>for</code> loops and <code>while</code> loops. Here is an example of a for loop, try running this program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n<span class=\"k\">for</span> <span class=\"n\">character</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "first_for_loop", "hints": [], "solution": {"tokens": ["name", " ", "=", " ", "'World'", "\n", "for", " ", "character", " ", "in", " ", "name", ":", " ", "print", "(", "character", ")"], "maskedIndices": [13, 10, 2, 0, 4, 18, 16, 8, 12, 17, 6, 15], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>You can read the code almost like normal English:</p>\n<blockquote>\n<p>For each character in the string <code>name</code>, print that character.</p>\n</blockquote>\n<p>Each character is just a normal string. <code>character</code> is a normal variable that is given a new value before the code after the <code>:</code> runs. So the code above is equivalent to:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n\n<span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"s1\">'W'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n\n<span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"s1\">'o'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n\n<span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"s1\">'r'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n\n<span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"s1\">'l'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n\n<span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"s1\">'d'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Note that we could use a different variable name, <code>character</code> just makes it clearer.</p>\n<p>A for loop generally follows this structure:</p>\n<pre><code>for &lt;variable&gt; in &lt;collection&gt;: &lt;code to repeat&gt;\n</code></pre>\n<p>The <code>for</code>, <code>in</code>, and <code>:</code> are all essential.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "Indentation": {"slug": "Indentation", "title": "Indentation", "index": 9, "step_names": ["missing_indentation", "two_indented_lines", "one_indented_line", "mismatched_indentations", "final_text"], "steps": [{"index": 0, "text": "<p>This example loop:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">for</span> <span class=\"n\">character</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>works, but actually it would usually (and should) be written like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">for</span> <span class=\"n\">character</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Specifically, the code to be repeated (known as the <em>body</em>) starts on a new line after the colon (<code>:</code>), and it must be <em>indented</em>, i.e. have some spaces before it. The code below without indentation is invalid, run it to see for yourself:</p>\n<pre><code>for character in name:\nprint(character)\n</code></pre>", "name": "missing_indentation", "hints": [], "solution": {"tokens": ["for", " ", "character", " ", "in", " ", "name", ":", "\n", "print", "(", "character", ")"], "maskedIndices": [6, 7, 4, 0, 12, 2, 10, 9, 11], "mask": [true, false, true, false, true, false, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "program_in_text"}]}, {"index": 1, "text": "<p>The spaces are required to tell Python which lines of code belong to the body of the for loop. This is critical when the loop contains several lines, which it often will. For example, run this code:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n\n<span class=\"k\">for</span> <span class=\"n\">character</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "two_indented_lines", "hints": [], "solution": {"tokens": ["name", " ", "=", " ", "'World'", "\n", "\n", "for", " ", "character", " ", "in", " ", "name", ":", "\n", "    ", "print", "(", "character", ")", "\n", "    ", "print", "(", "'---'", ")"], "maskedIndices": [9, 24, 25, 17, 19, 14, 18, 2, 0, 13, 23, 4, 11, 26, 20, 7], "mask": [true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>There are two indented lines, so they're both part of the body, so <code>---</code> gets printed after each character. Now try running the same code without the indentation in the last line:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n\n<span class=\"k\">for</span> <span class=\"n\">character</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "one_indented_line", "hints": [], "solution": {"tokens": ["name", " ", "=", " ", "'World'", "\n", "\n", "for", " ", "character", " ", "in", " ", "name", ":", "\n", "    ", "print", "(", "character", ")", "\n", "print", "(", "'---'", ")"], "maskedIndices": [14, 17, 22, 9, 11, 25, 4, 23, 13, 24, 20, 18, 7, 19, 2, 0], "mask": [true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>Since <code>print('---')</code> is not indented, it's not part of the loop body. This means it only runs once, after the whole loop has finished running. Both programs are valid, they just do different things.</p>\n<p>The program below is invalid. Both lines in the loop body are indented, but by different amounts. The first line starts with 4 spaces, the second line starts with 2. Try running it.</p>\n<pre><code>for character in name:\n    print(character)\n  print('---')\n</code></pre>", "name": "mismatched_indentations", "hints": [], "solution": {"tokens": ["f", "o", "r", " ", "c", "h", "a", "r", "a", "c", "t", "e", "r", " ", "i", "n", " ", "n", "a", "m", "e", ":", "\n", " ", " ", " ", " ", "p", "r", "i", "n", "t", "(", "c", "h", "a", "r", "a", "c", "t", "e", "r", ")", "\n", " ", " ", "p", "r", "i", "n", "t", "(", "'", "-", "-", "-", "'", ")"], "maskedIndices": [54, 33, 36, 0, 57, 32, 10, 21, 51, 28, 20, 39, 2, 11, 31, 34, 29, 55, 18, 12, 9, 49, 14, 40, 53, 41, 37, 46, 48, 52, 6, 50, 30, 27, 47, 17, 5, 19, 7, 35, 42, 1, 4, 15, 38, 8, 56], "mask": [true, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "program_in_text"}]}, {"index": 4, "text": "<p>When you indent, you should always indent by 4 spaces. Any consistent indentation is actually acceptable, but 4 spaces is the convention that almost everyone follows. Note that the editor generally makes this easy for you. For example, if you press the 'Tab' key on your keyboard in the editor, it will insert 4 spaces for you.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "BasicForLoopExercises": {"slug": "BasicForLoopExercises", "title": "Basic For Loop Exercises", "index": 10, "step_names": ["loop_exercise_1", "loop_exercise_2", "final_text"], "steps": [{"index": 0, "text": "<p>Time for some exercises! Modify this program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n\n<span class=\"k\">for</span> <span class=\"n\">character</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>to instead output:</p>\n<pre><code class=\"codehilite\"><span><span class=\"o\">---</span><span class=\"n\">W</span>\n<span class=\"o\">---</span><span class=\"n\">o</span>\n<span class=\"o\">---</span><span class=\"n\">r</span>\n<span class=\"o\">---</span><span class=\"n\">l</span>\n<span class=\"o\">---</span><span class=\"n\">d</span>\n</span></code></pre>", "name": "loop_exercise_1", "hints": ["<p>You should only use one <code>print</code>, since each print outputs on a different line.</p>", "<p>You will need to use <code>+</code>.</p>"], "solution": {"tokens": ["for", " ", "character", " ", "in", " ", "name", ":", "\n", "    ", "print", "(", "'---'", " ", "+", " ", "character", ")"], "maskedIndices": [10, 16, 14, 17, 0, 6, 11, 12, 2, 4, 7], "mask": [true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>"}]}, {"index": 1, "text": "<p>Splendid! Now write a program which prints <code>name</code> once for each character in <code>name</code>. For example, for <code>name = 'Amy'</code>, it should output:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">Amy</span>\n<span class=\"n\">Amy</span>\n<span class=\"n\">Amy</span>\n</span></code></pre>\n<p>For <code>name = 'World'</code>, it should output:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">World</span>\n<span class=\"n\">World</span>\n<span class=\"n\">World</span>\n<span class=\"n\">World</span>\n<span class=\"n\">World</span>\n</span></code></pre>\n<p>By the way, you can set <code>name</code> to anything in the first line. Only the rest of the program after that will be checked.</p>", "name": "loop_exercise_2", "hints": ["<p>Forget loops for a moment. How would you write a program which prints <code>name</code> 3 times?</p>", "<p>The solution looks very similar to the other programs we've seen in this section.</p>", "<p>The for loop will create a variable such as <code>character</code>, but the program doesn't need to use it.</p>"], "solution": {"tokens": ["for", " ", "_", " ", "in", " ", "name", ":", "\n", "    ", "print", "(", "name", ")"], "maskedIndices": [4, 0, 10, 2, 12, 13, 6, 7, 11], "mask": [true, false, true, false, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>"}]}, {"index": 2, "text": "<p>We're making really good progress! You're solving problems and writing new code!\nLet's keep making things more interesting.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "BuildingUpStrings": {"slug": "BuildingUpStrings", "title": "Building Up Strings", "index": 11, "step_names": ["hello_plus_equals", "name_triangle", "name_triangle_missing_last_line", "empty_string", "name_triangle_empty_string", "final_text"], "steps": [{"index": 0, "text": "<p>Before we look at some more loops, we need to quickly learn another concept. Look at this program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">hello</span><span class=\"p\">)</span>\n<span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">hello</span> <span class=\"o\">+</span> <span class=\"s1\">'!'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">hello</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>What do you think the line <code>hello = hello + '!'</code> does? Run the program to find out.</p>", "name": "hello_plus_equals", "hints": [], "solution": {"tokens": ["hello", " ", "=", " ", "'Hello'", "\n", "print", "(", "hello", ")", "\n", "hello", " ", "=", " ", "hello", " ", "+", " ", "'!'", "\n", "print", "(", "hello", ")"], "maskedIndices": [11, 22, 24, 21, 17, 13, 0, 2, 8, 23, 9, 4, 15, 7, 6, 19], "mask": [true, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["Hello\nHello", "Hello\nHello!", "Hello!\nHello!", "Error"], "answer": "Hello\nHello!"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Python doesn't care that <code>hello</code> is on both the left and the right of the <code>=</code>, it just does what it would always do if the variables were different: it calculates <code>hello + '!'</code> which at the time is <code>'Hello' + '!'</code> which is <code>'Hello!'</code>, and that becomes the new value of <code>hello</code>. If it helps, you can think of that line as split into two steps:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">hello</span> <span class=\"o\">+</span> <span class=\"s1\">'!'</span>\n<span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">temp</span>\n</span></code></pre>\n<p>or:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">hello</span>\n<span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">temp</span> <span class=\"o\">+</span> <span class=\"s1\">'!'</span>\n</span></code></pre>\n<p>This is very useful in a loop. Try out this program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n<span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"s1\">'-'</span>\n<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n    <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">line</span> <span class=\"o\">+</span> <span class=\"n\">char</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "name_triangle", "hints": [], "solution": {"tokens": ["name", " ", "=", " ", "'World'", "\n", "line", " ", "=", " ", "'-'", "\n", "for", " ", "char", " ", "in", " ", "name", ":", "\n", "    ", "line", " ", "=", " ", "line", " ", "+", " ", "char", "\n", "    ", "print", "(", "line", ")"], "maskedIndices": [8, 10, 26, 33, 28, 35, 14, 22, 2, 4, 18, 36, 34, 0, 19, 12, 16, 24, 30, 6], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["-\nW\n-\no\n-\nr\n-\nl\n-\nd", "-W\n-o\n-r\n-l\n-d", "-World", "-W-o-r-l-d", "-W\n-Wo\n-Wor\n-Worl\n-World", "-World\n-Worl\n-Wor\n-Wo\n-W", "-World\n-World\n-World\n-World\n-World", "-World\n--World\n---World\n----World\n-----World", "Error"], "answer": "-W\n-Wo\n-Wor\n-Worl\n-World"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>Take your time to make sure you understand this program fully. It's doing something like this:</p>\n<pre><code>line = '-'\n\nchar = 'W'\nline = line + char\n     = '-'  + 'W'\n     = '-W'\nprint('-W')\n\nchar = 'o'\nline = line  + char\n     = '-W'  + 'o'\n     = '-Wo'\nprint('-Wo')\n\nchar = 'r'\nline = line  + char\n     = '-Wo' + 'r'\n     = '-Wor'\nprint('-Wor')\n\n...\n</code></pre>\n<p>The details are important. What happens if you swap the last two lines and run this program instead?</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n<span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"s1\">'-'</span>\n<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n    <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">line</span> <span class=\"o\">+</span> <span class=\"n\">char</span>\n</span></code></pre>", "name": "name_triangle_missing_last_line", "hints": [], "solution": {"tokens": ["name", " ", "=", " ", "'World'", "\n", "line", " ", "=", " ", "'-'", "\n", "for", " ", "char", " ", "in", " ", "name", ":", "\n", "    ", "print", "(", "line", ")", "\n", "    ", "line", " ", "=", " ", "line", " ", "+", " ", "char"], "maskedIndices": [2, 22, 12, 36, 30, 4, 0, 18, 16, 6, 25, 32, 14, 10, 19, 28, 24, 23, 34, 8], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true], "lines": null}, "prediction": {"choices": ["-W\n-Wo\n-Wor\n-Worl\n-World", "-Wo\n-Wor\n-Worl\n-World", "-\n-W\n-Wo\n-Wor\n-Worl", "Error"], "answer": "-\n-W\n-Wo\n-Wor\n-Worl"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>The last character in <code>name</code> only gets added to <code>line</code> at the end of the loop, after <code>print(line)</code> has already run for the last time. So that character and the full <code>name</code> never get printed at the bottom of the triangle. If you're confused, try putting <code>print(line)</code> both before and after <code>line = line + char</code>.</p>\n<p>Let's get rid of those <code>-</code> characters in the output. You might already be able to guess how.</p>\n<p>An <em>empty string</em> is a string containing no characters at all.\nIt's written as just a pair of quotes surrounding nothing: <code>''</code>.\nIt's like the zero of strings.\nAdding it to another string just gives you the other string unchanged,\nin the same way that <code>0 + 5</code> is just <code>5</code>.</p>\n<p>Try this in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"s1\">''</span> <span class=\"o\">+</span> <span class=\"s1\">''</span> <span class=\"o\">+</span> <span class=\"s1\">''</span>\n</span></code></pre>", "name": "empty_string", "hints": [], "solution": {"tokens": ["''", " ", "+", " ", "''", " ", "+", " ", "''"], "maskedIndices": [0, 8, 6, 2, 4], "mask": [true, false, true, false, true, false, true, false, true], "lines": null}, "prediction": {"choices": ["''", "' '", "'  '", "'   '", "'' + '' + ''", "''''''", "'' '' ''", "' '' '' '", "++", "Error"], "answer": "''"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 4, "text": "<p>Don't confuse the empty string with <code>' '</code>, which is a non-empty string containing one character: a space.</p>\n<p>Now fix the original program to get rid of those lines in the output, so that\nfor <code>name = 'World'</code> it prints:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">W</span>\n<span class=\"n\">Wo</span>\n<span class=\"n\">Wor</span>\n<span class=\"n\">Worl</span>\n<span class=\"n\">World</span>\n</span></code></pre>", "name": "name_triangle_empty_string", "hints": ["<p>First make sure you're not working from the broken version of the previous program on this page.</p>", "<p>That is, <code>line = line + char</code> should come before <code>print(line)</code>.</p>", "<p>Apart from that, you only need to make one <strong><em>tiny</em></strong> change.</p>", "<p>We want to get rid of the <code>-</code>. So just do that. Literally.</p>", "<p>Use an empty string!</p>"], "solution": {"tokens": ["line", " ", "=", " ", "''", "\n", "for", " ", "char", " ", "in", " ", "name", ":", "\n", "    ", "line", " ", "=", " ", "line", " ", "+", " ", "char", "\n", "    ", "print", "(", "line", ")"], "maskedIndices": [20, 29, 22, 28, 10, 13, 0, 30, 16, 2, 8, 12, 4, 27, 24, 18, 6], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>"}]}, {"index": 5, "text": "<p>Isn't that pretty?</p>\n<p>The pattern of starting with something empty and building it up with a <code>for</code> loop is <em>very</em> common\nand you're going to get lots of practice with it. Some initial empty values are\n<code>''</code>, <code>0</code>, and <code>[]</code> - an empty list, which you'll see soon.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "BuildingUpStringsExercises": {"slug": "BuildingUpStringsExercises", "title": "Building Up Strings Exercises", "index": 12, "step_names": ["name_triangle_spaced", "name_triangle_backwards", "name_underlined", "name_box", "name_box_2", "diagonal_name_bonus_challenge", "final_text"], "steps": [{"index": 0, "text": "<p>Modify this program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n<span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n    <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">line</span> <span class=\"o\">+</span> <span class=\"n\">char</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>to add a space after every character in the triangle, so the output looks like this:</p>\n<pre><code>W\nW o\nW o r\nW o r l\nW o r l d\n</code></pre>", "name": "name_triangle_spaced", "hints": ["<p>You will need to use one more <code>+</code>.</p>", "<p>You will need to use a string consisting of one space: <code>' '</code>.</p>"], "solution": {"tokens": ["line", " ", "=", " ", "''", "\n", "for", " ", "char", " ", "in", " ", "name", ":", "\n", "    ", "line", " ", "=", " ", "line", " ", "+", " ", "char", " ", "+", " ", "' '", "\n", "    ", "print", "(", "line", ")"], "maskedIndices": [28, 18, 6, 2, 34, 26, 16, 24, 22, 4, 0, 20, 12, 31, 8, 10, 33, 13, 32], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>"}]}, {"index": 1, "text": "<p>Tremendous! Now modify the program so that each line is backwards, like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">W</span>\n<span class=\"n\">oW</span>\n<span class=\"n\">roW</span>\n<span class=\"n\">lroW</span>\n<span class=\"n\">dlroW</span>\n</span></code></pre>", "name": "name_triangle_backwards", "hints": ["<p>The solution is very similar to the original triangle program, just make one small change.</p>", "<p>You still want to add one character to <code>line</code> at a time, it's just a question of where you add it.</p>", "<p>You want the lines to be reversed, so you need to reverse/flip something.</p>", "<p>You need to add the character before the string, instead of after.</p>", "<p>3 + 7 is equal to 7 + 3. Same for all numbers. Is this also true for strings?</p>"], "solution": {"tokens": ["line", " ", "=", " ", "''", "\n", "for", " ", "char", " ", "in", " ", "name", ":", "\n", "    ", "line", " ", "=", " ", "char", " ", "+", " ", "line", "\n", "    ", "print", "(", "line", ")"], "maskedIndices": [22, 30, 18, 13, 0, 20, 12, 6, 28, 10, 16, 27, 8, 24, 29, 2, 4], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>"}]}, {"index": 2, "text": "<p>Brilliant!</p>\n<p>Code like:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">line</span> <span class=\"o\">+</span> <span class=\"n\">char</span>\n</span></code></pre>\n<p>is so common that Python lets you abbreviate it. This means the same thing:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">line</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>\n</span></code></pre>\n<p>Note that there is no abbreviation for <code>line = char + line</code>.</p>\n<p>Now use <code>+=</code> and a for loop to write your own program which prints <code>name</code> 'underlined', like this:</p>\n<pre><code>World\n-----\n</code></pre>\n<p>There should be one <code>-</code> for each character in <code>name</code>.</p>", "name": "name_underlined", "hints": ["<p>Look at the triangle program for inspiration.</p>", "<p>Look at the program where you printed <code>name</code> once for each character for inspiration.</p>", "<p>You will need to build up a string of dashes (<code>-</code>) one character at a time.</p>", "<p>The for loop will create a variable such as <code>char</code>, but the program doesn't need to use it.</p>"], "solution": {"tokens": ["line", " ", "=", " ", "''", "\n", "for", " ", "_", " ", "in", " ", "name", ":", "\n", "    ", "line", " ", "+=", " ", "'-'", "\n", "print", "(", "name", ")", "\n", "print", "(", "line", ")"], "maskedIndices": [10, 28, 24, 8, 16, 20, 30, 4, 2, 6, 23, 27, 0, 22, 18, 29, 25, 12, 13], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true, true, true], "lines": [{"id": "3", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>"}, {"id": "0", "content": "<span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>"}, {"id": "4", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>"}, {"id": "2", "content": "    <span class=\"n\">line</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;-&#39;</span>"}, {"id": "1", "content": "<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>"}]}, {"index": 3, "text": "<p>Fantastic!</p>\n<p>By the way, when you don't need to use a variable, it's common convention to name that variable <code>_</code> (underscore), e.g. <code>for _ in name:</code>. This doesn't change how the program runs, but it's helpful to readers.</p>\n<p>Let's make this fancier. Extend your program to draw a box around the name, like this:</p>\n<pre><code>+-----+\n|World|\n+-----+\n</code></pre>", "name": "name_box", "hints": ["<p>You did all the hard stuff in the previous exercise. Now it's just some simple adding of strings.</p>", "<p>You only need one for loop - the one used to make the line of dashes from the previous exercise.</p>", "<p>Don't try and do everything at once. Break the problem up into smaller, easier subproblems.</p>", "<p>Try writing a program that outputs:</p>\n<pre><code>-----\nWorld\n-----\n</code></pre>", "<p>Since you need to output three separate lines of text, you will need to call <code>print()</code> three times.</p>", "<p>Try writing a program that outputs:</p>\n<pre><code>|World|\n</code></pre>"], "solution": {"tokens": ["line", " ", "=", " ", "''", "\n", "for", " ", "_", " ", "in", " ", "name", ":", "\n", "    ", "line", " ", "+=", " ", "'-'", "\n", "line", " ", "=", " ", "'+'", " ", "+", " ", "line", " ", "+", " ", "'+'", "\n", "print", "(", "line", ")", "\n", "print", "(", "'|'", " ", "+", " ", "name", " ", "+", " ", "'|'", ")", "\n", "print", "(", "line", ")"], "maskedIndices": [24, 49, 12, 30, 16, 0, 2, 52, 8, 51, 28, 26, 54, 10, 20, 38, 32, 4, 37, 47, 18, 45, 55, 56, 41, 39, 57, 22, 36, 42, 6, 34, 43, 13], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true], "lines": [{"id": "5", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;|&#39;</span> <span class=\"o\">+</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;|&#39;</span><span class=\"p\">)</span>"}, {"id": "0", "content": "<span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>"}, {"id": "6", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>"}, {"id": "3", "content": "<span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;+&#39;</span> <span class=\"o\">+</span> <span class=\"n\">line</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;+&#39;</span>"}, {"id": "4", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>"}, {"id": "1", "content": "<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>"}, {"id": "2", "content": "    <span class=\"n\">line</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;-&#39;</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>"}]}, {"index": 4, "text": "<p>You're getting good at this! Looks like you need more of a challenge...maybe instead of putting a name in a box, the name should be the box? Write a program that outputs this:</p>\n<pre><code>+World+\nW     W\no     o\nr     r\nl     l\nd     d\n+World+\n</code></pre>", "name": "name_box_2", "hints": ["<p>You will need two separate for loops over <code>name</code>.</p>", "<p>Each line except for the first and last has the same characters in the middle. That means you can reuse something.</p>", "<p>Create a variable containing the spaces in the middle and use it many times.</p>", "<p>Use one loop to create a bunch of spaces, and a second loop to print a bunch of lines using the previously created spaces.</p>"], "solution": {"tokens": ["line", " ", "=", " ", "'+'", " ", "+", " ", "name", " ", "+", " ", "'+'", "\n", "spaces", " ", "=", " ", "''", "\n", "for", " ", "_", " ", "in", " ", "name", ":", "\n", "    ", "spaces", " ", "+=", " ", "' '", "\n", "\n", "print", "(", "line", ")", "\n", "for", " ", "char", " ", "in", " ", "name", ":", "\n", "    ", "print", "(", "char", " ", "+", " ", "spaces", " ", "+", " ", "char", ")", "\n", "print", "(", "line", ")"], "maskedIndices": [53, 58, 49, 68, 27, 42, 56, 62, 10, 38, 46, 6, 8, 26, 39, 20, 34, 67, 12, 18, 37, 40, 60, 52, 44, 16, 0, 2, 30, 22, 24, 14, 48, 54, 4, 32, 65, 66, 63], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true], "lines": [{"id": "1", "content": "<span class=\"n\">spaces</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>"}, {"id": "8", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>"}, {"id": "2", "content": "<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>"}, {"id": "7", "content": "    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">char</span> <span class=\"o\">+</span> <span class=\"n\">spaces</span> <span class=\"o\">+</span> <span class=\"n\">char</span><span class=\"p\">)</span>"}, {"id": "5", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>"}, {"id": "0", "content": "<span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;+&#39;</span> <span class=\"o\">+</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;+&#39;</span>"}, {"id": "3", "content": "    <span class=\"n\">spaces</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; &#39;</span>"}, {"id": "6", "content": "<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>"}]}, {"index": 5, "text": "<p>Sweet! You're really getting the hang of this!</p>\n<p>If you want you can do one more optional bonus challenge below.\nIf not, you can just continue to the <a href=\"#BasicTerminology\">next page</a> now.\nYou can come back and do this later if you want.</p>\n<p>Try writing a program that outputs the given <code>name</code> in a diagonal line, e.g:</p>\n<pre><code>W\n o\n  r\n   l\n    d\n</code></pre>", "name": "diagonal_name_bonus_challenge", "hints": ["<p>The first letter should have 0 spaces before it, the second letter should have 1 space before it, the third should have 2, etc.</p>", "<p>You should keep the spaces in a variable and build them up in a loop, as before.</p>", "<p>The difference is that you need to print letters at the same time as building up spaces.</p>", "<p>In other words, you need a single loop that does both.</p>", "<p>The body of the loop needs to print the spaces and letter, and also add a space.</p>", "<p>Since the first letter should have no spaces before it, you need to add a space after printing a letter.</p>"], "solution": {"tokens": ["spaces", " ", "=", " ", "''", "\n", "for", " ", "char", " ", "in", " ", "name", ":", "\n", "    ", "print", "(", "spaces", " ", "+", " ", "char", ")", "\n", "    ", "spaces", " ", "+=", " ", "' '"], "maskedIndices": [26, 4, 0, 28, 17, 6, 2, 13, 30, 18, 23, 20, 10, 8, 22, 12, 16], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, false, true], "lines": [{"id": "3", "content": "    <span class=\"n\">spaces</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; &#39;</span>"}, {"id": "1", "content": "<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>"}, {"id": "2", "content": "    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">spaces</span> <span class=\"o\">+</span> <span class=\"n\">char</span><span class=\"p\">)</span>"}, {"id": "0", "content": "<span class=\"n\">spaces</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>"}]}, {"index": 6, "text": "<p>Wow, nothing can stop you!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "BasicTerminology": {"slug": "BasicTerminology", "title": "Basic Terminology", "index": 13, "step_names": ["final_text"], "steps": [{"index": 0, "text": "<p>Here's some words you need to know:</p>\n<p>An <strong><em>expression</em></strong> is a piece of code that has a value. For example, in this line of code:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello '</span> <span class=\"o\">+</span> <span class=\"n\">name</span>\n</span></code></pre>\n<p>there are three expressions:</p>\n<ol>\n<li><code>'Hello '</code></li>\n<li><code>name</code></li>\n<li><code>'Hello ' + name</code></li>\n</ol>\n<p>By contrast, the full line <code>sentence = ...</code> is a <strong><em>statement</em></strong>. It's a command that tells the computer to perform an action. It has no value of its own. This means, for example, that you can't add statements together. This code is invalid:</p>\n<pre><code>(word = 'Hello') + (name = 'Bob')\n</code></pre>\n<p>Specifically, a statement like <code>sentence = ...</code> where a variable is given a value is called <strong><em>assignment</em></strong> - the value is <em>assigned to</em> the the variable.</p>\n<p>A program is a list of statements which are executed in order. A <code>for</code> loop is a <em>compound statement</em>, meaning it has a body of its own which contains other statements. Most statements will also contain expressions, and expressions can contain other smaller expressions, but expressions cannot contain statements.</p>\n<p>The process of calculating the value of an expression is called <strong><em>evaluation</em></strong> - note how it almost contains the word 'value'. The computer <em>evaluates</em> <code>1 + 2</code> to get the value <code>3</code>.</p>\n<p>The process of executing a loop is called <strong><em>iteration</em></strong>. Code like <code>for char in 'Hello':</code> is <em>iterating over</em> the string <code>'Hello'</code>. The fact that it's possible means that strings are <em>iterable</em>. By contrast, numbers are not iterable, which is exactly what Python will tell you if you try <code>for char in 3:</code>. Each run through the loop is <em>one iteration</em>, so in this example there will be 5 iterations.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingIfStatements": {"slug": "IntroducingIfStatements", "title": "Introducing If Statements", "index": 14, "step_names": ["introducing_booleans", "first_if_statements", "excited_example", "excited_false_example", "excited_confused_exercise", "final_text"], "steps": [{"index": 0, "text": "<p>Now we're going to learn how to tell the computer to make decisions and only run code\nunder certain conditions. For this we will need a new type of value. You've seen\nnumbers and strings, now meet <em>booleans</em>. There are only two boolean values:\n<code>True</code> and <code>False</code>. Try this program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span>\n<span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "introducing_booleans", "hints": [], "solution": {"tokens": ["condition", " ", "=", " ", "True", "\n", "print", "(", "condition", ")", "\n", "condition", " ", "=", " ", "False", "\n", "print", "(", "condition", ")"], "maskedIndices": [11, 9, 15, 6, 13, 2, 7, 19, 18, 17, 20, 0, 8, 4], "mask": [true, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Booleans are meant to be used inside <em>if statements</em> (sometimes also called <em>conditionals</em>).</p>\n<p>Here is a simple example for you to run:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'This gets printed'</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'This does not'</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "first_if_statements", "hints": [], "solution": {"tokens": ["if", " ", "True", ":", "\n", "    ", "print", "(", "'This gets printed'", ")", "\n", "\n", "if", " ", "False", ":", "\n", "    ", "print", "(", "'This does not'", ")"], "maskedIndices": [20, 14, 2, 12, 6, 18, 21, 8, 3, 15, 0, 9, 7, 19], "mask": [true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>Note how the code inside the first <code>if</code> statement ran, but not the second.</p>\n<p>In general, an <code>if</code> statement looks like this:</p>\n<pre><code>if &lt;condition&gt;:\n    &lt;body&gt;\n</code></pre>\n<p>where <code>&lt;condition&gt;</code> is any expression which evaluates to a boolean and <code>&lt;body&gt;</code> is an <strong>indented</strong> list\nof one or more statements. The structure is quite similar to a <code>for</code> loop. Note the colon (<code>:</code>) which\nis essential.</p>\n<p>When the computer sees <code>if &lt;condition&gt;:</code>, it checks if <code>&lt;condition&gt;</code> is <code>True</code>. If it is, it runs the body.\nIf not, it skips it and continues to the rest of the program.</p>\n<p>Here's a more interesting example for you to run:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello World'</span>\n<span class=\"n\">excited</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"k\">if</span> <span class=\"n\">excited</span><span class=\"p\">:</span>\n    <span class=\"n\">sentence</span> <span class=\"o\">+=</span> <span class=\"s1\">'!'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "excited_example", "hints": [], "solution": {"tokens": ["sentence", " ", "=", " ", "'Hello World'", "\n", "excited", " ", "=", " ", "True", "\n", "if", " ", "excited", ":", "\n", "    ", "sentence", " ", "+=", " ", "'!'", "\n", "print", "(", "sentence", ")"], "maskedIndices": [10, 25, 27, 6, 2, 24, 26, 22, 0, 4, 12, 14, 18, 8, 20, 15], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["Hello World", "Hello World!", "Error"], "answer": "Hello World!"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>(Remember that <code>sentence += '!'</code> means <code>sentence = sentence + '!'</code>)</p>\n<p>Change <code>excited = True</code> to <code>excited = False</code> and run the program again to see what the difference is.</p>", "name": "excited_false_example", "hints": [], "solution": {"tokens": ["sentence", " ", "=", " ", "'Hello World'", "\n", "excited", " ", "=", " ", "False", "\n", "if", " ", "excited", ":", "\n", "    ", "sentence", " ", "+=", " ", "'!'", "\n", "print", "(", "sentence", ")"], "maskedIndices": [26, 20, 15, 14, 18, 8, 27, 24, 22, 12, 4, 25, 10, 0, 2, 6], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["Hello World", "Hello World!", "Error"], "answer": "Hello World"}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the program from the previous step, but replace <code>True</code> with <code>False</code>, so <code>excited = False</code>.</p>"}]}, {"index": 4, "text": "<p>Time for an exercise. Modify the program above to include an extra\nboolean parameter <code>confused</code>, so the program should start like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello World'</span>\n<span class=\"n\">excited</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">confused</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</span></code></pre>\n<p>(<code>sentence</code> can be any string and the two booleans can be either <code>True</code> or <code>False</code>)</p>\n<p>When <code>confused</code> is true, the printed sentence should have a question mark added to the end.\nIf both <code>confused</code> and <code>excited</code> are true, the sentence should end with <code>!?</code>.</p>", "name": "excited_confused_exercise", "hints": ["<p>You only need to add a few lines to the existing program. All the existing code should be left as is.</p>", "<p>The code that you add should be very similar to the existing code.</p>"], "solution": {"tokens": ["if", " ", "excited", ":", "\n", "    ", "sentence", " ", "+=", " ", "'!'", "\n", "if", " ", "confused", ":", "\n", "    ", "sentence", " ", "+=", " ", "'?'", "\n", "print", "(", "sentence", ")"], "maskedIndices": [22, 0, 26, 24, 25, 18, 2, 10, 6, 3, 8, 14, 12, 20, 15, 27], "mask": [true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello'</span>\n<span class=\"n\">excited</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">confused</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</span></code></pre>"}]}, {"index": 5, "text": "<p>Well done! This program can do 4 different things depending on how you combine <code>excited</code>\nand <code>confused</code>. Try them out if you want.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "CombiningCompoundStatements": {"slug": "CombiningCompoundStatements", "title": "Combining Compound Statements", "index": 15, "step_names": ["for_inside_if", "final_text"], "steps": [{"index": 0, "text": "<p>Compound statements like <code>for</code> loops and <code>if</code> statements have bodies which are a list\nof inner statements. Those inner statements can be anything, including other compound statements.\nTry this example of a <code>for</code> loop inside an <code>if</code> statement for when you want to show\nthat you're <em>really</em> excited:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello World'</span>\n<span class=\"n\">excited</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">if</span> <span class=\"n\">excited</span><span class=\"p\">:</span>\n    <span class=\"n\">new_sentence</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n    <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">sentence</span><span class=\"p\">:</span>\n        <span class=\"n\">new_sentence</span> <span class=\"o\">+=</span> <span class=\"n\">char</span> <span class=\"o\">+</span> <span class=\"s1\">'!'</span>\n    <span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"n\">new_sentence</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "for_inside_if", "hints": [], "solution": {"tokens": ["sentence", " ", "=", " ", "'Hello World'", "\n", "excited", " ", "=", " ", "True", "\n", "\n", "if", " ", "excited", ":", "\n", "    ", "new_sentence", " ", "=", " ", "''", "\n", "    ", "for", " ", "char", " ", "in", " ", "sentence", ":", "\n", "        ", "new_sentence", " ", "+=", " ", "char", " ", "+", " ", "'!'", "\n", "    ", "sentence", " ", "=", " ", "new_sentence", "\n", "\n", "print", "(", "sentence", ")"], "maskedIndices": [51, 10, 49, 33, 40, 13, 42, 54, 44, 30, 0, 21, 47, 2, 55, 23, 8, 19, 6, 15, 56, 16, 57, 36, 28, 38, 26, 32, 4], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["Hello World", "!!!!!!!!!!!", "Hello World!!!!!!!!!!!", "!!!!!!!!!!!Hello World", "Hello World!", "!Hello World", "!Hello World!", "H!e!l!l!o! !W!o!r!l!d!", "!H!e!l!l!o! !W!o!r!l!d", "Error"], "answer": "H!e!l!l!o! !W!o!r!l!d!"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Note how the body of the <code>if</code> statement (4 lines) is indented as usual, while the body\nof the <code>for</code> loop (1 line) is indented by an additional 4 spaces in each line to show that\nthose lines are within the <code>for</code> loop. You can see the overall structure of the program\njust by looking at the indentation.</p>\n<p>Alternatively, you can put an <code>if</code> inside a <code>for</code>:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello World'</span>\n<span class=\"n\">excited</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">new_sentence</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">sentence</span><span class=\"p\">:</span>\n    <span class=\"n\">new_sentence</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>\n    <span class=\"k\">if</span> <span class=\"n\">excited</span><span class=\"p\">:</span>\n        <span class=\"n\">new_sentence</span> <span class=\"o\">+=</span> <span class=\"s1\">'!'</span>\n\n<span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"n\">new_sentence</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>These two programs have the exact same result. However the first one is more efficient as it\nonly iterates over the string if it needs to, since when <code>excited = False</code> nothing changes.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "UnderstandingProgramsWithSnoop": {"slug": "UnderstandingProgramsWithSnoop", "title": "Understanding Programs With <code>snoop</code>", "index": 16, "step_names": ["print_tail", "print_tail_snoop", "print_first_character", "final_text"], "steps": [{"index": 0, "text": "<p>Run this program:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello World'</span>\n\n<span class=\"n\">include</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">new_sentence</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">sentence</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">include</span><span class=\"p\">:</span>\n        <span class=\"n\">new_sentence</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>\n    <span class=\"n\">include</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_sentence</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "print_tail", "hints": [], "solution": {"tokens": ["sentence", " ", "=", " ", "'Hello World'", "\n", "\n", "include", " ", "=", " ", "False", "\n", "new_sentence", " ", "=", " ", "''", "\n", "for", " ", "char", " ", "in", " ", "sentence", ":", "\n", "    ", "if", " ", "include", ":", "\n", "        ", "new_sentence", " ", "+=", " ", "char", "\n", "    ", "include", " ", "=", " ", "True", "\n", "\n", "print", "(", "new_sentence", ")"], "maskedIndices": [26, 32, 13, 25, 29, 9, 4, 49, 2, 50, 51, 11, 37, 42, 46, 17, 19, 52, 39, 15, 0, 44, 7, 21, 23, 35, 31], "mask": [true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["Hello World", "ello World", "Hello Worl", "H", "d", "Error"], "answer": "ello World"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Programs are starting to get complicated!\nIt's time to introduce a new tool to help you understand programs. Click the <code>snoop</code> button to run the same program while also showing what's happening.</p>", "name": "print_tail_snoop", "hints": [], "solution": {"tokens": ["sentence", " ", "=", " ", "'Hello World'", "\n", "\n", "include", " ", "=", " ", "False", "\n", "new_sentence", " ", "=", " ", "''", "\n", "for", " ", "char", " ", "in", " ", "sentence", ":", "\n", "    ", "if", " ", "include", ":", "\n", "        ", "new_sentence", " ", "+=", " ", "char", "\n", "    ", "include", " ", "=", " ", "True", "\n", "\n", "print", "(", "new_sentence", ")"], "maskedIndices": [32, 2, 0, 35, 21, 39, 4, 29, 37, 26, 42, 49, 17, 11, 44, 7, 51, 52, 46, 23, 31, 13, 19, 15, 9, 50, 25], "mask": [true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same program from the previous step, but use the <code>snoop</code> button instead of the 'Run' button. Copy the program again if you might have changed it.</p>"}, {"type": "custom", "message": "<p>With your code in the editor, click the <code>snoop</code> button.</p>"}]}, {"index": 2, "text": "<p>Tada! Scroll to the top of the terminal and let's walk through what <code>snoop</code> is showing you.\nIt starts out very straightforward:</p>\n<pre><code>    1 | sentence = 'Hello World'\n    3 | include = False\n    4 | new_sentence = ''\n    5 | for char in sentence:\n ...... char = 'H'\n</code></pre>\n<p>The first lines are simply showing you the lines of the program that the computer ran.\nOn the left is the line number as seen in the editor.</p>\n<p>Running <code>for char in sentence:</code> assigns a value to the variable <code>char</code>, so <code>snoop</code> shows you that value.\nLines starting with <code>......</code> indicate a new variable or a change in the value of an existing variable.\nSuch lines will not be shown when they're redundant, which is why the <code>snoop</code> output doesn't start like this:</p>\n<pre><code>    1 | sentence = 'Hello World'\n ...... sentence = 'Hello World'\n    3 | include = False\n ...... include = False\n    4 | new_sentence = ''\n ...... new_sentence = ''\n    5 | for char in sentence:\n ...... char = 'H'\n</code></pre>\n<p>The next two lines are:</p>\n<pre><code>    6 |     if include:\n    8 |     include = True\n</code></pre>\n<p>What's important here is what's not showing: because <code>include</code> is <code>False</code>, line 7 (<code>new_sentence += char</code>) gets skipped. But then <code>include</code> is set to <code>True</code>, so the next iteration of the loop is different:</p>\n<pre><code>    5 | for char in sentence:\n ...... char = 'e'\n    6 |     if include:\n    7 |         new_sentence += char\n .............. new_sentence = 'e'\n</code></pre>\n<p><code>new_sentence += char</code> runs for the first time and the variable <code>new_sentence</code> gets a new value.</p>\n<p>Now modify the program to do the opposite: only print the first character, leave out the rest.</p>", "name": "print_first_character", "hints": ["<p>The code should be almost exactly the same, just make a couple of small changes.</p>", "<p>Make sure that the code inside <code>if include:</code> runs at the beginning of the loop, in the first iteration.</p>", "<p>That means <code>include</code> should be <code>True</code> at that point.</p>", "<p>Make sure that the code inside <code>if include:</code> <em>doesn't</em> run after the first iteration.</p>", "<p>That means <code>include</code> should be <code>False</code> after the first iteration.</p>"], "solution": {"tokens": ["include", " ", "=", " ", "True", "\n", "new_sentence", " ", "=", " ", "''", "\n", "for", " ", "char", " ", "in", " ", "sentence", ":", "\n", "    ", "if", " ", "include", ":", "\n", "        ", "new_sentence", " ", "+=", " ", "char", "\n", "    ", "include", " ", "=", " ", "False", "\n", "\n", "print", "(", "new_sentence", ")"], "maskedIndices": [42, 10, 0, 4, 32, 22, 6, 18, 35, 14, 43, 30, 2, 28, 16, 25, 37, 19, 12, 24, 45, 39, 8, 44], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": [{"id": "5", "content": "    <span class=\"n\">include</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>"}, {"id": "7", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_sentence</span><span class=\"p\">)</span>"}, {"id": "4", "content": "        <span class=\"n\">new_sentence</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>"}, {"id": "1", "content": "<span class=\"n\">new_sentence</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>"}, {"id": "2", "content": "<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">sentence</span><span class=\"p\">:</span>"}, {"id": "0", "content": "<span class=\"n\">include</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>"}, {"id": "3", "content": "    <span class=\"k\">if</span> <span class=\"n\">include</span><span class=\"p\">:</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello there'</span>\n</span></code></pre>"}]}, {"index": 3, "text": "<p>Great job! You're working with increasingly complex programs.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IfAndElse": {"slug": "IfAndElse", "title": "<code>if</code> and <code>else</code>", "index": 17, "step_names": ["first_if_else", "first_if_else_false", "if_upper_else_lower", "if_upper_else_lower_false", "undefined_char", "else_full_stop", "capitalise", "spongebob", "final_text"], "steps": [{"index": 0, "text": "<p>An <code>if</code> statement can optionally have an <code>else</code> part. Run this example:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"k\">if</span> <span class=\"n\">condition</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Yes'</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'No'</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "first_if_else", "hints": [], "solution": {"tokens": ["condition", " ", "=", " ", "True", "\n", "if", " ", "condition", ":", "\n", "    ", "print", "(", "'Yes'", ")", "\n", "else", ":", "\n", "    ", "print", "(", "'No'", ")"], "maskedIndices": [17, 22, 0, 6, 2, 8, 24, 13, 4, 12, 21, 15, 18, 23, 14, 9], "mask": [true, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Now change the first line to <code>condition = False</code> and run it again.</p>", "name": "first_if_else_false", "hints": [], "solution": {"tokens": ["condition", " ", "=", " ", "False", "\n", "if", " ", "condition", ":", "\n", "    ", "print", "(", "'Yes'", ")", "\n", "else", ":", "\n", "    ", "print", "(", "'No'", ")"], "maskedIndices": [8, 13, 4, 21, 17, 12, 2, 18, 22, 0, 6, 14, 9, 15, 23, 24], "mask": [true, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same program from the previous step, but replace <code>True</code> with <code>False</code>, so that <code>condition = False</code>.</p>"}]}, {"index": 2, "text": "<p>Think of <code>else</code> as saying 'or else' or 'otherwise'. It means that if the condition in the <code>if</code>\nis false, then the body of the <code>else</code> will run instead. Whether the condition is true or false,\nexactly one of the two bodies will run.</p>\n<p>Here's a more interesting example to run:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello World'</span>\n<span class=\"n\">excited</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"k\">if</span> <span class=\"n\">excited</span><span class=\"p\">:</span>\n    <span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"n\">sentence</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"n\">sentence</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "if_upper_else_lower", "hints": [], "solution": {"tokens": ["sentence", " ", "=", " ", "'Hello World'", "\n", "excited", " ", "=", " ", "True", "\n", "if", " ", "excited", ":", "\n", "    ", "sentence", " ", "=", " ", "sentence", ".", "upper", "(", ")", "\n", "else", ":", "\n", "    ", "sentence", " ", "=", " ", "sentence", ".", "lower", "(", ")", "\n", "print", "(", "sentence", ")"], "maskedIndices": [8, 4, 6, 38, 0, 23, 15, 2, 25, 29, 39, 42, 32, 14, 34, 43, 22, 10, 12, 26, 20, 37, 18, 45, 36, 24, 28, 40, 44], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p><code>sentence.upper()</code> is a new kind of expression we haven't encountered yet. What's going on here is that <code>sentence</code> is a string and strings have various <em>methods</em> that let you conveniently calculate new values from them, including <code>upper</code> and <code>lower</code>. The names refer to uppercase (capital letters) and lowercase (small letters). <code>'Hello World'.upper()</code> evaluates to <code>'HELLO WORLD'</code>. It doesn't change the contents of <code>sentence</code> though, so you have to assign the new value again with <code>sentence = sentence.upper()</code>.</p>\n<p>Now change <code>excited</code> to <code>False</code> and run it again.</p>", "name": "if_upper_else_lower_false", "hints": [], "solution": {"tokens": ["sentence", " ", "=", " ", "'Hello World'", "\n", "excited", " ", "=", " ", "False", "\n", "if", " ", "excited", ":", "\n", "    ", "sentence", " ", "=", " ", "sentence", ".", "upper", "(", ")", "\n", "else", ":", "\n", "    ", "sentence", " ", "=", " ", "sentence", ".", "lower", "(", ")", "\n", "print", "(", "sentence", ")"], "maskedIndices": [44, 42, 10, 37, 6, 18, 26, 39, 28, 8, 14, 25, 15, 34, 20, 40, 36, 32, 24, 4, 43, 23, 0, 2, 45, 22, 12, 29, 38], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same program from the previous step, but replace <code>True</code> with <code>False</code>, so that <code>excited = False</code>.</p>"}]}, {"index": 4, "text": "<p>Here's a broken program:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello World'</span>\n<span class=\"n\">excited</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">if</span> <span class=\"n\">excited</span><span class=\"p\">:</span>\n    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'!'</span>\n<span class=\"n\">sentence</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Can you see the problem? If you run it, everything seems fine. What could go wrong?</p>\n<p>Spoilers below! Have you figured it out?</p>\n<p>What happens if you change <code>excited</code> to <code>False</code>?</p>", "name": "undefined_char", "hints": [], "solution": {"tokens": ["sentence", " ", "=", " ", "'Hello World'", "\n", "excited", " ", "=", " ", "False", "\n", "\n", "if", " ", "excited", ":", "\n", "    ", "char", " ", "=", " ", "'!'", "\n", "sentence", " ", "+=", " ", "char", "\n", "\n", "print", "(", "sentence", ")"], "maskedIndices": [15, 13, 8, 21, 33, 27, 2, 10, 16, 35, 32, 34, 6, 29, 25, 0, 4, 19, 23], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["Hello World", "Hello World!", "Error"], "answer": "Error"}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Copy the program above. Run it as is if you want. Then change <code>excited = True</code> to <code>excited = False</code> and run it again.</p>"}]}, {"index": 5, "text": "<p>If <code>excited</code> is true then <code>char</code> is defined and everything runs fine. But otherwise\n<code>char</code> never gets assigned a value, so trying to use it in <code>sentence += char</code> fails.</p>\n<p>Fix this by adding an <code>else</code> clause to the <code>if</code> so that if <code>excited</code> is false, a full stop (<code>.</code>)\nis added to the end of the sentence instead of an exclamation mark (<code>!</code>).</p>", "name": "else_full_stop", "hints": ["<p>Don't change anything that's already there, just add a bit more code.</p>", "<p><code>else</code> needs to come immediately after the <code>if</code> body, with nothing in between.</p>", "<p><code>sentence += char</code> needs to run whether <code>excited</code> is <code>True</code> or <code>False</code>.</p>", "<p>You <em>could</em> have a copy of <code>sentence += char</code> in both the <code>if</code> and <code>else</code> blocks, but there's a better way.</p>", "<p>Use <code>else</code> to assign a different value to <code>char</code>.</p>", "<p>If <code>excited</code> is <code>False</code>, then <code>char</code> should be <code>'.'</code> instead of <code>'!'</code>.</p>"], "solution": {"tokens": ["if", " ", "excited", ":", "\n", "    ", "char", " ", "=", " ", "'!'", "\n", "else", ":", "\n", "    ", "char", " ", "=", " ", "'.'", "\n", "sentence", " ", "+=", " ", "char", "\n", "\n", "print", "(", "sentence", ")"], "maskedIndices": [32, 18, 30, 31, 2, 8, 24, 20, 16, 6, 3, 12, 22, 29, 26, 13, 10, 0], "mask": [true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true], "lines": [{"id": "6", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>"}, {"id": "2", "content": "<span class=\"k\">else</span><span class=\"p\">:</span>"}, {"id": "0", "content": "<span class=\"k\">if</span> <span class=\"n\">excited</span><span class=\"p\">:</span>"}, {"id": "4", "content": "<span class=\"n\">sentence</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>"}, {"id": "3", "content": "    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span>"}, {"id": "1", "content": "    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;!&#39;</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello there'</span>\n<span class=\"n\">excited</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</span></code></pre>"}]}, {"index": 6, "text": "<p>Time for a challenge!</p>\n<p>Write a program which, given a string <code>sentence</code>, prints a modified version with\nthe same letters, where the first letter is capitalised and the rest are lowercase.\nFor example, the output should be <code>Hello world</code> whether the input <code>sentence = 'hello world'</code>\nor <code>'HELLO WORLD'</code>.</p>", "name": "capitalise", "hints": ["<p>You've learned all the tools you need for this. I believe in you! Look at previous programs for inspiration.</p>", "<p>You will need a loop to build up the new sentence character by character.</p>", "<p>You will need an <code>if/else</code> to choose whether to add an uppercase or lowercase character.</p>", "<p>Your <code>if/else</code> needs to execute different bodies depending on which iteration of the loop it's in.</p>", "<p>That means that your <code>if</code> condition needs to be a variable that changes inside the loop.</p>", "<p>In the first iteration you need an uppercase letter. In the following iterations you need a lowercase letter.</p>"], "solution": {"tokens": ["upper", " ", "=", " ", "True", "\n", "new_sentence", " ", "=", " ", "''", "\n", "for", " ", "char", " ", "in", " ", "sentence", ":", "\n", "    ", "if", " ", "upper", ":", "\n", "        ", "char", " ", "=", " ", "char", ".", "upper", "(", ")", "\n", "    ", "else", ":", "\n", "        ", "char", " ", "=", " ", "char", ".", "lower", "(", ")", "\n", "    ", "new_sentence", " ", "+=", " ", "char", "\n", "    ", "upper", " ", "=", " ", "False", "\n", "\n", "print", "(", "new_sentence", ")"], "maskedIndices": [63, 43, 40, 69, 12, 16, 50, 33, 28, 61, 6, 30, 54, 19, 10, 58, 70, 4, 32, 8, 39, 51, 47, 35, 71, 2, 0, 14, 49, 68, 34, 48, 18, 56, 65, 22, 36, 24, 45, 25], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": [{"id": "10", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_sentence</span><span class=\"p\">)</span>"}, {"id": "7", "content": "    <span class=\"n\">new_sentence</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>"}, {"id": "3", "content": "    <span class=\"k\">if</span> <span class=\"n\">upper</span><span class=\"p\">:</span>"}, {"id": "0", "content": "<span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>"}, {"id": "8", "content": "    <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>"}, {"id": "4", "content": "        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"n\">char</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>"}, {"id": "5", "content": "    <span class=\"k\">else</span><span class=\"p\">:</span>"}, {"id": "6", "content": "        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"n\">char</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>"}, {"id": "1", "content": "<span class=\"n\">new_sentence</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>"}, {"id": "2", "content": "<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">sentence</span><span class=\"p\">:</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'HELLO THERE'</span>\n</span></code></pre>"}]}, {"index": 7, "text": "<p>Excellent!!!</p>\n<p>One more exercise, and then you can relax.</p>\n<p>Write a program which prints <code>sentence</code> mockingly, e.g:</p>\n<pre><code>OnE MoRe eXeRcIsE, aNd tHeN YoU CaN ReLaX.\n</code></pre>\n<p>Every second character should be lowercased, the rest should be uppercase.</p>", "name": "spongebob", "hints": ["<p>This is similar to the previous exercise. The difference is when and where you set the condition variable.</p>", "<p>You will need to have a boolean variable which changes with every iteration.</p>", "<p>First write a small program which takes a boolean variable and flips it, i.e. if the variable is <code>True</code> it becomes <code>False</code> and if it starts out <code>False</code> it's changed to <code>True</code>. No loops, just an <code>if/else</code>.</p>", "<p>You will need to use the variable in the <code>if</code> condition and also assign to the same variable in the body.</p>", "<p>Combine that flipping <code>if/else</code> with the one that chooses an uppercase or lowercase character.</p>"], "solution": {"tokens": ["upper", " ", "=", " ", "True", "\n", "new_sentence", " ", "=", " ", "''", "\n", "for", " ", "char", " ", "in", " ", "sentence", ":", "\n", "    ", "if", " ", "upper", ":", "\n", "        ", "char", " ", "=", " ", "char", ".", "upper", "(", ")", "\n", "        ", "upper", " ", "=", " ", "False", "\n", "    ", "else", ":", "\n", "        ", "char", " ", "=", " ", "char", ".", "lower", "(", ")", "\n", "        ", "upper", " ", "=", " ", "True", "\n", "    ", "new_sentence", " ", "+=", " ", "char", "\n", "\n", "print", "(", "new_sentence", ")"], "maskedIndices": [14, 54, 36, 33, 18, 70, 2, 22, 78, 24, 52, 6, 32, 57, 16, 8, 25, 43, 58, 63, 50, 65, 10, 39, 47, 35, 28, 75, 0, 55, 12, 68, 34, 46, 72, 61, 76, 4, 19, 41, 56, 77, 30], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": [{"id": "7", "content": "        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"n\">char</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>"}, {"id": "6", "content": "    <span class=\"k\">else</span><span class=\"p\">:</span>"}, {"id": "0", "content": "<span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>"}, {"id": "5", "content": "        <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>"}, {"id": "1", "content": "<span class=\"n\">new_sentence</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>"}, {"id": "9", "content": "    <span class=\"n\">new_sentence</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>"}, {"id": "8", "content": "        <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>"}, {"id": "4", "content": "        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"n\">char</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>"}, {"id": "3", "content": "    <span class=\"k\">if</span> <span class=\"n\">upper</span><span class=\"p\">:</span>"}, {"id": "11", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_sentence</span><span class=\"p\">)</span>"}, {"id": "2", "content": "<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">sentence</span><span class=\"p\">:</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'One more exercise, and then you can relax.'</span>\n</span></code></pre>"}]}, {"index": 8, "text": "<p>Perfect! Take a moment to be proud of what you've achieved. Can you feel your brain growing?</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "TheEqualityOperator": {"slug": "TheEqualityOperator", "title": "The Equality Operator", "index": 18, "step_names": ["introducing_equality", "equality_vs_assignment", "if_equals_replacing_characters", "if_equals_replacing_characters_exercise", "final_text"], "steps": [{"index": 0, "text": "<p>There are several ways to obtain booleans without assigning them directly,\nwhich allows you to construct very useful <code>if</code> statements. In particular there\nare many <em>comparison operators</em> which compare the values of two expressions.\nThe most common is the equality operator which checks if two values are equal.\nIt's denoted by two equals signs: <code>==</code>. Try running this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'ab'</span> <span class=\"o\">+</span> <span class=\"s1\">'c'</span> <span class=\"o\">==</span> <span class=\"s1\">'a'</span> <span class=\"o\">+</span> <span class=\"s1\">'bc'</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "introducing_equality", "hints": [], "solution": {"tokens": ["print", "(", "1", " ", "+", " ", "2", " ", "==", " ", "3", ")", "\n", "print", "(", "4", " ", "+", " ", "5", " ", "==", " ", "6", ")", "\n", "print", "(", "'ab'", " ", "+", " ", "'c'", " ", "==", " ", "'a'", " ", "+", " ", "'bc'", ")"], "maskedIndices": [2, 11, 13, 40, 36, 15, 30, 4, 23, 14, 1, 26, 32, 38, 19, 41, 24, 27, 17, 0, 28, 10, 8, 21, 34, 6], "mask": [true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>As you can see, if the values are equal, the equality expression evaluates to <code>True</code>,\notherwise it's <code>False</code>.</p>\n<p>Note the difference between the equality operator <code>==</code> and a single <code>=</code> which has different meanings,\nparticularly in assignment statements as you've seen them so far. What happens if you try\nremoving a single <code>=</code> from the previous program?</p>", "name": "equality_vs_assignment", "hints": [], "solution": {"tokens": ["print", "(", "1", " ", "+", " ", "2", " ", "=", " ", "3", ")"], "maskedIndices": [1, 10, 8, 11, 0, 6, 4, 2], "mask": [true, true, true, false, true, false, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Run the program from the previous step, but replace any of the <code>==</code> with just <code>=</code>.</p>"}]}, {"index": 2, "text": "<p>Let's use <code>==</code> in an <code>if</code> statement. In this program, the <code>if</code> body runs only when <code>c</code> is the character <code>'s'</code>. See for yourself.</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'kesha'</span>\n<span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n<span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"s1\">'s'</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"s1\">'$'</span>\n    <span class=\"n\">new_name</span> <span class=\"o\">+=</span> <span class=\"n\">c</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_name</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "if_equals_replacing_characters", "hints": [], "solution": {"tokens": ["name", " ", "=", " ", "'kesha'", "\n", "new_name", " ", "=", " ", "''", "\n", "for", " ", "c", " ", "in", " ", "name", ":", "\n", "    ", "if", " ", "c", " ", "==", " ", "'s'", ":", "\n", "        ", "c", " ", "=", " ", "'$'", "\n", "    ", "new_name", " ", "+=", " ", "c", "\n", "\n", "print", "(", "new_name", ")"], "maskedIndices": [26, 24, 4, 47, 32, 2, 0, 36, 48, 34, 46, 18, 39, 10, 8, 29, 22, 6, 12, 16, 41, 14, 49, 43, 19, 28], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>Now extend the program to also replace <code>e</code> with <code>3</code> and <code>a</code> with <code>@</code>.</p>", "name": "if_equals_replacing_characters_exercise", "hints": ["<p>You just need to add a few lines of code that are very similar to existing ones.</p>"], "solution": {"tokens": ["new_name", " ", "=", " ", "''", "\n", "for", " ", "c", " ", "in", " ", "name", ":", "\n", "    ", "if", " ", "c", " ", "==", " ", "'e'", ":", "\n", "        ", "c", " ", "=", " ", "'3'", "\n", "    ", "if", " ", "c", " ", "==", " ", "'s'", ":", "\n", "        ", "c", " ", "=", " ", "'$'", "\n", "    ", "if", " ", "c", " ", "==", " ", "'a'", ":", "\n", "        ", "c", " ", "=", " ", "'@'", "\n", "    ", "new_name", " ", "+=", " ", "c", "\n", "\n", "print", "(", "new_name", ")"], "maskedIndices": [23, 4, 54, 16, 50, 62, 57, 12, 76, 71, 37, 67, 2, 77, 52, 35, 20, 45, 6, 69, 22, 40, 33, 60, 18, 30, 0, 74, 26, 8, 56, 28, 75, 47, 64, 13, 10, 39, 43], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": [{"id": "8", "content": "    <span class=\"n\">new_name</span> <span class=\"o\">+=</span> <span class=\"n\">c</span>"}, {"id": "5", "content": "        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;$&#39;</span>"}, {"id": "4", "content": "    <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;s&#39;</span><span class=\"p\">:</span>"}, {"id": "3", "content": "        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;3&#39;</span>"}, {"id": "10", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_name</span><span class=\"p\">)</span>"}, {"id": "0", "content": "<span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>"}, {"id": "1", "content": "<span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">:</span>"}, {"id": "6", "content": "    <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:</span>"}, {"id": "7", "content": "        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;@&#39;</span>"}, {"id": "2", "content": "    <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">:</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'kesha'</span>\n</span></code></pre>"}]}, {"index": 4, "text": "<p>Well done!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingElif": {"slug": "IntroducingElif", "title": "Introducing <code>elif</code>", "index": 19, "step_names": ["dna_example", "dna_example_with_else", "dna_example_with_elif", "final_text"], "steps": [{"index": 0, "text": "<p>Quick biology lesson! Most of the cells in your body contain your full genetic code in DNA.\nThis consists of strands of molecular units called nucleobases which come in four varieties:\nAdenine, Cytosine, Guanine, and Thymine, or ACGT for short.\nSo part of a single strand might be something like:</p>\n<pre><code>AGTAGCGTCCTTAGTTACAGGATGGCTTAT...\n</code></pre>\n<p>This will be paired with another strand where A is replaced by T and vice versa,\nand C is replaced by G and vice versa, e.g:</p>\n<pre><code>TCATCGCAGGAATCAATGTCCTACCGAATA...\n</code></pre>\n<p>The two strands are 'zipped' together into the famous double helix structure,\njoined by the matching A-T and C-G pairs. These pairings are essential in copying DNA when\ncells divide and reproduce. The double helix is unzipped and the code is transcribed\ninto its opposite version to make the copy.</p>\n<p>We're going to repeat that process. Let's try the same kind of program we just wrote:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">dna</span> <span class=\"o\">=</span> <span class=\"s1\">'AGTAGCGTC'</span>\n<span class=\"n\">opposite_dna</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">dna</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'A'</span><span class=\"p\">:</span>\n        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'T'</span>\n    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'T'</span><span class=\"p\">:</span>\n        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'A'</span>\n    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'G'</span><span class=\"p\">:</span>\n        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'C'</span>\n    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'C'</span><span class=\"p\">:</span>\n        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'G'</span>\n    <span class=\"n\">opposite_dna</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">opposite_dna</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "dna_example", "hints": [], "solution": {"tokens": ["dna", " ", "=", " ", "'AGTAGCGTC'", "\n", "opposite_dna", " ", "=", " ", "''", "\n", "for", " ", "char", " ", "in", " ", "dna", ":", "\n", "    ", "if", " ", "char", " ", "==", " ", "'A'", ":", "\n", "        ", "char", " ", "=", " ", "'T'", "\n", "    ", "if", " ", "char", " ", "==", " ", "'T'", ":", "\n", "        ", "char", " ", "=", " ", "'A'", "\n", "    ", "if", " ", "char", " ", "==", " ", "'G'", ":", "\n", "        ", "char", " ", "=", " ", "'C'", "\n", "    ", "if", " ", "char", " ", "==", " ", "'C'", ":", "\n", "        ", "char", " ", "=", " ", "'G'", "\n", "    ", "opposite_dna", " ", "+=", " ", "char", "\n", "\n", "print", "(", "opposite_dna", ")"], "maskedIndices": [6, 85, 100, 2, 10, 98, 80, 87, 63, 45, 46, 66, 90, 19, 34, 36, 83, 92, 62, 8, 22, 4, 18, 56, 97, 51, 14, 79, 60, 94, 28, 12, 39, 24, 49, 70, 75, 43, 16, 73, 99, 77, 53, 32, 0, 41, 58, 26, 68, 29], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Oh dear, that doesn't quite work. <code>T</code> is changed to <code>A</code> but <code>A</code> isn't changed to anything.\nCan you see why?</p>\n<p>When <code>char == 'A'</code>, then the body <code>char = 'T'</code> does indeed run. But that means that the following\ncondition <code>char == 'T'</code> also passes and so <code>char = 'A'</code> and we're back where we started.\nWe need to only change <code>char</code> from <code>T</code> to <code>A</code> if <code>char</code> wasn't already <code>A</code> to begin with,\nmeaning <code>char == 'A'</code> was <code>False</code>. We can do that with an <code>else</code>, like so:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'A'</span><span class=\"p\">:</span>\n    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'T'</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'T'</span><span class=\"p\">:</span>\n        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'A'</span>\n</span></code></pre>\n<p>Now fix the program to replace all characters correctly.</p>", "name": "dna_example_with_else", "hints": ["<p>Change:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'A'</span><span class=\"p\">:</span>\n    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'T'</span>\n<span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'T'</span><span class=\"p\">:</span>\n    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'A'</span>\n</span></code></pre>\n<p>to look like the revised snippet. It's just a small change, do it without copy-pasting.</p>", "<p>Now make the same kind of change to the code swapping G and C.</p>"], "solution": {"tokens": ["opposite_dna", " ", "=", " ", "''", "\n", "for", " ", "char", " ", "in", " ", "dna", ":", "\n", "    ", "if", " ", "char", " ", "==", " ", "'A'", ":", "\n", "        ", "char", " ", "=", " ", "'T'", "\n", "    ", "else", ":", "\n", "        ", "if", " ", "char", " ", "==", " ", "'T'", ":", "\n", "            ", "char", " ", "=", " ", "'A'", "\n", "    ", "if", " ", "char", " ", "==", " ", "'G'", ":", "\n", "        ", "char", " ", "=", " ", "'C'", "\n", "    ", "else", ":", "\n", "        ", "if", " ", "char", " ", "==", " ", "'C'", ":", "\n", "            ", "char", " ", "=", " ", "'G'", "\n", "    ", "opposite_dna", " ", "+=", " ", "char", "\n", "\n", "print", "(", "opposite_dna", ")"], "maskedIndices": [39, 18, 30, 0, 44, 37, 43, 49, 89, 28, 100, 75, 81, 82, 54, 60, 101, 71, 2, 51, 41, 4, 68, 33, 26, 47, 22, 77, 92, 6, 34, 20, 66, 58, 61, 85, 10, 56, 64, 102, 23, 13, 87, 79, 96, 94, 8, 12, 16, 72, 99], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": [{"id": "6", "content": "            <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;A&#39;</span>"}, {"id": "5", "content": "        <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;T&#39;</span><span class=\"p\">:</span>"}, {"id": "9", "content": "    <span class=\"k\">else</span><span class=\"p\">:</span>"}, {"id": "1", "content": "<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">dna</span><span class=\"p\">:</span>"}, {"id": "14", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">opposite_dna</span><span class=\"p\">)</span>"}, {"id": "7", "content": "    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;G&#39;</span><span class=\"p\">:</span>"}, {"id": "8", "content": "        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;C&#39;</span>"}, {"id": "11", "content": "            <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;G&#39;</span>"}, {"id": "2", "content": "    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span>"}, {"id": "3", "content": "        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;T&#39;</span>"}, {"id": "4", "content": "    <span class=\"k\">else</span><span class=\"p\">:</span>"}, {"id": "10", "content": "        <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">:</span>"}, {"id": "12", "content": "    <span class=\"n\">opposite_dna</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>"}, {"id": "0", "content": "<span class=\"n\">opposite_dna</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">dna</span> <span class=\"o\">=</span> <span class=\"s1\">'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'</span>\n</span></code></pre>"}]}, {"index": 2, "text": "<p>Brilliant! You have mimicked what your own cells are constantly doing.</p>\n<p>An <code>if</code> inside an <code>else</code> can be replaced by a single keyword <code>elif</code>. For example,\nthe previous code can be changed to this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'A'</span><span class=\"p\">:</span>\n    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'T'</span>\n<span class=\"k\">elif</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'T'</span><span class=\"p\">:</span>\n    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'A'</span>\n<span class=\"k\">elif</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'G'</span><span class=\"p\">:</span>\n    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'C'</span>\n<span class=\"k\">elif</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'C'</span><span class=\"p\">:</span>\n    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'G'</span>\n</span></code></pre>", "name": "dna_example_with_elif", "hints": [], "solution": {"tokens": ["dna", " ", "=", " ", "'AGTAGCGTC'", "\n", "opposite_dna", " ", "=", " ", "''", "\n", "for", " ", "char", " ", "in", " ", "dna", ":", "\n", "    ", "if", " ", "char", " ", "==", " ", "'A'", ":", "\n", "        ", "char", " ", "=", " ", "'T'", "\n", "    ", "elif", " ", "char", " ", "==", " ", "'T'", ":", "\n", "        ", "char", " ", "=", " ", "'A'", "\n", "    ", "elif", " ", "char", " ", "==", " ", "'G'", ":", "\n", "        ", "char", " ", "=", " ", "'C'", "\n", "    ", "elif", " ", "char", " ", "==", " ", "'C'", ":", "\n", "        ", "char", " ", "=", " ", "'G'", "\n", "    ", "opposite_dna", " ", "+=", " ", "char", "\n", "\n", "print", "(", "opposite_dna", ")"], "maskedIndices": [10, 2, 45, 98, 24, 4, 97, 77, 14, 79, 43, 70, 73, 92, 66, 60, 36, 63, 62, 6, 28, 29, 53, 46, 34, 83, 99, 41, 94, 68, 16, 51, 80, 87, 100, 12, 22, 39, 0, 75, 19, 8, 32, 26, 85, 58, 49, 56, 90, 18], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Copy the program from the first step on this page, but replace the 4 <code>if</code> blocks there with the\ncombination of <code>if</code> and <code>elif</code> blocks here. In other words, replace each of the last three <code>if</code>s with\n<code>elif</code>, but leave the first <code>if</code> alone.</p>"}]}, {"index": 3, "text": "<p>It's common to have a chain of <code>elif</code> clauses when you want exactly one of many\nbodies to run, like in this case. In general, code like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">X</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">Y</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">Z</span><span class=\"p\">:</span>\n            <span class=\"o\">...</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"o\">...</span>\n</span></code></pre>\n<p>can be rewritten as:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">X</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n<span class=\"k\">elif</span> <span class=\"n\">Y</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n<span class=\"k\">elif</span> <span class=\"n\">Z</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</span></code></pre>\n<p>which is both shorter and saves you from unpleasant nested indentation.\nThe difference is only cosmetic: once the computer runs this code, it can't\ntell the difference between the two versions.</p>\n<p>Note that <code>elif</code>(s) can optionally be followed by one final <code>else</code>. We didn't include one\nin our DNA example, but we could add one to alert us to any unexpected characters\nin the input, or change <code>elif char == 'C':</code> to <code>else:</code> if we were confident\nabout the input being valid.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "OtherComparisonOperators": {"slug": "OtherComparisonOperators", "title": "Other Comparison Operators", "index": 20, "step_names": ["try_not_equals", "brokn_kyboard", "introducing_less_than", "comparing_strings", "grades_example", "min_three_exercise", "final_text"], "steps": [{"index": 0, "text": "<p>The opposite of the equals operator <code>==</code> is the <em>not equals</em> operator <code>!=</code>. If you squint it sort of looks like \u2260. It evaluates to <code>True</code> when two values are...not equal. Try <code>1 != 2</code> for yourself in the shell.</p>", "name": "try_not_equals", "hints": [], "solution": {"tokens": ["1", " ", "!=", " ", "2"], "maskedIndices": [2, 0, 4], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": ["True", "False", "Error"], "answer": "True"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 1, "text": "<p>Here's a cute little program using <code>!=</code>:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s1\">'The e key on my keyboard is broken'</span>\n<span class=\"n\">new_sentence</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n<span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">sentence</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">!=</span> <span class=\"s1\">'e'</span><span class=\"p\">:</span>\n        <span class=\"n\">new_sentence</span> <span class=\"o\">+=</span> <span class=\"n\">c</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_sentence</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "brokn_kyboard", "hints": [], "solution": {"tokens": ["sentence", " ", "=", " ", "'The e key on my keyboard is broken'", "\n", "new_sentence", " ", "=", " ", "''", "\n", "for", " ", "c", " ", "in", " ", "sentence", ":", "\n", "    ", "if", " ", "c", " ", "!=", " ", "'e'", ":", "\n", "        ", "new_sentence", " ", "+=", " ", "c", "\n", "print", "(", "new_sentence", ")"], "maskedIndices": [6, 19, 12, 10, 2, 36, 8, 39, 4, 18, 26, 32, 28, 14, 41, 38, 22, 34, 24, 29, 40, 0, 16], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>Other handy operators are <code>&lt;</code> (less than) and <code>&gt;</code> (greater than). For example, <code>a &lt; b</code> means \"<code>a</code> is less than <code>b</code>\". Try using one of these in the shell to compare two numbers.</p>", "name": "introducing_less_than", "hints": ["<p>You only need to run one very small, simple line in the shell.</p>", "<p>How would you add two numbers in the shell?</p>", "<p>For example, try <code>123 + 456</code></p>", "<p>For this exercise you have to do basically that, but compare them instead.</p>"], "solution": {"tokens": ["1", " ", "<", " ", "2"], "maskedIndices": [2, 4, 0], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Run any code in the shell using either <code>&lt;</code> or <code>&gt;</code> on two numbers.</p>"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 3, "text": "<p>You can also use these operators to compare strings. If you arrange two strings in alphabetical order, the first one is 'less than' the second. See for yourself.</p>", "name": "comparing_strings", "hints": ["<p>This is almost exactly the same as the previous step, just use strings instead of numbers.</p>", "<p>You only need to run one very small, simple line in the shell.</p>", "<p>You can also do this by running multiple lines in the shell, first defining variables and then comparing them, but you don't need to, this can be done without variables.</p>", "<p>Remember adding two strings in the shell at the beginning of the course?</p>", "<p>For example, we did <code>'hello' + 'world'</code></p>", "<p>For this exercise you have to do basically that, but compare them instead.</p>"], "solution": {"tokens": ["'1'", " ", "<", " ", "'2'"], "maskedIndices": [4, 2, 0], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Run any code in the shell using either <code>&lt;</code> or <code>&gt;</code> on two strings.</p>"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 4, "text": "<p>Here's a practical example of <code>&lt;</code> in action for you to try:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">percentage</span> <span class=\"o\">=</span> <span class=\"mi\">73</span>\n\n<span class=\"k\">if</span> <span class=\"n\">percentage</span> <span class=\"o\">&lt;</span> <span class=\"mi\">40</span><span class=\"p\">:</span>\n    <span class=\"n\">grade</span> <span class=\"o\">=</span> <span class=\"s1\">'F'</span>\n<span class=\"k\">elif</span> <span class=\"n\">percentage</span> <span class=\"o\">&lt;</span> <span class=\"mi\">60</span><span class=\"p\">:</span>\n    <span class=\"n\">grade</span> <span class=\"o\">=</span> <span class=\"s1\">'C'</span>\n<span class=\"k\">elif</span> <span class=\"n\">percentage</span> <span class=\"o\">&lt;</span> <span class=\"mi\">80</span><span class=\"p\">:</span>\n    <span class=\"n\">grade</span> <span class=\"o\">=</span> <span class=\"s1\">'B'</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">grade</span> <span class=\"o\">=</span> <span class=\"s1\">'A'</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">grade</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Recall that <code>elif percentage &lt; 60</code> after <code>if percentage &lt; 40</code> means \"if the percentage wasn't less than 40 and also is less than 60\", so it will pass for all numbers from 40 to 59 inclusive. Similarly a 'B' is for percentages from 60 to 79, and an 'A' is for any number 80 and up.</p>", "name": "grades_example", "hints": [], "solution": {"tokens": ["percentage", " ", "=", " ", "73", "\n", "\n", "if", " ", "percentage", " ", "<", " ", "40", ":", "\n", "    ", "grade", " ", "=", " ", "'F'", "\n", "elif", " ", "percentage", " ", "<", " ", "60", ":", "\n", "    ", "grade", " ", "=", " ", "'C'", "\n", "elif", " ", "percentage", " ", "<", " ", "80", ":", "\n", "    ", "grade", " ", "=", " ", "'B'", "\n", "else", ":", "\n", "    ", "grade", " ", "=", " ", "'A'", "\n", "\n", "print", "(", "grade", ")"], "maskedIndices": [53, 59, 35, 9, 49, 13, 0, 39, 11, 43, 67, 27, 37, 4, 29, 68, 7, 25, 66, 46, 23, 2, 14, 33, 45, 21, 61, 69, 55, 51, 30, 19, 56, 41, 63, 17], "mask": [true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["F", "C", "B", "A", "Error"], "answer": "B"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 5, "text": "<p>Now for an exercise: write a program that takes three variables <code>x1</code>, <code>x2</code>, and <code>x3</code>, and prints the value of the smallest one. So for:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n<span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">x3</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n</span></code></pre>\n<p>it should print <code>10</code>.</p>", "name": "min_three_exercise", "hints": ["<p>Try writing a program which prints the smallest of just <code>x1</code> and <code>x2</code>.</p>", "<p>All you need is a few uses of <code>&lt;</code>, <code>if</code>, and maybe <code>else</code>.</p>"], "solution": {"tokens": ["if", " ", "x1", " ", "<", " ", "x2", ":", "\n", "    ", "if", " ", "x1", " ", "<", " ", "x3", ":", "\n", "        ", "first", " ", "=", " ", "x1", "\n", "    ", "else", ":", "\n", "        ", "first", " ", "=", " ", "x3", "\n", "else", ":", "\n", "    ", "if", " ", "x2", " ", "<", " ", "x3", ":", "\n", "        ", "first", " ", "=", " ", "x2", "\n", "    ", "else", ":", "\n", "        ", "first", " ", "=", " ", "x3", "\n", "print", "(", "first", ")"], "maskedIndices": [0, 17, 20, 68, 24, 27, 38, 51, 16, 10, 48, 70, 35, 28, 59, 66, 71, 12, 43, 41, 7, 37, 69, 4, 47, 45, 58, 33, 2, 53, 6, 22, 55, 31, 62, 14, 64], "mask": [true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true], "lines": [{"id": "8", "content": "    <span class=\"k\">else</span><span class=\"p\">:</span>"}, {"id": "10", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">)</span>"}, {"id": "3", "content": "    <span class=\"k\">else</span><span class=\"p\">:</span>"}, {"id": "4", "content": "        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">x3</span>"}, {"id": "5", "content": "<span class=\"k\">else</span><span class=\"p\">:</span>"}, {"id": "9", "content": "        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">x3</span>"}, {"id": "6", "content": "    <span class=\"k\">if</span> <span class=\"n\">x2</span> <span class=\"o\">&lt;</span> <span class=\"n\">x3</span><span class=\"p\">:</span>"}, {"id": "2", "content": "        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">x1</span>"}, {"id": "1", "content": "    <span class=\"k\">if</span> <span class=\"n\">x1</span> <span class=\"o\">&lt;</span> <span class=\"n\">x3</span><span class=\"p\">:</span>"}, {"id": "7", "content": "        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">x2</span>"}, {"id": "0", "content": "<span class=\"k\">if</span> <span class=\"n\">x1</span> <span class=\"o\">&lt;</span> <span class=\"n\">x2</span><span class=\"p\">:</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">x3</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</span></code></pre>"}]}, {"index": 6, "text": "<p>Marvelous!</p>\n<p>There are many ways this could be solved. Here's one solution:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">x1</span> <span class=\"o\">&lt;</span> <span class=\"n\">x2</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">x1</span> <span class=\"o\">&lt;</span> <span class=\"n\">x3</span><span class=\"p\">:</span>\n        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">x1</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">x3</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">x2</span> <span class=\"o\">&lt;</span> <span class=\"n\">x3</span><span class=\"p\">:</span>\n        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">x2</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">x3</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Here's another:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">x1</span>\n\n<span class=\"k\">if</span> <span class=\"n\">x2</span> <span class=\"o\">&lt;</span> <span class=\"n\">first</span><span class=\"p\">:</span>\n    <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">x2</span>\n\n<span class=\"k\">if</span> <span class=\"n\">x3</span> <span class=\"o\">&lt;</span> <span class=\"n\">first</span><span class=\"p\">:</span>\n    <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">x3</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>These programs (and yours too) all work equally well with numbers and strings. So for:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"s1\">'Charlie'</span>\n<span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"s1\">'Alice'</span>\n<span class=\"n\">x3</span> <span class=\"o\">=</span> <span class=\"s1\">'Bob'</span>\n</span></code></pre>\n<p>they will print <code>Alice</code> because that's the first string alphabetically.</p>\n<p><code>&lt;</code> and <code>&gt;</code> evaluate to False if the compared values are equal. For example,\n3 is not less than 3, so <code>3 &lt; 3</code> and <code>3 &gt; 3</code> are both False.\nTo allow equal values, use <code>&lt;=</code> and <code>&gt;=</code>.\nAgain, if you squint, they look a bit like \u2264 and \u2265.\nNote that the <code>=</code> comes second - there are no such operators as <code>=&lt;</code> or <code>=&gt;</code>.\nTo remember this, read them out loud as \"less than or equal to\"\nand \"greater than or equal to\".</p>\n<p>In summary, the main comparison operators are <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, and <code>&gt;=</code>.\nIf you ever have doubts about what they do, play with them in the shell!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingLists": {"slug": "IntroducingLists", "title": "Introducing Lists", "index": 21, "step_names": ["first_list", "can_contain_anything", "numbers_sum", "strings_sum", "strings_sum_bonus", "final_text"], "steps": [{"index": 0, "text": "<p>It's time to learn about a powerful new type of value called <em>lists</em>. Here's an example:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">words</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "first_list", "hints": [], "solution": {"tokens": ["words", " ", "=", " ", "[", "'This'", ",", " ", "'is'", ",", " ", "'a'", ",", " ", "'list'", "]", "\n", "\n", "for", " ", "word", " ", "in", " ", "words", ":", "\n", "    ", "print", "(", "word", ")"], "maskedIndices": [24, 8, 4, 29, 5, 2, 25, 9, 30, 22, 31, 28, 11, 6, 14, 18, 12, 15, 20, 0], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>A list is a <em>sequence</em> (an ordered collection/container) of any number of values.\nThe values are often referred to as <em>elements</em>.\nThey can be anything: numbers, strings, booleans, even lists! They can also be a mixture of types.</p>\n<p>To create a list directly, like above:</p>\n<ol>\n<li>Write some square brackets: <code>[]</code></li>\n<li>If you don't want an empty list, write some expressions inside to be the elements.</li>\n<li>Put commas (<code>,</code>) between elements to separate them.</li>\n</ol>\n<p>Here's another example of making a list:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">things</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Hello'</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">things</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "can_contain_anything", "hints": [], "solution": {"tokens": ["x", " ", "=", " ", "1", "\n", "things", " ", "=", " ", "[", "'Hello'", ",", " ", "x", ",", " ", "x", " ", "+", " ", "3", "]", "\n", "print", "(", "things", ")"], "maskedIndices": [26, 0, 27, 25, 14, 15, 12, 10, 2, 6, 24, 22, 4, 21, 8, 19, 11, 17], "mask": [true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>As you saw above, lists are <em>iterable</em>, meaning you can iterate over them with a <code>for loop</code>.\nHere's a program that adds up all the numbers in a list:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n\n<span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n    <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">number</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "numbers_sum", "hints": [], "solution": {"tokens": ["numbers", " ", "=", " ", "[", "3", ",", " ", "1", ",", " ", "4", ",", " ", "1", ",", " ", "5", ",", " ", "9", "]", "\n", "\n", "total", " ", "=", " ", "0", "\n", "for", " ", "number", " ", "in", " ", "numbers", ":", "\n", "    ", "total", " ", "+=", " ", "number", "\n", "\n", "print", "(", "total", ")"], "maskedIndices": [5, 40, 15, 50, 21, 6, 24, 37, 26, 2, 14, 12, 32, 17, 42, 9, 34, 28, 11, 30, 47, 44, 20, 49, 8, 4, 36, 0, 18, 48], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>Now modify the program so that it can add up a list of strings instead of numbers.\nFor example, given:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>it should print:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">Thisisalist</span>\n</span></code></pre>", "name": "strings_sum", "hints": ["<p>This is very similar to the exercises you've done building up strings character by character.</p>", "<p>The solution is very similar to the program that adds numbers.</p>", "<p>In fact, what happens if you try running that program with a list of strings?</p>", "<p>The problem is that 0. You can't add 0 to a string because numbers and strings are incompatible.</p>", "<p>Is there a similar concept among strings to 0? A blank initial value?</p>"], "solution": {"tokens": ["total", " ", "=", " ", "''", "\n", "for", " ", "word", " ", "in", " ", "words", ":", "\n", "    ", "total", " ", "+=", " ", "word", "\n", "\n", "print", "(", "total", ")"], "maskedIndices": [6, 8, 24, 16, 10, 2, 4, 0, 23, 20, 12, 26, 25, 13, 18], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n</span></code></pre>"}]}, {"index": 4, "text": "<p>Excellent!</p>\n<p>If you'd like, you can just continue to the <a href=\"#BuildingNewLists\">next page</a> now.</p>\n<p>For an optional bonus challenge: extend the program to insert a separator string <em>between</em> each word.\nFor example, given</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n<span class=\"n\">separator</span> <span class=\"o\">=</span> <span class=\"s1\">' - '</span>\n</span></code></pre>\n<p>it would output:</p>\n<pre><code>This - is - a - list\n</code></pre>", "name": "strings_sum_bonus", "hints": ["<p>This is similar to the previous exercise. You can start with your solution from that.</p>", "<p>This exercise doesn't require anything fancy and the final solution can be quite simple. But it's tricky to get it right and you need to think about the approach carefully.</p>", "<p>In each iteration, in addition to a word in the list, you also have to add the separator.</p>", "<p>But you don't want to add the separator after adding the last word in the list.</p>", "<p>Unfortunately there is no \"subtraction\" with strings; you can't add the last separator then remove it.</p>", "<p>Let's back up. The final result should contain each word, and <code>n - 1</code> separators, where <code>n</code> is the number of words.</p>", "<p>So you want to add a separator in every iteration except one.</p>", "<p>You can skip adding the separator in one particular iteration using an <code>if</code> statement.</p>", "<p>Later on you will learn a way to iterate over a list and check if you're in the last iteration, but right now you have no way of doing that.</p>", "<p>However, the iteration you skip doesn't have to be the last one!</p>", "<p>You <em>can</em> write a program that checks if you're in the <em>first</em> iteration of a loop.</p>", "<p>Just make a boolean variable to keep track of this. No need for any comparison operators or numbers.</p>", "<p>We looked at programs that did something like this <a href=\"#UnderstandingProgramsWithSnoop\">here</a>.</p>", "<p>So if you only skip adding the separator in the first iteration, you will have <code>n - 1</code> separators. Now you just need to think carefully about how to make sure the separators are in the right place.</p>", "<p>Forgetting the loop for a moment, you need to add the following to the string in this order: the first word, the separator, the second word, the separator, the third word, etc.</p>", "<p>That means that in the first iteration, you just add the first word. In the second iteration, you add the separator, then the second word. In the third iteration, you add the separator, then the third word. And so on.</p>", "<p>So inside your loop, add the separator first, add the word after.</p>", "<p>Skip adding the separator in the first iteration by checking a boolean variable.</p>", "<p>Create the boolean variable before the loop, then change it inside the loop.</p>", "<p>Only change it in the loop after checking it, or you won't be able to skip the first iteration.</p>"], "solution": {"tokens": ["total", " ", "=", " ", "''", "\n", "not_first", " ", "=", " ", "False", "\n", "\n", "for", " ", "word", " ", "in", " ", "words", ":", "\n", "    ", "if", " ", "not_first", ":", "\n", "        ", "total", " ", "+=", " ", "separator", "\n", "    ", "total", " ", "+=", " ", "word", "\n", "    ", "not_first", " ", "=", " ", "True", "\n", "\n", "print", "(", "total", ")"], "maskedIndices": [26, 51, 43, 20, 6, 38, 0, 4, 25, 17, 31, 50, 8, 29, 2, 23, 47, 10, 15, 53, 19, 33, 36, 13, 52, 40, 45], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": [{"id": "7", "content": "    <span class=\"n\">not_first</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>"}, {"id": "9", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">)</span>"}, {"id": "0", "content": "<span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>"}, {"id": "4", "content": "    <span class=\"k\">if</span> <span class=\"n\">not_first</span><span class=\"p\">:</span>"}, {"id": "5", "content": "        <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">separator</span>"}, {"id": "6", "content": "    <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">word</span>"}, {"id": "3", "content": "<span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">words</span><span class=\"p\">:</span>"}, {"id": "1", "content": "<span class=\"n\">not_first</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n<span class=\"n\">separator</span> <span class=\"o\">=</span> <span class=\"s1\">' - '</span>\n</span></code></pre>"}]}, {"index": 5, "text": "<p>Congratulations! That was very tricky! One solution looks like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n<span class=\"n\">separator</span> <span class=\"o\">=</span> <span class=\"s1\">' - '</span>\n<span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n<span class=\"n\">not_first</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">words</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">not_first</span><span class=\"p\">:</span>\n        <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">separator</span>\n    <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">word</span>\n    <span class=\"n\">not_first</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "BuildingNewLists": {"slug": "BuildingNewLists", "title": "Building New Lists", "index": 22, "step_names": ["double_numbers", "filter_numbers", "final_text"], "steps": [{"index": 0, "text": "<p>Lists and strings have a lot in common.\nFor example, you can add two lists to combine them together into a new list.\nYou can also create an empty list that has no elements.\nCheck for yourself:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n<span class=\"n\">new_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">new_numbers</span> <span class=\"o\">+=</span> <span class=\"n\">numbers</span>\n<span class=\"n\">new_numbers</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_numbers</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>With that knowledge, write a program which takes a list of numbers\nand prints a list where each number has been doubled. For example, given:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>it would print:</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n</span></code></pre>", "name": "double_numbers", "hints": ["<p>Remember that you can multiply numbers using <code>*</code>.</p>", "<p>This program is structurally very similar to the programs you've written to build up strings character by character.</p>", "<p>Make a new list, and then build it up element by element in a for loop.</p>", "<p>Start with an empty list.</p>", "<p>You can make a list with one element <code>x</code> by just writing <code>[x]</code>.</p>", "<p>You can add an element to a list by adding a list containing one element.</p>"], "solution": {"tokens": ["double", " ", "=", " ", "[", "]", "\n", "for", " ", "number", " ", "in", " ", "numbers", ":", "\n", "    ", "double", " ", "+=", " ", "[", "number", " ", "*", " ", "2", "]", "\n", "print", "(", "double", ")"], "maskedIndices": [26, 29, 7, 21, 24, 11, 9, 2, 13, 0, 32, 5, 30, 14, 31, 17, 22, 4, 27, 19], "mask": [true, false, true, false, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</span></code></pre>"}]}, {"index": 1, "text": "<p>Great!</p>\n<p>When you want to add a single element to the end of a list, instead of:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">some_list</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">element</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>it's actually more common to write:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">some_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>There isn't really a big difference between these, but <code>.append</code>\nwill be more familiar and readable to most people.</p>\n<p>Now use <code>.append</code> to write a program which takes a list of numbers and\nprints a new list containing only the numbers bigger than 5.</p>\n<p>For example, given:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>it would print:</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</span></code></pre>", "name": "filter_numbers", "hints": ["<p>This is very similar to the previous exercise.</p>", "<p>The difference is that sometimes you should skip appending to the new list.</p>", "<p>Use an <code>if</code> statement.</p>", "<p>Use a comparison operator to test if a number is big enough to add.</p>"], "solution": {"tokens": ["big_numbers", " ", "=", " ", "[", "]", "\n", "for", " ", "number", " ", "in", " ", "numbers", ":", "\n", "    ", "if", " ", "number", " ", ">", " ", "5", ":", "\n", "        ", "big_numbers", ".", "append", "(", "number", ")", "\n", "print", "(", "big_numbers", ")"], "maskedIndices": [9, 13, 27, 37, 11, 7, 29, 35, 21, 36, 0, 34, 19, 4, 32, 30, 31, 23, 14, 17, 24, 28, 2, 5], "mask": [true, false, true, false, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true], "lines": [{"id": "3", "content": "        <span class=\"n\">big_numbers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>"}, {"id": "0", "content": "<span class=\"n\">big_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>"}, {"id": "4", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">big_numbers</span><span class=\"p\">)</span>"}, {"id": "1", "content": "<span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>"}, {"id": "2", "content": "    <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span><span class=\"p\">:</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</span></code></pre>"}]}, {"index": 2, "text": "<p>Fantastic! We're making great progress.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "UsingBreak": {"slug": "UsingBreak", "title": "Using <code>break</code> to end a loop early", "index": 23, "step_names": ["list_contains_exercise", "final_text"], "steps": [{"index": 0, "text": "<p>Exercise: write a program which takes a list and a value and checks\nif the list contains the value. For example, given:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">things</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n<span class=\"n\">thing_to_find</span> <span class=\"o\">=</span> <span class=\"s1\">'is'</span>\n</span></code></pre>\n<p>it should print <code>True</code>, but for</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">thing_to_find</span> <span class=\"o\">=</span> <span class=\"s1\">'other'</span>\n</span></code></pre>\n<p>it should print <code>False</code>.</p>", "name": "list_contains_exercise", "hints": ["<p>You will need a loop.</p>", "<p>You will need an <code>if</code> statement.</p>", "<p>You will need a comparison operator.</p>", "<p>Specifically <code>==</code>.</p>", "<p>You need a boolean variable that you print at the end.</p>", "<p>If you find the element in the list you should set that variable to <code>True</code>.</p>", "<p>Once you've found the element, you can't unfind it.</p>", "<p>That means that once you set the variable to <code>True</code>, it should never be set to anything else after that.</p>", "<p>Don't use an <code>else</code>.</p>", "<p>There is no reason to ever set the variable to <code>False</code> inside the loop.</p>"], "solution": {"tokens": ["found", " ", "=", " ", "False", "\n", "for", " ", "thing", " ", "in", " ", "things", ":", "\n", "    ", "if", " ", "thing", " ", "==", " ", "thing_to_find", ":", "\n", "        ", "found", " ", "=", " ", "True", "\n", "\n", "print", "(", "found", ")"], "maskedIndices": [10, 18, 26, 22, 16, 34, 2, 6, 35, 12, 4, 8, 36, 30, 20, 28, 13, 23, 0, 33], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": [{"id": "3", "content": "        <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>"}, {"id": "2", "content": "    <span class=\"k\">if</span> <span class=\"n\">thing</span> <span class=\"o\">==</span> <span class=\"n\">thing_to_find</span><span class=\"p\">:</span>"}, {"id": "5", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">found</span><span class=\"p\">)</span>"}, {"id": "1", "content": "<span class=\"k\">for</span> <span class=\"n\">thing</span> <span class=\"ow\">in</span> <span class=\"n\">things</span><span class=\"p\">:</span>"}, {"id": "0", "content": "<span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">things</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n<span class=\"n\">thing_to_find</span> <span class=\"o\">=</span> <span class=\"s1\">'is'</span>\n</span></code></pre>"}]}, {"index": 1, "text": "<p>Nice!</p>\n<p>A typical solution looks something like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"k\">for</span> <span class=\"n\">thing</span> <span class=\"ow\">in</span> <span class=\"n\">things</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">thing</span> <span class=\"o\">==</span> <span class=\"n\">thing_to_find</span><span class=\"p\">:</span>\n        <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">found</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Your solution is probably similar. It's fine, but it's a bit inefficient.\nThat's because it'll loop over the entire list even if it finds the element at the beginning.\nYou can stop any loop using a <code>break</code> statement, like so:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">for</span> <span class=\"n\">thing</span> <span class=\"ow\">in</span> <span class=\"n\">things</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">thing</span> <span class=\"o\">==</span> <span class=\"n\">thing_to_find</span><span class=\"p\">:</span>\n        <span class=\"n\">found</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">break</span>\n</span></code></pre>\n<p>This is just as correct but skips unnecessary iterations and checks once it finds the element.\nYou can use <code>snoop</code> to see the difference.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "GettingElementsAtPosition": {"slug": "GettingElementsAtPosition", "title": "Getting elements at a position, <code>range()</code>, and <code>len()</code>", "index": 24, "step_names": ["introducing_subscripting", "index_error", "introducing_len_and_range", "range_len", "printing_the_range", "indices_out_of_bounds", "range_almost_the_same_as_list", "range_versus_list", "using_len_first_time", "print_last_element", "print_indices_and_words", "final_text"], "steps": [{"index": 0, "text": "<p>Looping is great, but often you just want to retrieve a single element from the list at a known position.\nHere's how:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n</span></code></pre>", "name": "introducing_subscripting", "hints": [], "solution": {"tokens": ["words", " ", "=", " ", "[", "'This'", ",", " ", "'is'", ",", " ", "'a'", ",", " ", "'list'", "]", "\n", "\n", "print", "(", "words", "[", "0", "]", ")", "\n", "print", "(", "words", "[", "1", "]", ")", "\n", "print", "(", "words", "[", "2", "]", ")", "\n", "print", "(", "words", "[", "3", "]", ")"], "maskedIndices": [44, 5, 43, 23, 29, 32, 21, 48, 37, 14, 39, 11, 26, 30, 19, 24, 4, 2, 35, 36, 28, 0, 8, 47, 20, 27, 46, 38, 18, 22, 9, 6, 40, 15, 45, 42, 31, 12, 34], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>In general, you can get the element at the position <code>i</code> with <code>words[i]</code>. The operation is called <em>subscripting</em> or <em>indexing</em>, and the position is called the <em>index</em>.</p>\n<p>You've probably noticed that the first index is 0, not 1. In programming, counting starts at 0. It seems weird, but that's how most programming languages do it, and it's generally agreed to be better.</p>\n<p>This also means that the last index in this list of 4 elements is 3. What happens if you try getting an index greater than that?</p>", "name": "index_error", "hints": [], "solution": {"tokens": ["words", "[", "4", "]"], "maskedIndices": [0, 1, 3, 2], "mask": [true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Run something like <code>words[3]</code> but replace <code>3</code> with a bigger number.</p>"}]}, {"index": 2, "text": "<p>There you go. <code>words[4]</code> and beyond don't exist, so trying that will give you an error.\nThat first program is a bit repetitive. Let's improve it with a list and a loop!</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">indices</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>\n</span></code></pre>", "name": "introducing_len_and_range", "hints": [], "solution": {"tokens": ["words", " ", "=", " ", "[", "'This'", ",", " ", "'is'", ",", " ", "'a'", ",", " ", "'list'", "]", "\n", "indices", " ", "=", " ", "[", "0", ",", " ", "1", ",", " ", "2", ",", " ", "3", "]", "\n", "\n", "for", " ", "index", " ", "in", " ", "indices", ":", "\n", "    ", "print", "(", "index", ")", "\n", "    ", "print", "(", "words", "[", "index", "]", ")"], "maskedIndices": [31, 56, 0, 29, 42, 21, 37, 23, 4, 22, 39, 53, 41, 51, 54, 9, 45, 2, 52, 48, 57, 55, 25, 46, 6, 28, 15, 5, 19, 17, 47, 26, 8, 35, 11, 14, 32, 12], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": ["This\nis\na\nlist", "0\n1\n2\n3", "0\nThis\n1\nis\n2\na\n3\nlist", "This\n0\nis\n1\na\n2\nlist\n3", "0\n1\n2\n3\nThis\nis\na\nlist", "This\nis\na\nlist\n0\n1\n2\n3", "Error"], "answer": "0\nThis\n1\nis\n2\na\n3\nlist"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>That's a bit better, but writing out <code>[0, 1, 2, ...]</code> isn't great, especially if it gets long.\nThere's a handy function <code>range</code> to do that part for you. Replace <code>[0, 1, 2, 3]</code> with <code>range(4)</code>,\ni.e. <code>indices = range(4)</code>.</p>", "name": "range_len", "hints": [], "solution": {"tokens": ["words", " ", "=", " ", "[", "'This'", ",", " ", "'is'", ",", " ", "'a'", ",", " ", "'list'", "]", "\n", "indices", " ", "=", " ", "range", "(", "4", ")", "\n", "\n", "for", " ", "index", " ", "in", " ", "indices", ":", "\n", "    ", "print", "(", "index", ")", "\n", "    ", "print", "(", "words", "[", "index", "]", ")"], "maskedIndices": [45, 46, 5, 6, 44, 11, 39, 29, 40, 21, 0, 22, 49, 14, 33, 48, 19, 15, 4, 8, 9, 2, 37, 24, 43, 31, 34, 17, 38, 27, 23, 47, 12], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same program from the previous step, but replace the second line <code>indices = [0, 1, 2, 3]</code> with <code>indices = range(4)</code>.</p>"}]}, {"index": 4, "text": "<p>As you can see, the result is the same. Try this:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "printing_the_range", "hints": [], "solution": {"tokens": ["indices", " ", "=", " ", "range", "(", "4", ")", "\n", "\n", "print", "(", "indices", "[", "0", "]", ")", "\n", "print", "(", "indices", "[", "1", "]", ")", "\n", "print", "(", "indices", "[", "2", "]", ")", "\n", "print", "(", "indices", "[", "3", "]", ")"], "maskedIndices": [10, 32, 36, 12, 0, 18, 7, 40, 20, 29, 15, 22, 4, 2, 11, 26, 35, 30, 37, 13, 27, 16, 5, 34, 39, 24, 38, 21, 23, 6, 14, 31, 19, 28], "mask": [true, false, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": ["0\n1\n2\n3", "1\n2\n3\n4", "[0]\n[1]\n[2]\n[3]", "[1]\n[2]\n[3]\n[4]", "This\nis\na\nlist", "Error"], "answer": "0\n1\n2\n3"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 5, "text": "<p>Now try <code>indices[4]</code> in the shell.</p>", "name": "indices_out_of_bounds", "hints": [], "solution": {"tokens": ["indices", "[", "4", "]"], "maskedIndices": [1, 2, 0, 3], "mask": [true, true, true, true], "lines": null}, "prediction": {"choices": ["0", "1", "2", "3", "4", "Error"], "answer": "Error"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 6, "text": "<p><code>range(4)</code> is the same thing as <code>[0, 1, 2, 3]</code> ... almost. Try <code>range(4)</code> in the shell.</p>", "name": "range_almost_the_same_as_list", "hints": [], "solution": {"tokens": ["range", "(", "4", ")"], "maskedIndices": [2, 0, 1, 3], "mask": [true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 7, "text": "<p>That's probably a bit surprising. If you're curious, the <code>0</code> represents the start of the range.\n<code>0</code> is the default start, so <code>range(4)</code> is equal to <code>range(0, 4)</code>.\n<code>4</code> is the end of the range, but the end is always excluded, so the last value is <code>3</code>.\nIf you're confused now, don't worry about it.</p>\n<p>There's a good reason for why <code>range(4)</code> is not actually a list - it makes programs faster and more efficient.\nIt's not worth explaining that more right now.</p>\n<p>But you can easily convert it to a list: try <code>list(range(4))</code> in the shell.</p>", "name": "range_versus_list", "hints": [], "solution": {"tokens": ["list", "(", "range", "(", "4", ")", ")"], "maskedIndices": [3, 6, 1, 2, 5, 4, 0], "mask": [true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": ["range(4)", "range(0, 4)", "list(range(4))", "list(range(0, 4))", "range(0, 1, 2, 3)", "(0, 1, 2, 3)", "[0, 1, 2, 3]", "Error"], "answer": "[0, 1, 2, 3]"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 8, "text": "<p>That's just a demonstration to let you see a range in a more familiar form.\nYou should almost never actually do that.</p>\n<p>If you're feeling overwhelmed, don't worry! All you need to know is that <code>range(n)</code>\nis very similar to the list:</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>By the way, you can get the number of elements in a list (commonly called the <em>length</em>) using the <code>len</code> function.\nTry it by running this code:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">))</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "using_len_first_time", "hints": [], "solution": {"tokens": ["words", " ", "=", " ", "[", "'This'", ",", " ", "'is'", ",", " ", "'a'", ",", " ", "'list'", "]", "\n", "print", "(", "len", "(", "words", ")", ")"], "maskedIndices": [14, 2, 8, 4, 18, 5, 20, 15, 22, 19, 11, 6, 17, 23, 9, 12, 21, 0], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": ["0", "1", "2", "3", "4", "5", "Error"], "answer": "4"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 9, "text": "<p>Exercise: for any non-empty list <code>words</code>, print the last element. For example, if</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>your program should print <code>list</code>.</p>", "name": "print_last_element", "hints": ["<p>To access the last element of the list, you'll need the index of the last position.</p>", "<p>If the list has 2 elements, the first element is at index 0, so the last element is at index 1.</p>", "<p>Likewise, if the list had 3 elements, the last element would be at index 2.</p>", "<p>Do you see a pattern between those numbers? How can you express it?</p>", "<p>Can you come up with a general solution that works for any length?</p>"], "solution": {"tokens": ["print", "(", "words", "[", "len", "(", "words", ")", " ", "-", " ", "1", "]", ")"], "maskedIndices": [2, 0, 1, 13, 5, 9, 3, 7, 6, 12, 4, 11], "mask": [true, true, true, true, true, true, true, true, false, true, false, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Python'</span><span class=\"p\">]</span>\n</span></code></pre>"}]}, {"index": 10, "text": "<p>So in general, the valid indices are:</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>Now we can fix the program from earlier to work with any list. Fill in the <code>...</code>:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'This'</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"o\">...</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>For the given example value of <code>words</code> it should print:</p>\n<pre><code>0\nThis\n1\nis\n2\na\n3\nlist\n</code></pre>", "name": "print_indices_and_words", "hints": ["<p>Remember that earlier we used <code>range(4)</code>.</p>", "<p>This time, it should work for any list. What if the list has 5 elements, or 10?</p>", "<p>Combine the two functions you learned!</p>"], "solution": {"tokens": ["for", " ", "index", " ", "in", " ", "range", "(", "len", "(", "words", ")", ")", ":", "\n", "    ", "print", "(", "index", ")", "\n", "    ", "print", "(", "words", "[", "index", "]", ")"], "maskedIndices": [13, 23, 22, 10, 16, 4, 8, 17, 12, 24, 6, 27, 0, 19, 2, 9, 18, 25, 28, 11, 7, 26], "mask": [true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Python'</span><span class=\"p\">]</span>\n</span></code></pre>"}]}, {"index": 11, "text": "<p>If you're still not quite comfortable with <code>range</code> and/or <code>len</code>, practice and experiment with it for a bit.\nHere are some simple exercises you can try on your own if you want.</p>\n<ul>\n<li>Print the numbers from <code>1</code> to <code>100</code> inclusive.</li>\n<li>Print your name 100 times.</li>\n<li>Print each word in a list <code>words</code> except for the last one.</li>\n<li>Print each word in <code>words</code> in reverse order, i.e. print the last word, then the second last word, etc.</li>\n<li>Revisit the bonus problem at the end of the <a href=\"#IntroducingLists\">Introducing Lists page</a>,\nwhether or not you completed it. It's now much easier with <code>range</code> and <code>len</code>!</li>\n</ul>\n<p>When you're ready, continue to the next page for something a bit more challenging.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "GettingElementsAtPositionExercises": {"slug": "GettingElementsAtPositionExercises", "title": "Exercises with <code>range()</code> and <code>len()</code>", "index": 25, "step_names": ["index_exercise", "zip_exercise", "zip_longest_exercise", "final_text"], "steps": [{"index": 0, "text": "<p>Given a list <code>things</code> and a value <code>to_find</code>,\nprint the first index of <code>to_find</code> in the list, i.e. the lowest number <code>i</code> such that\n<code>things[i]</code> is <code>to_find</code>. For example, for</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">things</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'on'</span><span class=\"p\">,</span> <span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"s1\">'way'</span><span class=\"p\">,</span> <span class=\"s1\">'to'</span><span class=\"p\">,</span> <span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"s1\">'store'</span><span class=\"p\">]</span>\n<span class=\"n\">to_find</span> <span class=\"o\">=</span> <span class=\"s1\">'the'</span>\n</span></code></pre>\n<p>your program should print <code>1</code>.</p>\n<p>You can assume that <code>to_find</code> appears at least once.</p>", "name": "index_exercise", "hints": ["<p>You will need to look at all the possible indices of <code>things</code> and check which one is the answer.</p>", "<p>To look at all possible indices, you will need a loop over <code>range(len(things))</code>.</p>", "<p>To check if an index is the answer, you will need to use:</p>", "<ul>\n<li><code>if</code></li>\n</ul>", "<ul>\n<li>the index in a subscript</li>\n</ul>", "<ul>\n<li><code>==</code></li>\n</ul>", "<p>Since you're looking for the first index, you need to stop the loop once you find one.</p>", "<p>You learned how to stop a loop in the middle recently.</p>", "<p>You need to use <code>break</code>.</p>"], "solution": {"tokens": ["for", " ", "i", " ", "in", " ", "range", "(", "len", "(", "things", ")", ")", ":", "\n", "    ", "if", " ", "to_find", " ", "==", " ", "things", "[", "i", "]", ":", "\n", "        ", "print", "(", "i", ")", "\n", "        ", "break"], "maskedIndices": [6, 20, 31, 11, 25, 29, 26, 23, 32, 24, 2, 8, 7, 35, 10, 18, 30, 13, 9, 12, 22, 4, 16, 0], "mask": [true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">things</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'on'</span><span class=\"p\">,</span> <span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"s1\">'way'</span><span class=\"p\">,</span> <span class=\"s1\">'to'</span><span class=\"p\">,</span> <span class=\"s1\">'the'</span><span class=\"p\">,</span> <span class=\"s1\">'store'</span><span class=\"p\">]</span>\n<span class=\"n\">to_find</span> <span class=\"o\">=</span> <span class=\"s1\">'the'</span>\n</span></code></pre>"}]}, {"index": 1, "text": "<p>Nice!</p>\n<p>By the way, indexing and <code>len()</code> also work on strings. Try them out in the shell.</p>\n<p>Here's another exercise. Given two strings of equal length, e.g:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">string1</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello'</span>\n<span class=\"n\">string2</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>\n<p>print them vertically side by side, with a space between each character:</p>\n<pre><code>H W\ne o\nl r\nl l\no d\n</code></pre>", "name": "zip_exercise", "hints": ["<p>Did you experiment with indexing and <code>len()</code> with strings in the shell?</p>", "<p>Forget loops for a moment. How would you print just the first line, which has the first character of each of the two strings?</p>", "<p>In the second line you want to print the second character of each string, and so on.</p>", "<p>You will need a <code>for</code> loop.</p>", "<p>You will need indexing (subscripting).</p>", "<p>You will need <code>range</code>.</p>", "<p>You will need <code>len</code>.</p>", "<p>You will need <code>+</code>.</p>", "<p>You will need to index both strings.</p>", "<p>You will need to pass the same index to both strings each time to retrieve matching characters.</p>"], "solution": {"tokens": ["for", " ", "i", " ", "in", " ", "range", "(", "len", "(", "string1", ")", ")", ":", "\n", "    ", "char1", " ", "=", " ", "string1", "[", "i", "]", "\n", "    ", "char2", " ", "=", " ", "string2", "[", "i", "]", "\n", "    ", "print", "(", "char1", " ", "+", " ", "' '", " ", "+", " ", "char2", ")"], "maskedIndices": [18, 13, 8, 6, 22, 9, 16, 30, 4, 2, 20, 33, 37, 10, 26, 23, 21, 12, 31, 44, 7, 42, 0, 32, 46, 47, 28, 40, 11, 38, 36], "mask": [true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">string1</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello'</span>\n<span class=\"n\">string2</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>"}]}, {"index": 2, "text": "<p>Incredible!</p>\n<p>Your solution probably looks something like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">string1</span><span class=\"p\">)):</span>\n    <span class=\"n\">char1</span> <span class=\"o\">=</span> <span class=\"n\">string1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"n\">char2</span> <span class=\"o\">=</span> <span class=\"n\">string2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">char1</span> <span class=\"o\">+</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"n\">char2</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>This doesn't work so well if the strings have different lengths.\nIn fact, it goes wrong in different ways depending on whether <code>string1</code> or <code>string2</code> is longer.\nYour next challenge is to fix this problem by filling in 'missing' characters with spaces.</p>\n<p>For example, for:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">string1</span> <span class=\"o\">=</span> <span class=\"s1\">'Goodbye'</span>\n<span class=\"n\">string2</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>\n<p>output:</p>\n<pre><code>G W\no o\no r\nd l\nb d\ny\ne\n</code></pre>\n<p>and for:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">string1</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello'</span>\n<span class=\"n\">string2</span> <span class=\"o\">=</span> <span class=\"s1\">'Elizabeth'</span>\n</span></code></pre>\n<p>output:</p>\n<pre><code>H E\ne l\nl i\nl z\no a\n  b\n  e\n  t\n  h\n</code></pre>", "name": "zip_longest_exercise", "hints": ["<p>The solution has the same overall structure and essential elements of the previous solution, but it's significantly longer and will require a few additional ideas and pieces.</p>", "<p>In particular, it should still contain something like:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">char1</span> <span class=\"o\">+</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"n\">char2</span><span class=\"p\">)</span>\n</span></code></pre>", "<p>What should go inside <code>range()</code>? Neither <code>len(string1)</code> nor <code>len(string2)</code> is good enough.</p>", "<p>You want a loop iteration for every character in the longer string.</p>", "<p>That means you need <code>range(&lt;length of the longest string&gt;)</code></p>", "<p>In other words you need to find the biggest of the two values <code>len(string1)</code> and <code>len(string2)</code>. You've already done an exercise like that.</p>", "<p>Once you've sorted out <code>for i in range(...)</code>, <code>i</code> will sometimes be too big to be a valid index for both strings. You will need to check if it's too big before indexing.</p>", "<p>Remember, the biggest valid index for <code>string1</code> is <code>len(string1) - 1</code>. <code>len(string1)</code> is too big.</p>", "<p>You will need two <code>if</code> statements, one for each string.</p>", "<p>You will need to set e.g. <code>char1 = ' '</code> when <code>string1[i]</code> is not valid.</p>"], "solution": {"tokens": ["length1", " ", "=", " ", "len", "(", "string1", ")", "\n", "length2", " ", "=", " ", "len", "(", "string2", ")", "\n", "\n", "if", " ", "length1", " ", ">", " ", "length2", ":", "\n", "    ", "length", " ", "=", " ", "length1", "\n", "else", ":", "\n", "    ", "length", " ", "=", " ", "length2", "\n", "\n", "for", " ", "i", " ", "in", " ", "range", "(", "length", ")", ":", "\n", "    ", "if", " ", "i", " ", "<", " ", "len", "(", "string1", ")", ":", "\n", "        ", "char1", " ", "=", " ", "string1", "[", "i", "]", "\n", "    ", "else", ":", "\n", "        ", "char1", " ", "=", " ", "' '", "\n", "\n", "    ", "if", " ", "i", " ", "<", " ", "len", "(", "string2", ")", ":", "\n", "        ", "char2", " ", "=", " ", "string2", "[", "i", "]", "\n", "    ", "else", ":", "\n", "        ", "char2", " ", "=", " ", "' '", "\n", "\n", "    ", "print", "(", "char1", " ", "+", " ", "' '", " ", "+", " ", "char2", ")"], "maskedIndices": [117, 72, 33, 131, 15, 31, 13, 113, 2, 61, 82, 26, 118, 0, 19, 7, 16, 14, 23, 79, 123, 133, 94, 55, 104, 53, 137, 43, 54, 103, 129, 9, 48, 69, 76, 121, 50, 21, 63, 98, 112, 101, 29, 139, 39, 102, 90, 56, 86, 35, 111, 78, 6, 67, 52, 96, 100, 74, 65, 88, 59, 83, 107, 41, 11, 77, 46, 140, 4, 25, 135, 130, 125, 66, 68, 109, 114, 36, 5], "mask": [true, false, true, false, true, true, true, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true], "lines": [{"id": "16", "content": "    <span class=\"k\">else</span><span class=\"p\">:</span>"}, {"id": "10", "content": "        <span class=\"n\">char1</span> <span class=\"o\">=</span> <span class=\"n\">string1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>"}, {"id": "15", "content": "        <span class=\"n\">char2</span> <span class=\"o\">=</span> <span class=\"n\">string2</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>"}, {"id": "6", "content": "    <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">length2</span>"}, {"id": "3", "content": "<span class=\"k\">if</span> <span class=\"n\">length1</span> <span class=\"o\">&gt;</span> <span class=\"n\">length2</span><span class=\"p\">:</span>"}, {"id": "17", "content": "        <span class=\"n\">char2</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; &#39;</span>"}, {"id": "11", "content": "    <span class=\"k\">else</span><span class=\"p\">:</span>"}, {"id": "19", "content": "    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">char1</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"n\">char2</span><span class=\"p\">)</span>"}, {"id": "4", "content": "    <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">length1</span>"}, {"id": "5", "content": "<span class=\"k\">else</span><span class=\"p\">:</span>"}, {"id": "0", "content": "<span class=\"n\">length1</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">string1</span><span class=\"p\">)</span>"}, {"id": "12", "content": "        <span class=\"n\">char1</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; &#39;</span>"}, {"id": "14", "content": "    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">string2</span><span class=\"p\">):</span>"}, {"id": "8", "content": "<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">):</span>"}, {"id": "9", "content": "    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">string1</span><span class=\"p\">):</span>"}, {"id": "1", "content": "<span class=\"n\">length2</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">string2</span><span class=\"p\">)</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">string1</span> <span class=\"o\">=</span> <span class=\"s1\">'Goodbye'</span>\n<span class=\"n\">string2</span> <span class=\"o\">=</span> <span class=\"s1\">'World'</span>\n</span></code></pre>"}]}, {"index": 3, "text": "<p>Magnificent! Take a break, you've earned it!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "CallingFunctionsTerminology": {"slug": "CallingFunctionsTerminology", "title": "Terminology: Calling functions and methods", "index": 26, "step_names": ["print_functions", "introducing_callable", "not_callable", "print_returns_none", "len_of_none", "methods_of_str", "no_append_for_str", "final_text"], "steps": [{"index": 0, "text": "<p>It's time to expand your vocabulary some more.</p>\n<p><code>print</code> and <code>len</code> are <strong><em>functions</em></strong>. See for yourself:</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "print_functions", "hints": [], "solution": {"tokens": ["print", "(", "len", ")", "\n", "print", "(", "print", ")"], "maskedIndices": [6, 2, 5, 0, 7, 3, 1, 8], "mask": [true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>An expression like <code>len(things)</code> or <code>print(things)</code> is a function <strong><em>call</em></strong> - when you write that, you are <strong><em>calling</em></strong> the function <code>len</code> or <code>print</code>. The fact that this is possible means that functions are <strong><em>callable</em></strong>:</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">))</span>\n</span></code></pre>", "name": "introducing_callable", "hints": [], "solution": {"tokens": ["print", "(", "callable", "(", "len", ")", ")"], "maskedIndices": [5, 6, 4, 2, 0, 1, 3], "mask": [true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>Most things are not callable, so trying to call them will give you an error:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"s1\">'a string'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">))</span>\n<span class=\"n\">f</span><span class=\"p\">()</span>\n</span></code></pre>", "name": "not_callable", "hints": [], "solution": {"tokens": ["f", " ", "=", " ", "'a string'", "\n", "print", "(", "callable", "(", "f", ")", ")", "\n", "f", "(", ")"], "maskedIndices": [16, 8, 14, 9, 4, 6, 0, 7, 12, 15, 2, 10, 11], "mask": [true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>In the call <code>len(things)</code>, <code>things</code> is an <strong><em>argument</em></strong>. Sometimes you will also see the word <strong><em>parameter</em></strong>, which means basically the same thing as argument. It's a bit like you're giving the argument to the function - specifically we say that the argument <code>things</code> is <em>passed</em> to <code>len</code>, and <code>len</code> <em>accepts</em> or <em>receives</em> the argument.</p>\n<p><code>len(things)</code> will evaluate to a number such as 3, in which case we say that <code>len</code> <strong><em>returned</em></strong> 3.</p>\n<p>All calls have to return something...even if it's nothing. For example, <code>print</code>'s job is to display something on screen, not to return a useful value. So it returns something useless instead:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">things</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">things</span><span class=\"p\">)</span>\n<span class=\"n\">printed</span> <span class=\"o\">=</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">printed</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "print_returns_none", "hints": [], "solution": {"tokens": ["things", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "3", "]", "\n", "length", " ", "=", " ", "len", "(", "things", ")", "\n", "printed", " ", "=", " ", "print", "(", "length", ")", "\n", "print", "(", "printed", ")"], "maskedIndices": [16, 0, 23, 2, 20, 8, 25, 30, 18, 12, 27, 29, 35, 28, 14, 33, 5, 21, 19, 6, 11, 4, 32, 34, 9], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 4, "text": "<p><code>None</code> is a special 'null' value which can't do anything interesting. It's a common placeholder that represents the lack of a real useful value. Functions that don't want to return anything return <code>None</code> by default. If you see an error message about <code>None</code> or <code>NoneType</code>, it often means you assigned the wrong thing to a variable:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">things</span> <span class=\"o\">=</span> <span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">things</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "len_of_none", "hints": [], "solution": {"tokens": ["things", " ", "=", " ", "print", "(", "[", "1", ",", " ", "2", ",", " ", "3", "]", ")", "\n", "length", " ", "=", " ", "len", "(", "things", ")"], "maskedIndices": [6, 14, 0, 21, 10, 24, 11, 19, 8, 23, 4, 7, 13, 17, 15, 5, 2, 22], "mask": [true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 5, "text": "<p>A <strong><em>method</em></strong> is a function which belongs to a type, and can be called on all values of that type using <code>.</code>. For example, <code>upper</code> and <code>lower</code> are methods of strings, which are called with e.g. <code>word.upper()</code>:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span>\n</span></code></pre>", "name": "methods_of_str", "hints": [], "solution": {"tokens": ["word", " ", "=", " ", "'Hello'", "\n", "print", "(", "word", ".", "upper", ")", "\n", "print", "(", "word", ".", "upper", "(", ")", ")"], "maskedIndices": [19, 0, 7, 16, 6, 14, 18, 8, 15, 17, 9, 13, 2, 4, 11, 10, 20], "mask": [true, false, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 6, "text": "<p>Another example is that <code>append</code> is a method of lists. But you can't use <code>.upper</code> on a list or <code>.append</code> on a string:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello'</span>\n<span class=\"n\">word</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'!'</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "no_append_for_str", "hints": [], "solution": {"tokens": ["word", " ", "=", " ", "'Hello'", "\n", "word", ".", "append", "(", "'!'", ")"], "maskedIndices": [4, 6, 10, 7, 2, 8, 0, 9, 11], "mask": [true, false, true, false, true, false, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 7, "text": "<p>The word 'attribute' in the error message refers to the use of <code>.</code> - the error actually comes just from <code>word.append</code>, without even a call.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "FunctionsAndMethodsForLists": {"slug": "FunctionsAndMethodsForLists", "title": "Functions and Methods for Lists", "index": 27, "step_names": ["append_vs_concatenate", "subscript_assignment_predict", "index_predict_exercise", "pop_predict_exercise", "remove_predict_exercise", "pop_remove_index_subscript_assignment", "subscript_assignment_exercise", "negative_index_concatenation_exercise", "remove_exercise", "final_text"], "steps": [{"index": 0, "text": "<p>Let's review how to work with lists. Suppose we have a list <code>nums = [1, 2, 3]</code>. You can use:</p>\n<ul>\n<li><strong><code>append</code></strong>: Add an element to the end of the list. <code>nums.append(4)</code> changes the list to <code>[1, 2, 3, 4]</code>.</li>\n<li><strong><code>len</code></strong>: Returns the number of elements. <code>len(nums)</code> is <code>3</code>.</li>\n<li><strong><code>range</code></strong>: <code>range(n)</code> is an object similar to the list of numbers from <code>0</code> to <code>n - 1</code>. That means it contains <code>n</code> numbers. In particular, <code>range(len(nums))</code> is like <code>[0, 1, 2]</code>, which are the indices of every element in <code>nums</code>.</li>\n<li><strong><code>[]</code> (subscripting/indexing)</strong>: Get a value at an index. <code>nums[0]</code> is <code>1</code>, <code>nums[1]</code> is <code>2</code>, <code>nums[2]</code> is <code>3</code>.</li>\n<li><strong><code>+</code></strong>: Concatenates lists. <code>nums + [4, 5]</code> is <code>[1, 2, 3, 4, 5]</code>.</li>\n</ul>\n<p>Note that <code>nums.append(4)</code> modifies the existing list <code>nums</code>, while <code>nums + [4, 5]</code> does not.\nOne way to preserve the value of <code>nums + [4, 5]</code> is to assign it to a <em>new variable</em>.\nRun the following code:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">new_nums</span> <span class=\"o\">=</span> <span class=\"n\">nums</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_nums</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "append_vs_concatenate", "hints": [], "solution": {"tokens": ["nums", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "3", "]", "\n", "new_nums", " ", "=", " ", "nums", " ", "+", " ", "[", "4", ",", " ", "5", "]", "\n", "print", "(", "new_nums", ")", "\n", "print", "(", "nums", ")", "\n", "nums", ".", "append", "(", "4", ")", "\n", "print", "(", "nums", ")"], "maskedIndices": [20, 14, 43, 32, 6, 5, 42, 40, 9, 36, 44, 34, 47, 23, 18, 12, 48, 46, 37, 27, 31, 4, 0, 26, 11, 41, 8, 24, 30, 35, 16, 49, 22, 39, 2, 29], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>As you can see, <code>+</code> does not modify <code>nums</code>, but <code>append</code> does.</p>\n<p>Here's some new things.</p>\n<p><strong><code>subscript assignment</code></strong>: Set a value at an index (replacing the value that was there before) using the syntax</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">some_list</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_value</span>\n</span></code></pre>\n<p>Raises an error if <code>index</code> is not a valid index of <code>some_list</code>. For example, run this program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">nums</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "subscript_assignment_predict", "hints": [], "solution": {"tokens": ["nums", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "3", "]", "\n", "nums", "[", "1", "]", " ", "=", " ", "9", "\n", "print", "(", "nums", ")"], "maskedIndices": [17, 9, 19, 6, 0, 11, 26, 5, 12, 21, 15, 2, 24, 23, 8, 4, 25, 16, 14], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["[9, 1, 2, 3]", "[1, 9, 2, 3]", "[1, 2, 9, 3]", "[9, 2, 3]", "[1, 9, 3]", "[1, 2, 9]", "Error"], "answer": "[1, 9, 3]"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p><strong><code>index</code></strong>: Returns the first index of a value in a list using the syntax</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">some_list</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Raises an error if the value isn't there. For example run this line in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "index_predict_exercise", "hints": [], "solution": {"tokens": ["[", "7", ",", " ", "8", ",", " ", "9", ",", " ", "8", "]", ".", "index", "(", "8", ")"], "maskedIndices": [13, 0, 12, 5, 11, 14, 7, 10, 1, 4, 16, 8, 2, 15], "mask": [true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": ["[7, 8]", "[7, 8, 9]", "[7, 8, 9, 8]", "1", "2", "3", "Error"], "answer": "1"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 3, "text": "<p><strong><code>pop</code></strong>: Removes and returns an element at a given <em>index</em> using the syntax</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">some_list</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Without an argument, i.e. just <code>some_list.pop()</code>, it will remove and return the last element.\nRaises an error if <code>index</code> is not a valid index of <code>some_list</code>. For example run this program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "pop_predict_exercise", "hints": [], "solution": {"tokens": ["nums", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "3", "]", "\n", "print", "(", "nums", ".", "pop", "(", "1", ")", ")", "\n", "print", "(", "nums", ")"], "maskedIndices": [19, 8, 9, 24, 12, 15, 25, 6, 18, 22, 11, 26, 14, 4, 16, 20, 5, 27, 2, 21, 17, 0], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["1\n[1, 3]", "2\n[1, 3]", "1\n[2, 3]", "2\n[2, 3]", "1\n[2, 1, 3]", "2\n[2, 1, 3]", "Error"], "answer": "2\n[1, 3]"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 4, "text": "<p><strong><code>remove</code></strong>: Removes the first occurrence of the given <em>value</em> using the syntax</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">some_list</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Raises an error if the value isn't in the list. For example run this program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "remove_predict_exercise", "hints": [], "solution": {"tokens": ["nums", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "3", "]", "\n", "nums", ".", "remove", "(", "1", ")", "\n", "print", "(", "nums", ")"], "maskedIndices": [18, 11, 6, 21, 17, 19, 14, 2, 0, 5, 16, 12, 8, 15, 9, 24, 23, 4, 22], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["[1, 2]", "[1, 3]", "[2, 3]", "1", "2", "3", "Error"], "answer": "[2, 3]"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 5, "text": "<p>Now you will solve four short exercises involving these concepts.\nBelow is a list of correct and incorrect lines of code mixed together.\nEach upcoming exercise has a solution that includes exactly one of the lines below,\nand you must find the correct line from the list.</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">x</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">x</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n<span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n<span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n</span></code></pre>\n<p>Here is an incomplete program:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"n\">insert_one_line_from_above</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Replace the middle line with one line from the list above. The final program should modify <code>x</code> to move the first element to the end, so that it prints <code>['b', 'c', 'a']</code>.</p>", "name": "pop_remove_index_subscript_assignment", "hints": ["<p>Your solution should have exactly three statements: <code>x = ['a', 'b', 'c']</code>, then one line copied exactly from the list (no additions), and <code>print(x)</code>.</p>", "<p>Moving the first element to the end requires two things.</p>", "<p>Removing the first element...</p>", "<p>and adding it to the end.</p>", "<p>Which functions/methods can you use for this?</p>", "<p>Remember that the first index is 0.</p>"], "solution": {"tokens": ["x", " ", "=", " ", "[", "'a'", ",", " ", "'b'", ",", " ", "'c'", "]", "\n", "x", ".", "append", "(", "x", ".", "pop", "(", "0", ")", ")", "\n", "print", "(", "x", ")"], "maskedIndices": [11, 21, 23, 5, 12, 24, 19, 16, 20, 0, 4, 18, 17, 9, 22, 15, 29, 14, 28, 27, 2, 6, 8, 26], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Copy the three lines above, then replace <code>(insert_one_line_from_above)</code> with exactly one line from the long list just before that. You must choose the correct line, there's only one right answer. Type in the line exactly.</p>"}]}, {"index": 6, "text": "<p>Good job. For the next exercise, start with the same incomplete program:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"n\">insert_one_line_from_above</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Choose a line of code from the list that overwrites the last element of <code>x</code> with the first element,\nso now it should print <code>['a', 'b', 'a']</code>.</p>", "name": "subscript_assignment_exercise", "hints": ["<p>Your solution should have exactly three statements: <code>x = ['a', 'b', 'c']</code>, then one line copied exactly from the list (no additions), and <code>print(x)</code>.</p>", "<p>You need to get the value of the first element in <code>x</code>...</p>", "<p>and assign that value to the last position in <code>x</code>.</p>", "<p>How do you assign a value at a specific index in the list?</p>", "<p>What are the indices of the first and last last elements in <code>x</code>?</p>"], "solution": {"tokens": ["x", " ", "=", " ", "[", "'a'", ",", " ", "'b'", ",", " ", "'c'", "]", "\n", "x", "[", "len", "(", "x", ")", " ", "-", " ", "1", "]", " ", "=", " ", "x", "[", "0", "]", "\n", "print", "(", "x", ")"], "maskedIndices": [16, 26, 29, 24, 36, 4, 28, 2, 5, 19, 33, 18, 14, 12, 17, 30, 9, 15, 35, 11, 34, 21, 0, 6, 8, 31, 23], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Copy the three lines above, then replace <code>(insert_one_line_from_above)</code> with exactly one line from the long list in the previous step. You must choose the correct line, there's only one right answer. Type in the line exactly.</p>"}]}, {"index": 7, "text": "<p>Excellent!</p>\n<p>You might realize that working with the last element via <code>x[len(x) - 1]</code> is a bit cumbersome.\nThe same can be achieved by <code>x[-1]</code>.\nSimilarly, the second to last element <code>x[len(x) - 2]</code> can be written as <code>x[-2]</code>, and so on.\nPython allows us to count the index backwards too, starting at the last element with <code>-1</code>:</p>\n<table>\n<thead>\n<tr>\n<th>Index</th>\n<th>First elt.</th>\n<th>Second elt.</th>\n<th>Third elt.</th>\n<th>...</th>\n<th>2nd to last elt.</th>\n<th>Last elt.</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Forwards</td>\n<td><code>0</code></td>\n<td><code>1</code></td>\n<td><code>2</code></td>\n<td>...</td>\n<td><code>len(x) - 2</code></td>\n<td><code>len(x) - 1</code></td>\n</tr>\n<tr>\n<td>Backwards</td>\n<td><code>-len(x)</code></td>\n<td><code>-len(x) + 1</code></td>\n<td><code>-len(x) + 2</code></td>\n<td>...</td>\n<td><code>-2</code></td>\n<td><code>-1</code></td>\n</tr>\n</tbody>\n</table>\n<p>Next exercise:</p>\n<p>This time, rather than modifying the list <code>x</code>, you will create a new list <code>y</code>:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">]</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">insert_one_line_from_above</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p><code>y</code> should be the same as <code>x</code> but also have the first element repeated at the end.\nTherefore the program will print <code>['a', 'b', 'c', 'a']</code>.</p>", "name": "negative_index_concatenation_exercise", "hints": ["<p>Your solution should have exactly three statements: <code>x = ['a', 'b', 'c']</code>, <code>y =</code> followed by one line copied exactly from the list, and <code>print(y)</code>.</p>", "<p>Which lines of code create a new list rather than modifying?</p>", "<p><code>x</code> is a list. Each element of <code>x</code> is a string.</p>", "<p>You can add lists together, you can add strings together, but you can't add a string and a list.</p>", "<p>How do you make a list containing one element?</p>"], "solution": {"tokens": ["x", " ", "=", " ", "[", "'a'", ",", " ", "'b'", ",", " ", "'c'", "]", "\n", "y", " ", "=", " ", "x", " ", "+", " ", "[", "x", "[", "0", "]", "]", "\n", "print", "(", "y", ")"], "maskedIndices": [23, 4, 11, 30, 29, 31, 8, 14, 2, 26, 6, 18, 32, 0, 20, 9, 25, 16, 27, 22, 24, 5, 12], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Copy the three lines above, then replace <code>(insert_one_line_from_above)</code> with exactly one line from the long list of lines from before. You must choose the correct line, there's only one right answer. Type in the line exactly. Do not replace the <code>y =</code> part, that should still be there just before the line that you type in, on the same line.</p>"}]}, {"index": 8, "text": "<p>Great work. Now the final exercise:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Replace the middle line <code>x.remove(0)</code> with a line from the list that does the same thing.</p>", "name": "remove_exercise", "hints": ["<p>Your solution should have exactly three statements: <code>x = [1, 2, 0, 3]</code>, one line copied exactly from the list (no additions), and <code>print(x)</code>.</p>", "<p>What does <code>x.remove(0)</code> do?</p>", "<p>It removes an element!</p>", "<p>Which function/method can also remove an element?</p>", "<p>The other function/method can't simply be told 'remove 0', it needs a different kind of information.</p>", "<p>Specifically, it needs to be told where 0 is.</p>", "<p>Which function/method provides that kind of information?</p>"], "solution": {"tokens": ["x", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "0", ",", " ", "3", "]", "\n", "x", ".", "pop", "(", "x", ".", "index", "(", "0", ")", ")", "\n", "print", "(", "x", ")"], "maskedIndices": [14, 12, 23, 21, 25, 9, 20, 2, 0, 4, 8, 24, 30, 27, 5, 17, 29, 19, 26, 31, 18, 22, 15, 6, 32, 11], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Copy the three lines above, then replace <code>x.remove(0)</code> with exactly one line from the long list of lines from before. The line you choose should have the same effect as <code>x.remove(0)</code>, so that the program prints <code>[1, 2, 3]</code>.</p>"}]}, {"index": 9, "text": "<p>Great job!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "MoreListFunctionsAndMethods": {"slug": "MoreListFunctionsAndMethods", "title": "More List Functions and Methods", "index": 28, "step_names": ["sorted_predict_exercise", "in_predict_exercise", "sum_predict_exercise", "count_predict_exercise", "count_in_sorted_sum", "average_exercise", "sum_range_exercise", "second_smallest_in_list_exercise", "final_text"], "steps": [{"index": 0, "text": "<p>Here are a few more useful functions/methods.</p>\n<p><strong><code>sorted</code></strong>: Takes an iterable and returns a list of the elements in order from smallest to largest, using the syntax</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">some_list</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>For example run this line in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n</span></code></pre>", "name": "sorted_predict_exercise", "hints": [], "solution": {"tokens": ["sorted", "(", "[", "2", ",", " ", "9", ",", " ", "1", ",", " ", "8", ",", " ", "5", ",", " ", "6", "]", ")"], "maskedIndices": [10, 20, 18, 16, 0, 9, 1, 15, 7, 3, 12, 13, 19, 2, 6, 4], "mask": [true, true, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true], "lines": null}, "prediction": {"choices": ["[9, 8, 6, 5, 2, 1]", "[1, 8, 6, 2, 5, 9]", "[1, 2, 5, 6, 8, 9]", "[2, 9, 1, 8, 5, 6]", "Error"], "answer": "[1, 2, 5, 6, 8, 9]"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 1, "text": "<p><strong><code>in</code></strong>: A comparison operator that checks if a value is in a list, using the syntax</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">some_list</span>\n</span></code></pre>\n<p>For example run this program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">7</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "in_predict_exercise", "hints": [], "solution": {"tokens": ["nums", " ", "=", " ", "[", "2", ",", " ", "9", ",", " ", "1", ",", " ", "8", ",", " ", "5", ",", " ", "64", "]", "\n", "print", "(", "7", " ", "in", " ", "nums", ")", "\n", "print", "(", "2", " ", "in", " ", "nums", ")"], "maskedIndices": [34, 4, 6, 39, 23, 20, 38, 36, 29, 9, 8, 25, 30, 11, 18, 21, 14, 27, 0, 12, 5, 32, 17, 2, 24, 33, 15], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": ["True\nFalse", "False\nTrue", "True\nTrue", "False\nFalse", "Error"], "answer": "False\nTrue"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p><strong><code>sum</code></strong>: Add up an iterable of numbers using the syntax</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">some_list</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>For example run this line in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n</span></code></pre>", "name": "sum_predict_exercise", "hints": [], "solution": {"tokens": ["sum", "(", "[", "5", ",", " ", "3", ",", " ", "4", "]", ")"], "maskedIndices": [1, 9, 11, 2, 4, 6, 0, 3, 7, 10], "mask": [true, true, true, true, true, false, true, true, false, true, true, true], "lines": null}, "prediction": {"choices": ["10", "12", "7", "Error"], "answer": "12"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 3, "text": "<p><strong><code>count</code></strong>: Returns the number of times the argument appears in the list using the syntax</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">some_list</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>For example run this line in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "count_predict_exercise", "hints": [], "solution": {"tokens": ["[", "1", ",", " ", "2", ",", " ", "3", ",", " ", "2", ",", " ", "7", ",", " ", "2", ",", " ", "5", "]", ".", "count", "(", "2", ")"], "maskedIndices": [14, 5, 25, 17, 21, 16, 23, 24, 0, 10, 20, 19, 22, 4, 8, 2, 1, 7, 11, 13], "mask": [true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": ["0", "1", "2", "3", "Error"], "answer": "3"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 4, "text": "<p>You may recognise some of these from your exercises. I assure you that those exercises were not pointless,\nas you've now learned valuable fundamental skills. For example, you can use <code>in</code> to check if a list contains 5,\nbut there's no similarly easy way to check for a number bigger than 5.</p>\n<p>Now you will solve another set of four exercises involving these new concepts.\nAgain, correct and incorrect lines of code are mixed together,\nand you must choose the correct line from the list.</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span>\n</span></code></pre>\n<p>Here is a program:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"n\">x</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Replace the part <code>1 in x</code> (leave in the <code>y =</code>) with one line from the list above that does the same thing.</p>", "name": "count_in_sorted_sum", "hints": ["<p>Your solution should have exactly three statements: <code>x = ['a', 'b', 'c']</code>, <code>y =</code> followed by one line copied exactly from the list, and <code>print(y)</code>.</p>", "<p>When is <code>1 in x</code> True?</p>", "<p>When <code>1</code> is in <code>x</code>!</p>", "<p>Could be that <code>1</code> is in <code>x</code> once, or twice, or three times...</p>", "<p>...but not zero times!</p>"], "solution": {"tokens": ["x", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "0", ",", " ", "3", "]", "\n", "y", " ", "=", " ", "x", ".", "count", "(", "1", ")", " ", ">", " ", "0", "\n", "print", "(", "y", ")"], "maskedIndices": [6, 32, 17, 8, 4, 2, 11, 14, 24, 23, 33, 28, 30, 34, 0, 35, 19, 9, 15, 21, 22, 5, 12, 25, 26], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Copy the three lines above, then replace <code>1 in x</code> with exactly one line from the long list of lines above. The middle line should still start with <code>y =</code>. The line you choose should have the same effect as <code>1 in x</code>, so that the program prints <code>True</code>.</p>"}]}, {"index": 5, "text": "<p>Excellent work! For the next exercise, start with this incomplete program:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">insert_one_line_from_above</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Replace the part after <code>y =</code> with one line from the list above.\nThe final program should print the average (technically the <em>mean</em>) of the numbers in <code>x</code>.</p>", "name": "average_exercise", "hints": ["<p>Your solution should have exactly three statements: <code>x = [15, 12, -6, 3]</code>, <code>y =</code> followed by one line copied exactly from the list, and <code>print(y)</code>.</p>", "<p>If you're not sure, look up how to calculate the average/mean.</p>", "<p>To calculate the average of numbers in <code>x</code> we need two things.</p>", "<p>Which two functions/methods give you those two things?</p>", "<p>How do you combine those two things to calculate the average?</p>"], "solution": {"tokens": ["x", " ", "=", " ", "[", "15", ",", " ", "12", ",", " ", "-", "6", ",", " ", "3", "]", "\n", "y", " ", "=", " ", "sum", "(", "x", ")", " ", "/", " ", "len", "(", "x", ")", "\n", "print", "(", "y", ")"], "maskedIndices": [24, 4, 8, 9, 15, 36, 37, 12, 6, 30, 2, 34, 22, 0, 32, 27, 18, 23, 16, 25, 13, 35, 29, 20, 11, 31, 5], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Copy the three lines above, then replace <code>(insert_one_line_from_above)</code> with exactly one line from the long list of lines above. The middle line should still start with <code>y =</code>.</p>"}]}, {"index": 6, "text": "<p>Good job! For the next exercise, start with this incomplete program:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">insert_one_line_from_above</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Replace the part after <code>y =</code> with one line from the list above.\nThe final program should print the result of adding up all the numbers from <code>1</code> to <code>x</code> inclusive, i.e. <code>1 + 2 + 3 + ... + x</code>.</p>", "name": "sum_range_exercise", "hints": ["<p>Your solution should have exactly three statements: <code>x = 100</code>, <code>y =</code> followed by one line copied exactly from the list, and <code>print(y)</code>.</p>", "<p>What function/method can be used to add up things?</p>", "<p>Which function/method gives us the numbers <code>1, 2, 3, ..., x</code>?</p>", "<p>You have to make a small tweak, otherwise that last number <code>x</code> will be left out.</p>"], "solution": {"tokens": ["x", " ", "=", " ", "100", "\n", "y", " ", "=", " ", "sum", "(", "range", "(", "x", " ", "+", " ", "1", ")", ")", "\n", "print", "(", "y", ")"], "maskedIndices": [11, 2, 23, 24, 22, 6, 16, 12, 25, 20, 4, 10, 18, 19, 8, 0, 13, 14], "mask": [true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Copy the three lines above, then replace <code>(insert_one_line_from_above)</code> with exactly one line from the long list of lines above. The middle line should still start with <code>y =</code>.</p>"}]}, {"index": 7, "text": "<p>Excellent. And the last one:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">insert_one_line_from_above</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Replace the part after <code>y =</code> with one line from the list above.\nThe final program should print the <em>second smallest value</em> in <code>x</code>.</p>", "name": "second_smallest_in_list_exercise", "hints": ["<p>Your solution should have exactly three statements: <code>x = [12, -6, 2, -1, 3]</code>, <code>y =</code> followed by one line copied exactly from the list, and <code>print(y)</code>.</p>", "<p>The numbers in <code>x</code> seem to be all out of order. Can you do something about that?</p>", "<p>If you figured that part out, try using that function in the shell to play around with it.</p>", "<p>How would you use that function to get the smallest value in a list? What about the biggest?</p>", "<p>After that, how can you get the <em>second</em> smallest value?</p>"], "solution": {"tokens": ["x", " ", "=", " ", "[", "12", ",", " ", "-", "6", ",", " ", "2", ",", " ", "-", "1", ",", " ", "3", "]", "\n", "y", " ", "=", " ", "sorted", "(", "x", ")", "[", "1", "]", "\n", "print", "(", "y", ")"], "maskedIndices": [17, 2, 35, 6, 24, 36, 28, 20, 32, 15, 10, 30, 12, 5, 4, 29, 26, 0, 19, 37, 22, 31, 27, 9, 8, 13, 16, 34], "mask": [true, false, true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Copy the three lines above, then replace <code>(insert_one_line_from_above)</code> with exactly one line from the long list of lines above. The middle line should still start with <code>y =</code>.</p>"}]}, {"index": 8, "text": "<p>Congratulations! You are now a master of list methods and functions!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "StringMethodsUnderstandingMutation": {"slug": "StringMethodsUnderstandingMutation", "title": "String Methods and Immutability", "index": 29, "step_names": ["string_in_step", "string_count_index", "mutation_string_append", "string_lower_upper", "final_text"], "steps": [{"index": 0, "text": "<p>You've already seen that <code>len</code> and subscripting work with strings, a bit as if strings are lists of characters.\nStrings also support some of the new methods we've learned, not just for characters but for any substring.\nFor example, try the following:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'the'</span> <span class=\"ow\">in</span> <span class=\"s1\">'feed the dog and the cat'</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "string_in_step", "hints": [], "solution": {"tokens": ["print", "(", "'the'", " ", "in", " ", "'feed the dog and the cat'", ")"], "maskedIndices": [4, 1, 0, 7, 6, 2], "mask": [true, true, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p><code>in</code> works on strings like it does on lists! The command returned <code>True</code> because <code>the</code> occurs in <code>feed the dog and the cat</code> as a <em>substring</em>.\nHow about <code>count</code> and <code>index</code>?</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s1\">'feed the dog and the cat'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">'the'</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s1\">'the'</span><span class=\"p\">))</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "string_count_index", "hints": [], "solution": {"tokens": ["string", " ", "=", " ", "'feed the dog and the cat'", "\n", "print", "(", "string", ".", "count", "(", "'the'", ")", ")", "\n", "print", "(", "string", ".", "index", "(", "'the'", ")", ")"], "maskedIndices": [14, 11, 23, 16, 21, 7, 19, 12, 22, 2, 9, 17, 20, 8, 24, 6, 0, 18, 4, 10, 13], "mask": [true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>Again these two methods also work on strings similar to how they work on lists.\n<code>index</code> returns the <em>beginning index</em> of the search word <code>'the'</code> in the longer string\n<code>'feed the dog and the cat'</code>, which is <code>5</code>.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\"><strong>5</strong></th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n<th align=\"center\">8</th>\n<th align=\"center\">...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">f</td>\n<td align=\"center\">e</td>\n<td align=\"center\">e</td>\n<td align=\"center\">d</td>\n<td align=\"center\"></td>\n<td align=\"center\"><strong>t</strong></td>\n<td align=\"center\">h</td>\n<td align=\"center\">e</td>\n<td align=\"center\"></td>\n<td align=\"center\">...</td>\n</tr>\n</tbody>\n</table>\n<p>Note that in most cases, methods which <em>modify a list in place</em> (<code>append</code>, <code>insert</code>, <code>remove</code>) merely return <code>None</code>,\nwhile the remaining functions/methods return a new useful value without changing the original argument.\nThe only exception is the <code>pop</code> method.</p>\n<p>Modifying a value directly is called <em>mutation</em> - types of values which can be mutated are <em>mutable</em>,\nwhile those that can't are <em>immutable</em>. Lists are mutable.\nStrings are immutable - they don't have any methods like <code>append</code> or even subscript assignment.\nSee for yourself:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"s1\">'Python'</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">' is cool!'</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "mutation_string_append", "hints": [], "solution": {"tokens": ["'Python'", ".", "append", "(", "' is cool!'", ")"], "maskedIndices": [4, 2, 5, 0, 3, 1], "mask": [true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>You simply can't change a string - you can only create new strings and use those instead.\nThat means that this is a useless statement on its own:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">word</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n</span></code></pre>\n<p>The string referred to by <code>word</code> isn't modified, instead <code>word.lower()</code> returned a new string which was immediately discarded.\nIf you want to change the value that <code>word</code> refers to, you have to assign a new value to the variable:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s2\">\"Python rocks!\"</span>\n<span class=\"n\">new_sentence</span> <span class=\"o\">=</span> <span class=\"n\">sentence</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_sentence</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "string_lower_upper", "hints": [], "solution": {"tokens": ["sentence", " ", "=", " ", "\"Python rocks!\"", "\n", "new_sentence", " ", "=", " ", "sentence", ".", "upper", "(", ")", "\n", "print", "(", "sentence", ")", "\n", "print", "(", "new_sentence", ")"], "maskedIndices": [17, 14, 4, 23, 12, 18, 0, 10, 22, 2, 21, 24, 13, 11, 6, 16, 8, 19], "mask": [true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 4, "text": "<p>Observe that <code>sentence.upper()</code> does not change the original <code>sentence</code>.</p>\n<p>You can also use <code>word.lower()</code> immediately in a larger expression, e.g.</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'yes'</span><span class=\"p\">:</span>\n</span></code></pre>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "HowToFindInformationWithGoogleAndMore": {"slug": "HowToFindInformationWithGoogleAndMore", "title": "How to Find Information with Google, and more", "index": 30, "step_names": ["sum_list", "list_insert", "dir_list", "final_text"], "steps": [{"index": 0, "text": "<p>It's useful to know the functions we just covered, but it's not easy to learn them all, and there's many more. A more important skill is being able to look things up. For example, here are some typical ways you might Google the above functions if you forgot their names:</p>\n<ul>\n<li><code>append</code><ul>\n<li>python add element to list</li>\n<li>python add item at end of list</li>\n</ul>\n</li>\n<li><code>len</code><ul>\n<li>python size of list</li>\n<li>python number of elements in list</li>\n<li>python how many characters in string</li>\n</ul>\n</li>\n<li><code>sum</code><ul>\n<li>python add list of numbers</li>\n<li>python total of numbers</li>\n</ul>\n</li>\n<li><code>in</code><ul>\n<li>python check if list contains value</li>\n<li>python test if list has element</li>\n</ul>\n</li>\n<li><code>index</code><ul>\n<li>python get position of element</li>\n<li>python get index of value</li>\n</ul>\n</li>\n</ul>\n<p>Let's practice this skill now. Find a function/method that returns the value in a list which is bigger than any other value. For example, given the list <code>[21, 55, 4, 91, 62, 49]</code>, it will return <code>91</code>. You should write the answer in the shell as a single small expression. For example, if you were looking for the function <code>sum</code>, you could write <code>sum([21, 55, 4, 91, 62, 49])</code>. Don't solve this manually with a loop. Note that the function you're looking for hasn't been mentioned here before.</p>", "name": "sum_list", "hints": ["<p>Use the words 'python' and 'list' in your search query.</p>", "<p>In one word, what's special about <code>91</code> in the list <code>[21, 55, 4, 91, 62, 49]</code>?</p>", "<p>'biggest' or 'largest'</p>", "<p>'python biggest value in list'</p>"], "solution": {"tokens": ["max", "(", "[", "21", ",", " ", "55", ",", " ", "4", ",", " ", "91", ",", " ", "62", ",", " ", "49", "]", ")"], "maskedIndices": [12, 16, 13, 0, 1, 15, 19, 3, 10, 18, 4, 6, 9, 2, 7, 20], "mask": [true, true, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Run code similar to <code>sum([21, 55, 4, 91, 62, 49])</code> but replace <code>sum</code> with the name of another specific function.\nThere's only one correct answer for which function should be used. You need to search online to figure out which one.\nIt's a commonly used built-in function in Python.</p>"}]}, {"index": 1, "text": "<p>Good find! Let's do one more. Consider this program:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">nums</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>This changes <code>nums</code> so that it prints:</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>But suppose you don't want the 9 to be at the end, you want it to go between the second and third elements, so the output is:</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>Replace the middle line <code>nums.append(9)</code> with the right function/method call to do that.</p>", "name": "list_insert", "hints": ["<p>Use the words 'python' and 'list' in your search query.</p>", "<p>Instead of putting the value at the beginning or end, we want to put it <strong><em>_</em></strong>_____?</p>", "<p>'in the middle' or 'at an index' or 'at a particular position'</p>", "<p>'python add value at index'</p>"], "solution": {"tokens": ["nums", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "3", ",", " ", "4", ",", " ", "5", "]", "\n", "nums", ".", "insert", "(", "2", ",", " ", "9", ")", "\n", "print", "(", "nums", ")"], "maskedIndices": [0, 30, 17, 33, 15, 28, 5, 20, 12, 4, 11, 23, 27, 21, 24, 31, 25, 2, 32, 6, 18, 14, 9, 8, 22], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Run code similar to the three lines above, but change <code>nums.append(9)</code> to the right function/method call\nto put 9 right after the second element (2 in the example <code>nums = [1, 2, 3, 4, 5]</code>) instead of at the end.\nThere's only one correct answer for what the middle line should be.\nYou need to search online to figure out which function/method to use and how to use it.</p>"}]}, {"index": 2, "text": "<p>Perfect!</p>\n<p>It can also be useful to Google things like \"python list tutorial\", e.g. if:</p>\n<ul>\n<li>Googling a specific method has failed so you want to find it manually.</li>\n<li>You're still confused about lists after this course.</li>\n<li>It's been a while since you learned about lists and you need a reminder.</li>\n<li>You're struggling to solve a problem with lists and you need to go back to basics and strengthen your foundations.</li>\n</ul>\n<p>There are also ways to find information without any googling. Try <code>dir([])</code> in the shell.</p>", "name": "dir_list", "hints": [], "solution": {"tokens": ["dir", "(", "[", "]", ")"], "maskedIndices": [4, 2, 0, 3, 1], "mask": [true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p><code>dir()</code> returns a list of the argument's attributes, which are mostly methods. Many will start with <code>__</code> which you can ignore for now - scroll to the end of the list and you'll see some familiar methods.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "UnderstandingProgramsWithPythonTutor": {"slug": "UnderstandingProgramsWithPythonTutor", "title": "Understanding Programs With Python Tutor", "index": 31, "step_names": ["run_with_python_tutor", "final_text"], "steps": [{"index": 0, "text": "<p>It's time to learn about another tool to explore programs.\nCopy the code below into the editor and then click the new \"Python Tutor\" button.\nThe button opens a new tab with a visualisation from <a href=\"http://pythontutor.com\">pythontutor.com</a>.\nThere you can navigate through the program step by step with the \"Prev\" or \"Next\" buttons, or drag\nthe slider left or right. You can also see the values of variables on the right.</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">all_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n\n<span class=\"n\">small_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">big_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">all_numbers</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n        <span class=\"n\">small_numbers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">big_numbers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">small_numbers</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">big_numbers</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "run_with_python_tutor", "hints": [], "solution": {"tokens": ["all_numbers", " ", "=", " ", "[", "2", ",", " ", "4", ",", " ", "8", ",", " ", "1", ",", " ", "9", ",", " ", "7", "]", "\n", "\n", "small_numbers", " ", "=", " ", "[", "]", "\n", "big_numbers", " ", "=", " ", "[", "]", "\n", "\n", "for", " ", "number", " ", "in", " ", "all_numbers", ":", "\n", "    ", "if", " ", "number", " ", "<=", " ", "5", ":", "\n", "        ", "small_numbers", ".", "append", "(", "number", ")", "\n", "    ", "else", ":", "\n", "        ", "big_numbers", ".", "append", "(", "number", ")", "\n", "\n", "print", "(", "small_numbers", ")", "\n", "print", "(", "big_numbers", ")"], "maskedIndices": [6, 20, 8, 24, 74, 35, 80, 9, 61, 5, 64, 51, 39, 36, 18, 33, 73, 4, 28, 87, 68, 72, 71, 79, 63, 82, 67, 62, 86, 14, 0, 84, 43, 29, 12, 31, 85, 59, 49, 81, 56, 76, 11, 17, 53, 60, 75, 45, 15, 26, 2, 41, 46, 55, 21], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>With your code in the editor, click the Python Tutor button.</p>"}]}, {"index": 1, "text": "<p>Note that the code runs twice separately: once here, once on pythontutor.com.\nDepending on your program, the two runs may produce different results.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "EqualsVsIs": {"slug": "EqualsVsIs", "title": "<code>==</code> vs <code>is</code>, and Having Multiple Names for One Value", "index": 32, "step_names": ["two_separate_lists", "same_list", "final_text"], "steps": [{"index": 0, "text": "<p>It's time to learn some technical details that are often misunderstood and lead to errors.\nRun this program:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">list1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">list1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">list2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">list1</span> <span class=\"o\">==</span> <span class=\"n\">list2</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">list1</span> <span class=\"ow\">is</span> <span class=\"n\">list2</span><span class=\"p\">)</span>\n\n<span class=\"n\">list1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">list1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">list2</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "two_separate_lists", "hints": [], "solution": {"tokens": ["list1", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "3", "]", "\n", "list2", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "3", "]", "\n", "\n", "print", "(", "list1", ")", "\n", "print", "(", "list2", ")", "\n", "print", "(", "list1", " ", "==", " ", "list2", ")", "\n", "\n", "print", "(", "list1", " ", "is", " ", "list2", ")", "\n", "\n", "list1", ".", "append", "(", "4", ")", "\n", "\n", "print", "(", "list1", ")", "\n", "print", "(", "list2", ")"], "maskedIndices": [35, 41, 4, 50, 39, 55, 68, 9, 63, 16, 12, 14, 69, 26, 32, 61, 34, 19, 11, 46, 45, 74, 20, 64, 0, 53, 73, 36, 22, 40, 5, 49, 43, 29, 56, 2, 60, 51, 8, 67, 30, 62, 25, 75, 70, 37, 18, 31, 59, 23, 72, 6], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>This program is quite straightforward and mostly consists of things you're familiar with.\nWe create two variables which refer to lists.\nThe lists have the same elements, so they are equal: <code>list1 == list2</code> is <code>True</code>.</p>\n<p>But then there's a new comparison operator: <code>is</code>. Here <code>list1 is list2</code> is <code>False</code>.\nThat means that regardless of the two lists being equal,\nthey are still two separate, distinct, individual lists.\nAs a result, when you append 4 to <code>list1</code>, only <code>list1</code> changes.</p>\n<p>Now change <code>list2 = [1, 2, 3]</code> to <code>list2 = list1</code> and see what difference it makes.</p>", "name": "same_list", "hints": [], "solution": {"tokens": ["list1", " ", "=", " ", "[", "1", ",", " ", "2", ",", " ", "3", "]", "\n", "list2", " ", "=", " ", "list1", "\n", "\n", "print", "(", "list1", ")", "\n", "print", "(", "list2", ")", "\n", "print", "(", "list1", " ", "==", " ", "list2", ")", "\n", "\n", "print", "(", "list1", " ", "is", " ", "list2", ")", "\n", "\n", "list1", ".", "append", "(", "4", ")", "\n", "\n", "print", "(", "list1", ")", "\n", "print", "(", "list2", ")"], "maskedIndices": [11, 14, 12, 53, 29, 60, 0, 5, 67, 62, 9, 66, 28, 31, 61, 43, 24, 26, 59, 54, 35, 55, 41, 22, 21, 38, 6, 65, 23, 64, 37, 51, 32, 16, 33, 52, 2, 8, 48, 45, 4, 47, 42, 18, 27, 56], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same program as above, but replace the <em>second</em> <code>[1, 2, 3]</code> with <code>list1</code>.</p>"}]}, {"index": 2, "text": "<p>Now <code>list1 is list2</code> is <code>True</code>, because <em>there is only one list</em>, and the two variables\n<code>list1</code> and <code>list2</code> both refer to that same list. <code>list1.append(4)</code> appends to the one list\nand the result can be seen in both <code>print(list1)</code> and <code>print(list2)</code> because both lines\nare now just different ways of printing the same list.</p>\n<p>I recommend running both versions with Python Tutor to see how it visualises the difference.\nIn the second case, the two variables both have arrows pointing to a single list object.</p>\n<p><code>list2 = list1</code> doesn't create an eternal link between the variables. If you assign a new value\nto <em>either</em> of the variables, e.g. <code>list1 = [7, 8, 9]</code>, the other variable will be unaffected\nand will still point to the original list.</p>\n<p>Basically, an assignment like:</p>\n<pre><code>list2 = &lt;expression&gt;\n</code></pre>\n<p>means 'make the variable <code>list2</code> refer to whatever <code>&lt;expression&gt;</code> evaluates to'.\nIt doesn't make a copy of that value, which is how both variables can end up pointing to the same list.\nBut as we've learned before, <code>list2</code> doesn't remember <code>&lt;expression&gt;</code>, only the value.\nIt doesn't know about other variables.</p>\n<p>You can copy a list with the <code>copy</code> method:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"n\">list1</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n</span></code></pre>\n<p>This will make the program behave like the first version again.</p>\n<p>If you come across this kind of problem and you're still having trouble understanding this stuff, read the essay <a href=\"https://nedbatchelder.com/text/names.html\">Facts and myths about Python names and values</a>.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "ModifyingWhileIterating": {"slug": "ModifyingWhileIterating", "title": "Modifying While Iterating", "index": 33, "step_names": ["run_broken_with_python_tutor", "remove_instead_of_pop", "make_copy", "make_copy2", "make_new_list", "final_text"], "steps": [{"index": 0, "text": "<p>Consider this program. It loops through a list of numbers and removes the ones smaller than 10. Or at least, it tries to.\nRun it with Python Tutor.</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)):</span>\n    <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">numbers</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>(remember that <code>numbers.pop(i)</code> removes the element from <code>numbers</code> at index <code>i</code>)</p>", "name": "run_broken_with_python_tutor", "hints": [], "solution": {"tokens": ["numbers", " ", "=", " ", "[", "10", ",", " ", "7", ",", " ", "8", ",", " ", "3", ",", " ", "12", ",", " ", "15", "]", "\n", "for", " ", "i", " ", "in", " ", "range", "(", "len", "(", "numbers", ")", ")", ":", "\n", "    ", "number", " ", "=", " ", "numbers", "[", "i", "]", "\n", "    ", "if", " ", "number", " ", "<=", " ", "10", ":", "\n", "        ", "numbers", ".", "pop", "(", "i", ")", "\n", "print", "(", "numbers", ")"], "maskedIndices": [43, 21, 55, 51, 62, 44, 56, 0, 30, 23, 29, 17, 12, 2, 36, 35, 46, 45, 6, 18, 25, 8, 61, 69, 14, 67, 32, 31, 63, 5, 20, 11, 39, 66, 68, 15, 59, 9, 64, 60, 34, 27, 41, 53, 4, 33, 49], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>With your code in the editor, click the Python Tutor button.</p>"}]}, {"index": 1, "text": "<p>As it runs, it clearly skips even looking at 7 or 3 and doesn't remove them, and at the end it fails when it tries to access an index that's too high. Can you see why this happens?</p>\n<p>The index variable <code>i</code> runs through the usual values 0, 1, 2, ... as it's supposed to, but as the list changes those are no longer the positions we want. For example in the first iteration <code>i</code> is 0 and <code>number</code> is 10, which gets removed. This shifts the rest of the numbers left one position, so now 7 is in position 0. But then in the next iteration <code>i</code> is 1, and <code>numbers[i]</code> is 8. 7 got skipped.</p>\n<p>We could try writing the program to use <code>remove</code> instead of <code>pop</code> so we don't have to use indices. It even looks nicer this way.</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "remove_instead_of_pop", "hints": [], "solution": {"tokens": ["numbers", " ", "=", " ", "[", "10", ",", " ", "7", ",", " ", "8", ",", " ", "3", ",", " ", "12", ",", " ", "15", "]", "\n", "for", " ", "number", " ", "in", " ", "numbers", ":", "\n", "    ", "if", " ", "number", " ", "<=", " ", "10", ":", "\n", "        ", "numbers", ".", "remove", "(", "number", ")", "\n", "print", "(", "numbers", ")"], "maskedIndices": [29, 18, 17, 43, 11, 33, 25, 5, 52, 2, 20, 9, 6, 35, 45, 12, 47, 4, 30, 0, 53, 39, 44, 51, 21, 27, 40, 15, 48, 50, 46, 23, 14, 8, 37], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>But it turns out this does nearly the same thing - it doesn't end in an error, but it still doesn't remove 7 or 3.\nThis happens for the same reason - iterating over a list still goes through the indices under the hood.</p>\n<p>The lesson here is to <strong><em>never modify something while you iterate over it</em></strong>. Keep mutation and looping separate.</p>\n<p>The good news is that there are many ways to solve this. You can instead just loop over a copy, as in:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">():</span>\n</span></code></pre>", "name": "make_copy", "hints": [], "solution": {"tokens": ["numbers", " ", "=", " ", "[", "10", ",", " ", "7", ",", " ", "8", ",", " ", "3", ",", " ", "12", ",", " ", "15", "]", "\n", "for", " ", "number", " ", "in", " ", "numbers", ".", "copy", "(", ")", ":", "\n", "    ", "if", " ", "number", " ", "<=", " ", "10", ":", "\n", "        ", "numbers", ".", "remove", "(", "number", ")", "\n", "print", "(", "numbers", ")"], "maskedIndices": [11, 4, 14, 9, 8, 48, 27, 55, 6, 29, 0, 37, 33, 2, 21, 20, 52, 30, 25, 49, 43, 47, 51, 50, 18, 56, 15, 39, 41, 12, 34, 23, 31, 17, 54, 44, 5, 32, 57], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same program as above, but change the second line:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n</span></code></pre>\n<p>to:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">():</span>\n</span></code></pre>\n<p>i.e. add <code>.copy()</code> after <code>numbers</code> but before <code>:</code>.</p>"}]}, {"index": 3, "text": "<p>Now the list being modified and the list being iterated over are separate objects, even if they start out with equal contents.</p>\n<p>Similarly, you could loop over the original and modify a copy:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"n\">big_numbers</span> <span class=\"o\">=</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"n\">big_numbers</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">big_numbers</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "make_copy2", "hints": [], "solution": {"tokens": ["numbers", " ", "=", " ", "[", "10", ",", " ", "7", ",", " ", "8", ",", " ", "3", ",", " ", "12", ",", " ", "15", "]", "\n", "big_numbers", " ", "=", " ", "numbers", ".", "copy", "(", ")", "\n", "\n", "for", " ", "number", " ", "in", " ", "numbers", ":", "\n", "    ", "if", " ", "number", " ", "<=", " ", "10", ":", "\n", "        ", "big_numbers", ".", "remove", "(", "number", ")", "\n", "print", "(", "big_numbers", ")"], "maskedIndices": [8, 64, 44, 40, 17, 11, 12, 46, 38, 58, 23, 54, 5, 21, 4, 14, 28, 30, 18, 63, 6, 61, 62, 27, 9, 15, 25, 56, 0, 20, 2, 57, 29, 48, 50, 59, 34, 36, 41, 31, 55, 51], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 4, "text": "<p>Or you could build up a new list from scratch. In this case, we've already done a similar thing in an exercise:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"n\">big_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"n\">big_numbers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">big_numbers</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "make_new_list", "hints": [], "solution": {"tokens": ["numbers", " ", "=", " ", "[", "10", ",", " ", "7", ",", " ", "8", ",", " ", "3", ",", " ", "12", ",", " ", "15", "]", "\n", "big_numbers", " ", "=", " ", "[", "]", "\n", "\n", "for", " ", "number", " ", "in", " ", "numbers", ":", "\n", "    ", "if", " ", "number", " ", ">", " ", "10", ":", "\n", "        ", "big_numbers", ".", "append", "(", "number", ")", "\n", "print", "(", "big_numbers", ")"], "maskedIndices": [28, 8, 59, 61, 52, 37, 17, 54, 27, 51, 53, 47, 55, 20, 21, 33, 12, 48, 18, 11, 6, 9, 41, 35, 2, 5, 60, 0, 58, 43, 45, 25, 31, 56, 38, 4, 14, 15, 23], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 5, "text": "<p>To reiterate, <strong><em>never modify something while you iterate over it</em></strong>. Your options are:</p>\n<ul>\n<li>Modify a copy</li>\n<li>Iterate over a copy</li>\n<li>Don't modify anything, make a new version instead.</li>\n</ul>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "SingleAndDoubleQuotesInStrings": {"slug": "SingleAndDoubleQuotesInStrings", "title": "Single and Double Quotes in Strings", "index": 34, "step_names": ["single_quotes_apostrophe", "double_quotes", "single_double_quotes_equal", "double_quote_exercise", "single_quote_exercise", "final_text"], "steps": [{"index": 0, "text": "<p>We have been defining strings using single quotes up until now, like:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Alice'</span>\n</span></code></pre>\n<p>What happens if we want to define a string that contains an apostrophe? Try this:</p>\n<pre><code>print('Alice's Diner')\n</code></pre>", "name": "single_quotes_apostrophe", "hints": [], "solution": {"tokens": ["print", "(", "'Alice'", "s", " ", "Diner", "'", ")"], "maskedIndices": [0, 1, 5, 7, 3, 6, 2], "mask": [true, true, true, true, false, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "program_in_text"}]}, {"index": 1, "text": "<p>So we can't use an apostrophe as we like in a string with single quotes.\nThe apostrophe counts as a single quote and therefore acts as a <em>closing quote</em> of a string definition <code>'Alice'</code>.\nThen the remaining text <code>s Diner'</code> is invalid syntax and Python does not understand it.</p>\n<p>Thankfully Python allows us to define strings in another way, using double quotes <code>\"</code> instead:</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Alice's Diner\"</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "double_quotes", "hints": [], "solution": {"tokens": ["print", "(", "\"Alice's Diner\"", ")"], "maskedIndices": [1, 3, 2, 0], "mask": [true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>Remember that quotes are just part of the human notation for strings.\nThey are not stored as an actual part of the string.\nTry this in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"s1\">'Alice'</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span>\n</span></code></pre>", "name": "single_double_quotes_equal", "hints": [], "solution": {"tokens": ["'Alice'", " ", "==", " ", "\"Alice\""], "maskedIndices": [4, 2, 0], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": ["True", "False", "Error"], "answer": "True"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 3, "text": "<p>As you can see Python considers the same string defined by single or double quotes as the same.</p>\n<p>Now write a program that prints the following text from the Zen of Python:</p>\n<pre><code class=\" copyable\">Special cases aren't special enough to break the rules.\n<button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>The program should be a single line using <code>print()</code>, no variables.</p>", "name": "double_quote_exercise", "hints": ["<p>How should you define the string?</p>", "<p>With single quotes, or with double quotes?</p>", "<p>You only need one string.</p>", "<p>No need to add strings together.</p>"], "solution": {"tokens": ["print", "(", "\"Special cases aren't special enough to break the rules.\"", ")"], "maskedIndices": [2, 3, 0, 1], "mask": [true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}]}, {"index": 4, "text": "<p>Excellent!</p>\n<p>Now print the following quote exactly (including the double quotes):</p>\n<pre><code class=\" copyable\">\"Talk is cheap. Show me the code.\" - Linus Torvalds\n<button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>The program should be a single line using <code>print()</code>, no variables.</p>", "name": "single_quote_exercise", "hints": ["<p>Think simple! How would you normally do this?</p>", "<p>If a string contains a single quote, we must use double quotes to define it.</p>", "<p>What if the string contains double quotes?</p>"], "solution": {"tokens": ["print", "(", "'\"Talk is cheap. Show me the code.\" - Linus Torvalds'", ")"], "maskedIndices": [2, 1, 3, 0], "mask": [true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}]}, {"index": 5, "text": "<p>Good job!</p>\n<p>In most cases you can use either single or double quotes to define your strings, however you like it.\nBut if your string contains <code>'</code> then use <code>\"</code> to define it and vice versa.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingFstrings": {"slug": "IntroducingFstrings", "title": "f-strings", "index": 35, "step_names": ["introduce_f_strings", "concatenate_string_number", "basic_f_string_exercise", "eval_expr_inside_f_string", "fix_broken_program", "final_text"], "steps": [{"index": 0, "text": "<p>So far we have been combining strings by concatenating them using <code>+</code>, like:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Alice\"</span>\n<span class=\"n\">friend</span> <span class=\"o\">=</span> <span class=\"s1\">'Bob'</span>\n<span class=\"n\">meal</span> <span class=\"o\">=</span> <span class=\"s2\">\"lunch\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">\" went to \"</span> <span class=\"o\">+</span> <span class=\"n\">meal</span> <span class=\"o\">+</span> <span class=\"s2\">\" with \"</span> <span class=\"o\">+</span> <span class=\"n\">friend</span> <span class=\"o\">+</span> <span class=\"s1\">'.'</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>However this gets a bit cumbersome. We can write the same thing more elegantly using an <em>f-string</em>.\nReplace the last line of the program above with the line below and run it.\nMake sure you include the <code>f</code> before the string.</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> went to </span><span class=\"si\">{</span><span class=\"n\">meal</span><span class=\"si\">}</span><span class=\"s2\"> with </span><span class=\"si\">{</span><span class=\"n\">friend</span><span class=\"si\">}</span><span class=\"s2\">.\"</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "introduce_f_strings", "hints": [], "solution": {"tokens": ["name", " ", "=", " ", "\"Alice\"", "\n", "friend", " ", "=", " ", "'Bob'", "\n", "meal", " ", "=", " ", "\"lunch\"", "\n", "print", "(", "f\"{name} went to {meal} with {friend}.\"", ")"], "maskedIndices": [10, 4, 21, 2, 20, 18, 19, 16, 12, 0, 6, 14, 8], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["f\"{name} went to {meal} with {friend}.\"", "\"{name} went to {meal} with {friend}.\"", "{name} went to {meal} with {friend}.", "'name' went to 'meal' with 'friend'.", "name went to meal with friend.", "\"Alice\" went to \"lunch\" with 'Bob'.", "'Alice' went to 'lunch' with 'Bob'.", "\"Alice went to lunch with Bob.\"", "Alice went to lunch with Bob.", "Error"], "answer": "Alice went to lunch with Bob."}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the program above, but replace this code inside the <code>print()</code>:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">\" went to \"</span> <span class=\"o\">+</span> <span class=\"n\">meal</span> <span class=\"o\">+</span> <span class=\"s2\">\" with \"</span> <span class=\"o\">+</span> <span class=\"n\">friend</span> <span class=\"o\">+</span> <span class=\"s1\">'.'</span>\n</span></code></pre>\n<p>with:</p>\n<pre><code class=\"codehilite\"><span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> went to </span><span class=\"si\">{</span><span class=\"n\">meal</span><span class=\"si\">}</span><span class=\"s2\"> with </span><span class=\"si\">{</span><span class=\"n\">friend</span><span class=\"si\">}</span><span class=\"s2\">.\"</span>\n</span></code></pre>"}]}, {"index": 1, "text": "<p>The syntax of an f-string starts with <code>f</code> followed by a string.\nThe f-string can contain names of variables inside curly brackets <code>{}</code>.\nThey will be replaced with the values of those variables converted to strings.\nThe variables can be anything: strings, numbers, lists, etc.</p>\n<p>Therefore f-strings let you easily combine strings and numbers, which can't\njust be added together. For example run the following program:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Alice\"</span>\n<span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello \"</span> <span class=\"o\">+</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">\". You are \"</span> <span class=\"o\">+</span> <span class=\"n\">age</span> <span class=\"o\">+</span> <span class=\"s2\">\" years old.\"</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "concatenate_string_number", "hints": [], "solution": {"tokens": ["name", " ", "=", " ", "\"Alice\"", "\n", "age", " ", "=", " ", "20", "\n", "print", "(", "\"Hello \"", " ", "+", " ", "name", " ", "+", " ", "\". You are \"", " ", "+", " ", "age", " ", "+", " ", "\" years old.\"", ")"], "maskedIndices": [26, 8, 6, 30, 12, 31, 14, 16, 10, 22, 20, 2, 24, 18, 4, 13, 28, 0], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": ["\"Hello \" + name + \". You are \" + age + \" years old.\"", "Hello name. You are age years old.", "Hello Alice. You are 20 years old.", "Hello 'Alice'. You are 20 years old.", "Error"], "answer": "Error"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>This fails because we cannot use <code>+</code> between the string <code>\"Hello Alice. You are \"</code> and the number <code>age</code>.</p>\n<p>Fix this by replacing all the string concatenations (+) with a single f-string.</p>", "name": "basic_f_string_exercise", "hints": ["<p>This is just like the given f-string example.</p>", "<p>Did you forget the <code>f</code>?</p>", "<p>How many pairs of curly brackets do you need?</p>"], "solution": {"tokens": ["name", " ", "=", " ", "\"Alice\"", "\n", "age", " ", "=", " ", "20", "\n", "print", "(", "f'Hello {name}. You are {age} years old.'", ")"], "maskedIndices": [12, 0, 15, 8, 4, 2, 10, 14, 6, 13], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}]}, {"index": 3, "text": "<p>In addition to variables, an f-string can actually contain any Python expression inside curly brackets.\nTry this in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"sa\">f</span><span class=\"s2\">\"2 * 3 + 4 is equal to </span><span class=\"si\">{</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n</span></code></pre>", "name": "eval_expr_inside_f_string", "hints": [], "solution": {"tokens": ["f\"2 * 3 + 4 is equal to {2 * 3 + 4}\""], "maskedIndices": [0], "mask": [true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 4, "text": "<p>As you can see we can define an f-string using double quotes too, like we can a normal string.\nAnd like quotes, f-strings are just notation. Once they are evaluated the computer forgets\nthat an f-string was used, it just stores the final result as a normal string.</p>\n<p>Here is a very broken program:</p>\n<pre><code class=\" copyable\">people = [\"Alice\", \"Bob\", \"Charlie\"]\nprint('There are' + people.length() + 'people waiting, the first one's name is' + people.1 + '.')\n<button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Fix it!\nYour solution should work for any list of strings named <code>people</code>.\nFor example, in the above case it should print:</p>\n<pre><code>There are 3 people waiting, the first one's name is Alice.\n</code></pre>", "name": "fix_broken_program", "hints": ["<p>There are four problems with the expression inside <code>print</code>.</p>", "<p>There is a problem with the syntax that finds the number of people.</p>", "<p>Then one of the strings has a problem with the quotes.</p>", "<p>Also there is a problem with the syntax that finds the first person's name.</p>", "<p>And you can't add strings and numbers together!</p>", "<p>Did you properly use curly brackets in your f-string?</p>"], "solution": {"tokens": ["print", "(", "f\"There are {len(people)} people waiting, the first one's name is {people[0]}.\"", ")"], "maskedIndices": [2, 3, 0, 1], "mask": [true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'Charlie'</span><span class=\"p\">]</span>\n</span></code></pre>"}]}, {"index": 5, "text": "<p>Excellent!</p>\n<p>From now on, you are encouraged to use f-strings instead of <code>+</code> to build up your strings where possible.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingNestedLoops": {"slug": "IntroducingNestedLoops", "title": "Introducing Nested Loops", "index": 36, "step_names": ["first_nested_loop", "times_table_exercise", "player_vs_player_exercise", "crack_password_exercise", "upside_down_triangle_exercise", "player_vs_player_bonus", "final_text"], "steps": [{"index": 0, "text": "<p>You've seen that the indented body of an <code>if</code> or a loop can contain any kind of statement, including more <code>if</code> statements and loops. In particular a loop can contain another loop. Here's an example:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">for</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"s2\">\"ABC\"</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">letter</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">letter</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"n\">number</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>This is called a <em>nested loop</em>. Nothing about it is really new, it's just worth understanding properly because it can be very useful for writing interesting programs.</p>", "name": "first_nested_loop", "hints": [], "solution": {"tokens": ["for", " ", "letter", " ", "in", " ", "\"ABC\"", ":", "\n", "    ", "print", "(", "letter", ")", "\n", "    ", "for", " ", "number", " ", "in", " ", "range", "(", "4", ")", ":", "\n", "        ", "print", "(", "f'{letter} {number}'", ")", "\n", "    ", "print", "(", "'---'", ")"], "maskedIndices": [31, 7, 25, 26, 6, 12, 10, 16, 37, 11, 38, 0, 24, 22, 35, 32, 18, 4, 29, 20, 30, 13, 23, 2, 36], "mask": [true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["A 0\nA 1\nA 2\nA 3\n---\nB 0\nB 1\nB 2\nB 3\n---\nC 0\nC 1\nC 2\nC 3\n---", "A\nA 0\nA 1\nA 2\nA 3\n---\nB\nB 0\nB 1\nB 2\nB 3\n---\nC\nC 0\nC 1\nC 2\nC 3\n---", "A 1\nA 2\nA 3\nA 4\n---\nB 1\nB 2\nB 3\nB 4\n---\nC 1\nC 2\nC 3\nC 4\n---", "A\nB\nC\n---\nA 0\nB 0\nC 0\n---\nA 1\nB 1\nC 1\n---\nA 2\nB 2\nC 2\n---\nA 3\nB 3\nC 3", "Error"], "answer": "A\nA 0\nA 1\nA 2\nA 3\n---\nB\nB 0\nB 1\nB 2\nB 3\n---\nC\nC 0\nC 1\nC 2\nC 3\n---"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Make sure you fully grasp what's going on. <code>print(letter)</code> and <code>print('---')</code> each run 3 times, because their indentation puts them in the <em>outer loop</em>. <code>print(f'{letter} {number}')</code> is called 3 \u00d7 4 = 12 times, because it's in the <em>inner loop</em> <code>for number in range(4):</code> which has 4 iterations but is itself in the outer loop so it runs 3 times.</p>\n<p>Let's put this to use! Suppose you're a teacher and you need to print out all the multiplication tables from 1 to 12 for your students. You don't want to write them manually, but you can write a program to do it for you! Your program output should look like this including the lines of dashes:</p>\n<pre><code>1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n1 x 10 = 10\n1 x 11 = 11\n1 x 12 = 12\n---\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20\n2 x 11 = 22\n2 x 12 = 24\n---\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n(you get the idea...)\n11 x 10 = 110\n11 x 11 = 121\n11 x 12 = 132\n---\n12 x 1 = 12\n12 x 2 = 24\n12 x 3 = 36\n12 x 4 = 48\n12 x 5 = 60\n12 x 6 = 72\n12 x 7 = 84\n12 x 8 = 96\n12 x 9 = 108\n12 x 10 = 120\n12 x 11 = 132\n12 x 12 = 144\n---\n</code></pre>", "name": "times_table_exercise", "hints": ["<p>You need to use a for loop inside a for loop.</p>", "<p>You need the numbers from 1 to 12.</p>", "<p>Whenever you need a sequence of consecutive numbers, use <code>range</code>.</p>", "<p>You want something like <code>for x in range(n):</code>.</p>", "<p>This will start with <code>x = 0</code>, but there's an easy workaround for that.</p>", "<p>You can just add 1 to <code>x</code>.</p>", "<p>Use <code>*</code> to multiply numbers.</p>", "<p>Use an f-string with several variables.</p>", "<p>Remember to print a line with the correct number of dashes after each section.</p>", "<p>Make sure each line is in the correct loop and has the right amount of indentation.</p>"], "solution": {"tokens": ["for", " ", "left", " ", "in", " ", "range", "(", "12", ")", ":", "\n", "    ", "left", " ", "+=", " ", "1", "\n", "    ", "for", " ", "right", " ", "in", " ", "range", "(", "12", ")", ":", "\n", "        ", "right", " ", "+=", " ", "1", "\n", "        ", "print", "(", "f'{left} x {right} = {left * right}'", ")", "\n", "    ", "print", "(", "'---'", ")"], "maskedIndices": [37, 35, 29, 9, 8, 4, 10, 47, 20, 33, 13, 49, 6, 41, 48, 43, 7, 2, 22, 24, 0, 46, 30, 26, 15, 27, 17, 40, 42, 28], "mask": [true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true], "lines": [{"id": "5", "content": "    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;---&#39;</span><span class=\"p\">)</span>"}, {"id": "3", "content": "        <span class=\"n\">right</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>"}, {"id": "4", "content": "        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">left</span><span class=\"si\">}</span><span class=\"s1\"> x </span><span class=\"si\">{</span><span class=\"n\">right</span><span class=\"si\">}</span><span class=\"s1\"> = </span><span class=\"si\">{</span><span class=\"n\">left</span> <span class=\"o\">*</span> <span class=\"n\">right</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>"}, {"id": "2", "content": "    <span class=\"k\">for</span> <span class=\"n\">right</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">):</span>"}, {"id": "0", "content": "<span class=\"k\">for</span> <span class=\"n\">left</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">):</span>"}, {"id": "1", "content": "    <span class=\"n\">left</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": ""}]}, {"index": 2, "text": "<p>Perfect!</p>\n<p>Next exercise: you're organising a tournament for a game, such as chess or tennis. You have a list of player names:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">players</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Charlie\"</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>Every player is going to play against every other player twice: once where they get the advantage (e.g. by moving or serving first) and once not. Print out all the match combinations like this:</p>\n<pre><code>Alice vs Bob\nAlice vs Charlie\nBob vs Alice\nBob vs Charlie\nCharlie vs Alice\nCharlie vs Bob\n</code></pre>\n<p>Note that \"Alice vs Bob\" and \"Bob vs Alice\" are both in the list, but there's no \"Alice vs Alice\" - we don't want anyone playing with themselves.</p>", "name": "player_vs_player_exercise", "hints": ["<p>Think about how you would do this manually and systematically, with a pencil and paper.</p>", "<p>You need to use a for loop inside a for loop.</p>", "<p>You need an <code>if</code> statement to check that the two players aren't the same person.</p>"], "solution": {"tokens": ["for", " ", "player1", " ", "in", " ", "players", ":", "\n", "    ", "for", " ", "player2", " ", "in", " ", "players", ":", "\n", "        ", "if", " ", "player1", " ", "!=", " ", "player2", ":", "\n", "            ", "print", "(", "f'{player1} vs {player2}'", ")"], "maskedIndices": [22, 6, 16, 32, 4, 0, 2, 17, 12, 31, 20, 30, 24, 26, 27, 7, 14, 33, 10], "mask": [true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">players</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'Charlie'</span><span class=\"p\">]</span>\n</span></code></pre>"}]}, {"index": 3, "text": "<p>For your next exercise, you need to crack a password. You know that it's exactly four letters long and that only a few letters are possible, which you've written down:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">letters</span> <span class=\"o\">=</span> <span class=\"s2\">\"ABCD\"</span>\n</span></code></pre>\n<p>You need to print out all possible passwords:</p>\n<pre><code>AAAA\nAAAB\nAAAC\nAAAD\nAABA\nAABB\n...skipping a few...\nDDDA\nDDDB\nDDDC\nDDDD\n</code></pre>", "name": "crack_password_exercise", "hints": ["<p>Think about how you would do this manually and systematically, with a pencil and paper.</p>", "<p>The fact that the password must be four letters long is very important. This would be a lot harder to solve if the password could be any given length.</p>", "<p>But the string <code>letters</code> might have any number of characters.</p>", "<p>If there are <code>n</code> different letters, then the number of possible passwords is <code>n^4 == n*n*n*n</code> because there are <code>n</code> possible letters for each position and they're all independent.</p>", "<p>Suppose again that <code>letters = \"ABCD\"</code>. Imagine you have all possible three-letter passwords. Now for each one, add an A at the end, or add a B, or a C, or a D. That's how you would get all possible four-letter passwords.</p>", "<p>Remember, a for loop can contain any statement, including another for loop.</p>", "<p>That applies to all for loops.</p>", "<p>One for loop inside another for loop is no longer enough.</p>", "<p>You have to go deeper.</p>"], "solution": {"tokens": ["for", " ", "c1", " ", "in", " ", "letters", ":", "\n", "    ", "for", " ", "c2", " ", "in", " ", "letters", ":", "\n", "        ", "for", " ", "c3", " ", "in", " ", "letters", ":", "\n", "            ", "for", " ", "c4", " ", "in", " ", "letters", ":", "\n", "                ", "print", "(", "c1", " ", "+", " ", "c2", " ", "+", " ", "c3", " ", "+", " ", "c4", ")"], "maskedIndices": [26, 16, 34, 41, 27, 40, 44, 36, 46, 55, 14, 24, 50, 52, 0, 4, 20, 2, 42, 54, 6, 32, 22, 12, 48, 17, 7, 10, 37, 30], "mask": [true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">letters</span> <span class=\"o\">=</span> <span class=\"s1\">'AB'</span>\n</span></code></pre>"}]}, {"index": 4, "text": "<p>Wow, you're basically a hacker now!</p>\n<p>One more exercise. Given a size:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n</span></code></pre>\n<p>Print out an 'upside down' triangle made of the plus sign <code>+</code> whose sides are as long as the given size, e.g:</p>\n<pre><code>+++++\n++++\n+++\n++\n+\n</code></pre>", "name": "upside_down_triangle_exercise", "hints": ["<p>How would you describe instructions to type in this triangle manually?</p>", "<p>Print a line of <code>size</code> plus signs, then <code>size - 1</code> plus signs, etc. down to 1 plus sign. For example print 5 <code>+</code>s, then 4 <code>+</code>s, then 3, 2, and 1.</p>", "<p>Break this down into subproblems.</p>", "<p>How do you print one line of <code>+</code>s of a given length, and how do you go through all the lengths?</p>", "<p>Building up a line of characters should be very familiar from previous exercises, the only difference is that you have to make it a given length instead of just the same length as another string.</p>", "<p>An easy way to do something <code>n</code> times is to loop over <code>range(n)</code>.</p>", "<p>You need to use a for loop inside a for loop.</p>", "<p>You need numbers that count down, like 5, 4, 3, 2, 1. There is a way to do this with <code>range</code>, and you can easily look it up, but it's also easy to use a normal range and do some very simple maths to convert numbers counting up into numbers counting down.</p>", "<p>What formula converts 0 into 5, 1 into 4, 2 into 3, etc?</p>"], "solution": {"tokens": ["for", " ", "i", " ", "in", " ", "range", "(", "size", ")", ":", "\n", "    ", "length", " ", "=", " ", "size", " ", "-", " ", "i", "\n", "    ", "line", " ", "=", " ", "''", "\n", "    ", "for", " ", "_", " ", "in", " ", "range", "(", "length", ")", ":", "\n", "        ", "line", " ", "+=", " ", "'+'", "\n", "    ", "print", "(", "line", ")"], "maskedIndices": [0, 51, 41, 46, 37, 40, 44, 54, 17, 38, 9, 15, 53, 13, 4, 39, 8, 35, 2, 31, 26, 24, 10, 28, 19, 7, 48, 6, 52, 21, 33], "mask": [true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": [{"id": "4", "content": "        <span class=\"n\">line</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;+&#39;</span>"}, {"id": "2", "content": "    <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>"}, {"id": "0", "content": "<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>"}, {"id": "5", "content": "    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>"}, {"id": "3", "content": "    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">):</span>"}, {"id": "1", "content": "    <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">size</span> <span class=\"o\">-</span> <span class=\"n\">i</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</span></code></pre>"}]}, {"index": 5, "text": "<p>Wow, you're an artist too!</p>\n<p>If you'd like, you can just continue to the <a href=\"#IntroducingBirdseye\">next page</a> now. Or you can do a bonus challenge!</p>\n<p>Like the earlier exercise, you're organising a tournament for a game. You have a list of player names:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">players</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Charlie'</span><span class=\"p\">,</span> <span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"s1\">'Dylan'</span><span class=\"p\">,</span> <span class=\"s1\">'Bob'</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>This time, each pair of players should only appear once. Specifically, print only those pairs that are in\nthe same left-to-right order as they are in <code>players</code>, starting with pairs containing the leftmost person\nin <code>players</code> and moving right. For example, for the above, your program should print</p>\n<pre><code>Charlie vs Alice\nCharlie vs Dylan\nCharlie vs Bob\nAlice vs Dylan\nAlice vs Bob\nDylan vs Bob\n</code></pre>", "name": "player_vs_player_bonus", "hints": ["<p>You'll need a for loop inside a for loop like before.</p>", "<p>This time something like <code>for player1 in players:</code> won't be enough.</p>", "<p>Your program needs to use the <em>positions</em> of the players in the list.</p>", "<p>That means you need to loop over the positions and use indexing (subscripting) to access the list entries.</p>", "<p>To loop over the positions, use <code>range</code>...</p>", "<p>...and <code>len</code>.</p>", "<p>Look at the desired output: <code>Charlie vs Alice</code>: <code>Charlie</code> comes before <code>Alice</code> in the <code>players</code> list.</p>", "<p>We don't want to print <code>Alice vs Charlie</code> because <code>Alice</code> comes AFTER <code>Charlie</code> in <code>players</code>.</p>", "<p>The only pairs we want to print are those where the left player comes before the right player in the list.</p>", "<p>How can we express this relation in terms of the list indices of the two for-loops?</p>", "<p>You need to use a comparison operator.</p>", "<p>Once you figure out the relation, you can express it with an <code>if</code> statement.</p>"], "solution": {"tokens": ["for", " ", "i", " ", "in", " ", "range", "(", "len", "(", "players", ")", ")", ":", "\n", "    ", "for", " ", "j", " ", "in", " ", "range", "(", "len", "(", "players", ")", ")", ":", "\n", "        ", "if", " ", "i", " ", "<", " ", "j", ":", "\n", "            ", "print", "(", "f'{players[i]} vs {players[j]}'", ")"], "maskedIndices": [34, 24, 20, 8, 39, 43, 25, 6, 29, 28, 22, 18, 44, 4, 42, 16, 0, 45, 26, 10, 27, 9, 13, 23, 36, 11, 7, 38, 12, 32, 2], "mask": [true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">players</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"s1\">'Charlie'</span><span class=\"p\">]</span>\n</span></code></pre>"}]}, {"index": 6, "text": "<p>Excellent! The solution goes like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">players</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Charlie'</span><span class=\"p\">,</span> <span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"s1\">'Dylan'</span><span class=\"p\">,</span> <span class=\"s1\">'Bob'</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">players</span><span class=\"p\">)):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">players</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">players</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> vs </span><span class=\"si\">{</span><span class=\"n\">players</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingBirdseye": {"slug": "IntroducingBirdseye", "title": "Understanding Programs with <code>birdseye</code>", "index": 37, "step_names": ["first_birdseye_example", "birdseye_loop_example", "final_text"], "steps": [{"index": 0, "text": "<p>You've seen <code>snoop</code> and Python Tutor. futurecoder comes with one last tool to analyse programs as they run, called <code>birdseye</code>.</p>\n<p>Here's an example program to run. Copy it into the editor and click the <code>birdseye</code> button. This will open a new browser tab with the visualisation.</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">c</span> <span class=\"o\">*</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "first_birdseye_example", "hints": [], "solution": {"tokens": ["a", " ", "=", " ", "2", "\n", "b", " ", "=", " ", "3", "\n", "c", " ", "=", " ", "4", "\n", "d", " ", "=", " ", "5", "\n", "print", "(", "a", " ", "*", " ", "b", " ", "+", " ", "c", " ", "*", " ", "d", ")"], "maskedIndices": [36, 38, 24, 28, 12, 6, 10, 8, 4, 26, 18, 16, 2, 34, 22, 20, 32, 39, 30, 0, 25, 14], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>With your code in the editor, click the <code>birdseye</code> button.</p>"}]}, {"index": 1, "text": "<p>While the other tools show how code runs line by line and the values of variables, <code>birdseye</code> shows you the value of every expression in a program. This lets you see how a complex expression is broken down into smaller sub-expressions\nand what the value of each one is.</p>\n<p>Hover your mouse over the various boxed expressions in the last line of the program.\nAs each box is highlighted, its value is shown at the bottom of the screen. Clicking on the box will stick it on a panel so you can see several expression values at once and move your mouse around freely.</p>\n<p>In this case <code>birdseye</code> shows that the expression:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">c</span> <span class=\"o\">*</span> <span class=\"n\">d</span>\n</span></code></pre>\n<p>is broken into</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">*</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>rather than</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">((</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">d</span>\n</span></code></pre>\n<p>In other words, Python follows the usual order of operations in maths, rather than just evaluating from left to right.</p>\n<p>Note that there are some expressions that <code>birdseye</code> doesn't put in a box. In this case <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, and <code>print</code> are all expressions as well, but their values are obvious and boxing them would just be clutter.</p>\n<p>Here's a more complicated example to try out:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'Amazing'</span>\n<span class=\"n\">vowels</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">consonants</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"n\">word</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">letter</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"s1\">'aeiou'</span><span class=\"p\">:</span>\n        <span class=\"n\">vowels</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">letter</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">consonants</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">letter</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vowels</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">consonants</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "birdseye_loop_example", "hints": [], "solution": {"tokens": ["word", " ", "=", " ", "'Amazing'", "\n", "vowels", " ", "=", " ", "[", "]", "\n", "consonants", " ", "=", " ", "[", "]", "\n", "for", " ", "letter", " ", "in", " ", "word", ":", "\n", "    ", "if", " ", "letter", ".", "lower", "(", ")", " ", "in", " ", "'aeiou'", ":", "\n", "        ", "vowels", ".", "append", "(", "letter", ")", "\n", "    ", "else", ":", "\n", "        ", "consonants", ".", "append", "(", "letter", ")", "\n", "print", "(", "vowels", ")", "\n", "print", "(", "consonants", ")"], "maskedIndices": [65, 49, 69, 4, 41, 57, 20, 30, 63, 26, 60, 6, 27, 46, 58, 22, 56, 61, 32, 0, 2, 53, 8, 18, 24, 45, 11, 70, 40, 47, 10, 44, 34, 33, 17, 71, 52, 13, 36, 35, 48, 64, 59, 15, 38, 66, 68], "mask": [true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>With your code in the editor, click the <code>birdseye</code> button.</p>"}]}, {"index": 2, "text": "<p>Note that:</p>\n<ol>\n<li>There's a pair of arrows next to the for loop. Click on them to navigate through the loop in time and see what happened in different iterations.</li>\n<li>Code that doesn't run in an iteration because of the <code>if</code> is greyed out. The expressions within have no values because they weren't evaluated.</li>\n<li>The values recorded for the expressions <code>vowels</code> and <code>consonants</code> depend on which box you look at. In the lines after the loop, they contain all the letters, but inside the loop they only contain some, and exactly how many depends on which iteration you're on.</li>\n<li>In <code>vowels.append(letter)</code>, you see what the values of those variables were <em>at that moment</em>. That means that <code>letter</code> is about to be appended to <code>vowels</code> but this hasn't happened yet, so <code>vowels</code> doesn't contain <code>letter</code>.</li>\n</ol>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingNestedLists": {"slug": "IntroducingNestedLists", "title": "Introducing Nested Lists", "index": 38, "step_names": ["string_list_exercise", "double_subscripting", "double_subscripting_exercise", "first_nested_list_example", "triple_subscripting", "final_text"], "steps": [{"index": 0, "text": "<p>Exercise: given a list of strings, print the first letter of the second string in the list. For example, given:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"def\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ghi\"</span><span class=\"p\">]</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>you should print <code>d</code>.</p>", "name": "string_list_exercise", "hints": ["<p>How can you access the second string in the list?</p>", "<p>Then how do you access a particular letter in a string?</p>", "<p>Remember that the indexing of lists and strings are very similar.</p>"], "solution": {"tokens": ["string", " ", "=", " ", "strings", "[", "1", "]", "\n", "print", "(", "string", "[", "0", "]", ")"], "maskedIndices": [0, 5, 12, 13, 11, 4, 15, 10, 9, 7, 14, 6, 2], "mask": [true, false, true, false, true, true, true, true, false, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'abc'</span><span class=\"p\">,</span> <span class=\"s1\">'def'</span><span class=\"p\">,</span> <span class=\"s1\">'ghi'</span><span class=\"p\">]</span>\n</span></code></pre>"}]}, {"index": 1, "text": "<p>You may have solved it like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"n\">strings</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</span></code></pre>\n<p>There's a shorter way. <code>strings[1]</code> is an expression like any other, and subscripting like <code>[0]</code>\ncan be used on any expression, not just variables.\nSo you can skip the intermediate variable and just do it in one line:</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">strings</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</span></code></pre>\n<p>Take a good look at this syntax. If it looks new and fancy, it's not.\nIt's just the usual syntax for subscripting, applied twice.\nTry it in <code>birdseye</code> to see how Python breaks it down into smaller pieces.</p>", "name": "double_subscripting", "hints": [], "solution": {"tokens": ["strings", " ", "=", " ", "[", "\"abc\"", ",", " ", "\"def\"", ",", " ", "\"ghi\"", "]", "\n", "print", "(", "strings", "[", "1", "]", "[", "0", "]", ")"], "maskedIndices": [21, 19, 22, 4, 17, 14, 15, 23, 11, 5, 8, 0, 16, 20, 6, 18, 12, 9, 2], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Run <code>print(strings[1][0])</code> or something similar using <code>birdseye</code> to see how it works.</p>"}, {"type": "custom", "message": "<p>With your code in the editor, click the <code>birdseye</code> button.</p>"}]}, {"index": 2, "text": "<p>Using this syntax, modify the program to print the last letter of the second-to-last string in the list <code>strings</code>.\nYou must use a single expression like above, and you are not allowed to use <code>len</code>.\nYour solution should work for any non-empty list of strings.\nFor the previous example input it should print <code>f</code>.</p>", "name": "double_subscripting_exercise", "hints": ["<p>This is very similar to the previous exercise.</p>", "<p>Do you remember how to access the last position of a list (without using <code>len</code>)?</p>", "<p>Similarly how do you access the second-to-last position in a list?</p>", "<p>If you can't remember, you can Google it!</p>", "<p>Indexing works similarly on lists and strings.</p>", "<p>Do you get an <code>index out of range</code> error? Is it for a string, or a list? Why?</p>", "<p>Make sure you are not confusing the order of the list index and the string index.</p>", "<p>Use <code>birdseye</code> if you're having trouble.</p>"], "solution": {"tokens": ["print", "(", "strings", "[", "-", "2", "]", "[", "-", "1", "]", ")"], "maskedIndices": [8, 7, 11, 5, 9, 6, 1, 0, 2, 10, 4, 3], "mask": [true, true, true, true, true, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'abc'</span><span class=\"p\">,</span> <span class=\"s1\">'de'</span><span class=\"p\">,</span> <span class=\"s1\">'fghi'</span><span class=\"p\">,</span> <span class=\"s1\">'jklmn'</span><span class=\"p\">,</span> <span class=\"s1\">'o'</span><span class=\"p\">]</span>\n</span></code></pre>"}]}, {"index": 3, "text": "<p>Well done!</p>\n<p>Applying subscripting twice can be even more powerful.\nWe can use it on not only a list of strings, but on <em>a list of lists</em> too.\nFor example, what does the following program print?</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"s1\">'there'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'how'</span><span class=\"p\">,</span> <span class=\"s1\">'are'</span><span class=\"p\">,</span> <span class=\"s1\">'you'</span><span class=\"p\">]]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">strings</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</span></code></pre>", "name": "first_nested_list_example", "hints": [], "solution": {"tokens": ["strings", " ", "=", " ", "[", "[", "'hello'", ",", " ", "'there'", "]", ",", " ", "[", "'how'", ",", " ", "'are'", ",", " ", "'you'", "]", "]", "\n", "print", "(", "strings", "[", "1", "]", "[", "0", "]", ")"], "maskedIndices": [26, 0, 15, 18, 28, 21, 4, 7, 17, 31, 33, 10, 5, 11, 9, 29, 22, 24, 32, 30, 14, 27, 6, 25, 20, 2, 13], "mask": [true, false, true, false, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": ["hello", "there", "how", "are", "you", "['hello', 'there']", "['how', 'are', 'you']", "h", "t", "e", "a", "Error"], "answer": "how"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 4, "text": "<p>As you can see Python allows us to have <em>nested lists</em>: a list where each element is another list (we refer to them as <em>sublists</em>).</p>\n<p>We can use subscripting even more than twice.\nWrite a program that takes a nested list <code>strings</code> like above,\nand prints the <strong>first letter of the third string in the second sublist</strong>.\nUse only a single expression like in the previous exercise.\nFor example, for the list above, it should print <code>y</code>.</p>", "name": "triple_subscripting", "hints": ["<p>This is very similar to the previous exercises.</p>", "<p>How many times do you need to use subscripting?</p>", "<p>First you need to access a sublist.</p>", "<p>Then a string in that sublist.</p>", "<p>Then a letter in that string.</p>", "<p>Use <code>birdseye</code> if you're having trouble.</p>"], "solution": {"tokens": ["print", "(", "strings", "[", "1", "]", "[", "2", "]", "[", "0", "]", ")"], "maskedIndices": [2, 7, 3, 9, 6, 0, 12, 5, 1, 11, 10, 8, 4], "mask": [true, true, true, true, true, true, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"s1\">'there'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'how'</span><span class=\"p\">,</span> <span class=\"s1\">'are'</span><span class=\"p\">,</span> <span class=\"s1\">'you'</span><span class=\"p\">]]</span>\n</span></code></pre>"}]}, {"index": 5, "text": "<p>Excellent! You now understand nested subscripting very well.</p>\n<p>We can still use all the list methods and functions we learned before.\nFor example we can add a new word to the last sublist of <code>strings</code> with <code>append</code>,\nto come after <code>'you'</code>:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">strings</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"today?\"</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>After all, the sublist <code>strings[1]</code> is still a list like any other!</p>\n<p>On the next page we will learn about looping over nested lists.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "LoopingOverNestedLists": {"slug": "LoopingOverNestedLists", "title": "Looping Over Nested Lists", "index": 39, "step_names": ["nested_list_nested_loop_example", "nested_list_loop_python_tutor", "string_contains_word_exercise", "sublist_contains_word_exercise", "list_contains_word_exercise", "zip_strings_list_exercise", "zip_longest_strings_exercise", "final_text"], "steps": [{"index": 0, "text": "<p>You can use a nested loop to iterate over each element and sub-element of a nested list.\nFor example, consider this nested list.</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[]]</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Click the button to copy the list into the editor, then type in the following nested loop.</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">for</span> <span class=\"n\">sublist</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">sublist</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---'</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Look carefully at the code. Note that the outer loop creates a variable <code>sublist</code>\nand the inner loop iterates over the same variable. This is a common pattern.\nNow run the code.</p>", "name": "nested_list_nested_loop_example", "hints": [], "solution": {"tokens": ["numbers", " ", "=", " ", "[", "[", "1", ",", " ", "2", ",", " ", "3", "]", ",", " ", "[", "4", ",", " ", "5", "]", ",", " ", "[", "6", "]", ",", " ", "[", "]", "]", "\n", "for", " ", "sublist", " ", "in", " ", "numbers", ":", "\n", "    ", "for", " ", "num", " ", "in", " ", "sublist", ":", "\n", "        ", "print", "(", "num", ")", "\n", "    ", "print", "(", "'---'", ")"], "maskedIndices": [18, 27, 30, 12, 22, 0, 14, 4, 43, 55, 29, 47, 59, 20, 49, 45, 33, 62, 6, 16, 40, 37, 61, 39, 25, 50, 17, 56, 7, 9, 31, 53, 54, 26, 21, 10, 5, 13, 2, 35, 24, 60], "mask": [true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["1\n---\n2\n---\n3\n---\n4\n---\n5\n---\n6\n---", "1\n2\n3\n---\n4\n5\n---\n6\n---\n---", "1\n2\n3\n---\n4\n5\n---\n6\n---", "1 2 3\n---\n4 5\n---\n6\n---\n---", "1 2 3\n---\n4 5\n---\n6\n---", "Error"], "answer": "1\n2\n3\n---\n4\n5\n---\n6\n---\n---"}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run a single program consisting of the two parts above combined.\nThey're separated so that you don't need to type in the <code>numbers = [...]</code> part,\nbut typing in the nested loop part is best for learning.\nMake sure the indentation is correct.</p>"}]}, {"index": 1, "text": "<p>Now run the same program again in Python Tutor.</p>\n<p>Examine what <code>numbers</code> looks like, and what <code>numbers[0]</code> up to <code>numbers[3]</code> are.\nLook at how <code>sublist</code> and <code>num</code> variables advance.</p>", "name": "nested_list_loop_python_tutor", "hints": [], "solution": {"tokens": ["numbers", " ", "=", " ", "[", "[", "1", ",", " ", "2", ",", " ", "3", "]", ",", " ", "[", "4", ",", " ", "5", "]", ",", " ", "[", "6", "]", ",", " ", "[", "]", "]", "\n", "for", " ", "sublist", " ", "in", " ", "numbers", ":", "\n", "    ", "for", " ", "num", " ", "in", " ", "sublist", ":", "\n", "        ", "print", "(", "num", ")", "\n", "    ", "print", "(", "'---'", ")"], "maskedIndices": [14, 5, 43, 9, 30, 27, 59, 35, 24, 25, 56, 40, 4, 10, 62, 39, 13, 50, 33, 37, 2, 47, 17, 49, 16, 20, 31, 18, 6, 0, 26, 45, 61, 7, 60, 29, 12, 55, 53, 22, 54, 21], "mask": [true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run a single program consisting of the two parts above combined.\nThey're separated so that you don't need to type in the <code>numbers = [...]</code> part,\nbut typing in the nested loop part is best for learning.\nMake sure the indentation is correct.</p>"}, {"type": "custom", "message": "<p>With your code in the editor, click the Python Tutor button.</p>"}]}, {"index": 2, "text": "<p>Now let's solve some problems using this kind of loop.</p>\n<p>Suppose we have a nested list of strings like the one below,\nand we want to search for a particular <code>word</code> deep within the list.</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"s2\">\"hello there\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"how are you\"</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"s2\">\"goodbye world\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"hello world\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s2\">\"hello\"</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>You can imagine that <code>strings</code> represents a book, where each sublist is a page and each string within\nis a line in that page.\nIt could also represent a library, where each list is a book, and each string is a page.</p>\n<p>Write a program to print every string that contains <code>word</code>.\nIt should work for any <code>word</code> and <code>strings</code>. For the example above, it should print</p>\n<pre><code>hello there\nhello world\n</code></pre>\n<p>Remember that there is a specific way to check if a string contains another string. If you can't remember how, Google it!</p>", "name": "string_contains_word_exercise", "hints": ["<p>How do you check if a string contains a word?</p>", "<p>Make sure to check whether <strong>the string</strong> contains the word, not the sublist.</p>", "<p>How can you access each string in each sublist of a nested list?</p>", "<p>You need to use a nested loop.</p>", "<p>The loops should follow the same pattern as the example at the beginning of the page.</p>"], "solution": {"tokens": ["for", " ", "sublist", " ", "in", " ", "strings", ":", "\n", "    ", "for", " ", "string", " ", "in", " ", "sublist", ":", "\n", "        ", "if", " ", "word", " ", "in", " ", "string", ":", "\n", "            ", "print", "(", "string", ")"], "maskedIndices": [32, 20, 0, 26, 14, 17, 31, 12, 27, 24, 2, 6, 16, 33, 30, 4, 22, 7, 10], "mask": [true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">'hello there'</span><span class=\"p\">,</span> <span class=\"s1\">'how are you'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'goodbye world'</span><span class=\"p\">,</span> <span class=\"s1\">'hello world'</span><span class=\"p\">]]</span>\n<span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'hello'</span>\n</span></code></pre>"}]}, {"index": 3, "text": "<p>Nice!</p>\n<p>Now let's change the exercise slightly. This time the output should tell us which <em>sublists</em> contain <code>word</code>,\nrather than which inner strings. In particular, we want to print a boolean for each sublist:\n<code>True</code> if the sublist contains the word in any of its strings, <code>False</code> if it's not there at all.</p>\n<p>Given these example inputs:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"s2\">\"hello there\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"how are you\"</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"s2\">\"goodbye world\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"hello world\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s2\">\"goodbye\"</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>then your program should print</p>\n<pre><code class=\"codehilite\"><span><span class=\"kc\">False</span>\n<span class=\"kc\">True</span>\n</span></code></pre>\n<p>Note that <code>word in sublist</code> won't work. For example, <code>\"hello\" in [\"hello there\", \"how are you\"]</code> is <code>False</code>\nbecause <code>\"hello\"</code> is not <em>equal</em> to either of the two elements of that list, even though it is in one of them.</p>", "name": "sublist_contains_word_exercise", "hints": ["<p>For each sublist, define a boolean.</p>", "<p>Go through a sublist, update the boolean accordingly.</p>", "<p>Only print the boolean once for each sublist.</p>", "<p>What should be the initial value for the boolean?</p>", "<p>What if one of the sublists is empty? What should you print for that sublist?</p>", "<p>If you find the word in a string, the boolean should be set to <code>True</code>.</p>", "<p>What if a string doesn't contain the word?</p>", "<p>Doesn't matter! It doesn't change whether any other string might contain the word.</p>", "<p>In other words, don't set the boolean to <code>False</code> except at the beginning.</p>"], "solution": {"tokens": ["for", " ", "sublist", " ", "in", " ", "strings", ":", "\n", "    ", "present", " ", "=", " ", "False", "\n", "    ", "for", " ", "string", " ", "in", " ", "sublist", ":", "\n", "        ", "if", " ", "word", " ", "in", " ", "string", ":", "\n", "            ", "present", " ", "=", " ", "True", "\n", "    ", "print", "(", "present", ")"], "maskedIndices": [7, 6, 34, 24, 37, 21, 46, 0, 23, 19, 29, 31, 14, 45, 2, 4, 27, 39, 33, 47, 12, 44, 17, 41, 10], "mask": [true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true], "lines": [{"id": "2", "content": "    <span class=\"k\">for</span> <span class=\"n\">string</span> <span class=\"ow\">in</span> <span class=\"n\">sublist</span><span class=\"p\">:</span>"}, {"id": "3", "content": "        <span class=\"k\">if</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">string</span><span class=\"p\">:</span>"}, {"id": "5", "content": "    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">present</span><span class=\"p\">)</span>"}, {"id": "4", "content": "            <span class=\"n\">present</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>"}, {"id": "0", "content": "<span class=\"k\">for</span> <span class=\"n\">sublist</span> <span class=\"ow\">in</span> <span class=\"n\">strings</span><span class=\"p\">:</span>"}, {"id": "1", "content": "    <span class=\"n\">present</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">'hello there'</span><span class=\"p\">,</span> <span class=\"s1\">'how are you'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'goodbye world'</span><span class=\"p\">,</span> <span class=\"s1\">'hello world'</span><span class=\"p\">]]</span>\n<span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'goodbye'</span>\n</span></code></pre>"}]}, {"index": 4, "text": "<p>Well done!</p>\n<p>Next, print only one boolean to indicate if <code>word</code> is present in any string in the entire nested list at all. For example, if</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"s2\">\"hello there\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"how are you\"</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"s2\">\"goodbye world\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"hello world\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s2\">\"Python\"</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>your program should print <code>False</code>.</p>", "name": "list_contains_word_exercise", "hints": ["<p>This is very similar to the previous exercise.</p>", "<p>When should you print the boolean?</p>", "<p>Remember you want to print it only once.</p>", "<p>Instead of defining a boolean for each sublist, define only one boolean for the entire list.</p>", "<p>When and how should you modify the boolean?</p>"], "solution": {"tokens": ["present", " ", "=", " ", "False", "\n", "for", " ", "sublist", " ", "in", " ", "strings", ":", "\n", "    ", "for", " ", "string", " ", "in", " ", "sublist", ":", "\n", "        ", "if", " ", "word", " ", "in", " ", "string", ":", "\n", "            ", "present", " ", "=", " ", "True", "\n", "print", "(", "present", ")"], "maskedIndices": [26, 22, 6, 10, 38, 4, 43, 28, 40, 42, 33, 16, 0, 30, 23, 44, 13, 18, 32, 45, 12, 2, 36, 20, 8], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true], "lines": [{"id": "2", "content": "    <span class=\"k\">for</span> <span class=\"n\">string</span> <span class=\"ow\">in</span> <span class=\"n\">sublist</span><span class=\"p\">:</span>"}, {"id": "4", "content": "            <span class=\"n\">present</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>"}, {"id": "5", "content": "<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">present</span><span class=\"p\">)</span>"}, {"id": "3", "content": "        <span class=\"k\">if</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">string</span><span class=\"p\">:</span>"}, {"id": "0", "content": "<span class=\"n\">present</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>"}, {"id": "1", "content": "<span class=\"k\">for</span> <span class=\"n\">sublist</span> <span class=\"ow\">in</span> <span class=\"n\">strings</span><span class=\"p\">:</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">'hello there'</span><span class=\"p\">,</span> <span class=\"s1\">'how are you'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'goodbye world'</span><span class=\"p\">,</span> <span class=\"s1\">'hello world'</span><span class=\"p\">]]</span>\n<span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s1\">'are'</span>\n</span></code></pre>"}]}, {"index": 5, "text": "<p>Excellent!</p>\n<p><a href=\"#GettingElementsAtPositionExercises\">Earlier in the course</a> there was an exercise\nto print two strings vertically side by side, like this:</p>\n<pre><code>H W\ne o\nl r\nl l\no d\n</code></pre>\n<p>Now we're going to generalize this to a list of strings, rather than just two.</p>\n<p>For this exercise you are given a list of strings of <strong>equal length</strong>.\nWrite a program that prints the first letter of each string on one line,\nthen the second letter of each string on the next line, and so on. For example, if</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"def\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ghi\"</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>then your program should print</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">adg</span>\n<span class=\"n\">beh</span>\n<span class=\"n\">cfi</span>\n</span></code></pre>\n<p>Your program should work for any such list. In particular, if you use the following list,\nyou'll discover a hidden message from the Zen of Python!</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"  b n\"</span><span class=\"p\">,</span> <span class=\"s2\">\"f ete\"</span><span class=\"p\">,</span> <span class=\"s2\">\"liths\"</span><span class=\"p\">,</span> <span class=\"s2\">\"astat\"</span><span class=\"p\">,</span> <span class=\"s2\">\"t ene\"</span><span class=\"p\">,</span> <span class=\"s2\">\"  r d\"</span><span class=\"p\">]</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Note that this time you shouldn't add spaces between letters in the output.</p>", "name": "zip_strings_list_exercise", "hints": ["<p>This is NOT similar to the previous exercises on this page.</p>", "<p>Think about the solution when there's just two strings. How can you generalize it to a list of strings?</p>", "<p>You'll need to go through the first letters, then the second letters, and so on.</p>", "<p>You'll have to use a loop, but how long should the loop take?</p>", "<p>Remember that strings in the list have equal lengths.</p>", "<p>For each position (first, second etc.) define a new string.</p>", "<p>What should that string be initially?</p>", "<p>For each position (first, second etc.) you'll have to go through each string in the list.</p>", "<p>You'll need another loop inside the one you have.</p>"], "solution": {"tokens": ["for", " ", "i", " ", "in", " ", "range", "(", "len", "(", "strings", "[", "0", "]", ")", ")", ":", "\n", "    ", "line", " ", "=", " ", "\"\"", "\n", "    ", "for", " ", "string", " ", "in", " ", "strings", ":", "\n", "        ", "line", " ", "+=", " ", "string", "[", "i", "]", "\n", "    ", "print", "(", "line", ")"], "maskedIndices": [10, 40, 23, 21, 7, 19, 13, 8, 9, 2, 14, 32, 46, 26, 0, 12, 43, 38, 15, 6, 49, 47, 42, 33, 16, 30, 36, 4, 11, 41, 48, 28], "mask": [true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'abc'</span><span class=\"p\">,</span> <span class=\"s1\">'def'</span><span class=\"p\">,</span> <span class=\"s1\">'ghi'</span><span class=\"p\">]</span>\n</span></code></pre>"}]}, {"index": 6, "text": "<p>Excellent! If you'd like, you can just continue to the <a href=\"#DefiningFunctions\">next page</a> now.\nOr you can do a bonus challenge!</p>\n<p>Now let's generalize the previous exercise to strings of unequal length. Once again you are given a list of strings.\nLike before, write a program that prints the first letter of each string together on one line,\nthen the second letters together on the next line, and so on.\nBut this time, if a string does not have enough letters, it should print a space.</p>\n<p>For example, if</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"abcqwe\"</span><span class=\"p\">,</span> <span class=\"s2\">\"def\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ghiq\"</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>your program should print</p>\n<pre><code>adg\nbeh\ncfi\nq q\nw\ne\n</code></pre>", "name": "zip_longest_strings_exercise", "hints": ["<p>Since the strings can have different lengths, this is a bit tricky.</p>", "<p>For how long should your outer loop go this time?</p>", "<p>Before you start handling the strings, it might be a good idea to find the longest string length first.</p>", "<p>The rest is very similar to the previous exercise.</p>", "<p>The only difference is that now you have to determine whether to add a letter from a string, or a space.</p>"], "solution": {"tokens": ["lengths", " ", "=", " ", "[", "]", "\n", "for", " ", "string", " ", "in", " ", "strings", ":", "\n", "    ", "lengths", ".", "append", "(", "len", "(", "string", ")", ")", "\n", "length", " ", "=", " ", "max", "(", "lengths", ")", "\n", "\n", "for", " ", "i", " ", "in", " ", "range", "(", "length", ")", ":", "\n", "    ", "line", " ", "=", " ", "\"\"", "\n", "    ", "for", " ", "string", " ", "in", " ", "strings", ":", "\n", "        ", "if", " ", "i", " ", ">=", " ", "len", "(", "string", ")", ":", "\n", "            ", "line", " ", "+=", " ", "\" \"", "\n", "        ", "else", ":", "\n", "            ", "line", " ", "+=", " ", "string", "[", "i", "]", "\n", "    ", "print", "(", "line", ")"], "maskedIndices": [77, 52, 88, 44, 76, 25, 45, 98, 101, 93, 67, 18, 20, 95, 57, 27, 41, 34, 91, 69, 63, 23, 13, 61, 21, 0, 9, 19, 47, 7, 43, 96, 75, 22, 11, 4, 74, 39, 29, 14, 59, 54, 80, 46, 102, 103, 82, 71, 87, 64, 33, 17, 73, 37, 104, 32, 2, 5, 31, 84, 50, 24, 97], "mask": [true, false, true, false, true, true, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'abcqwe'</span><span class=\"p\">,</span> <span class=\"s1\">'def'</span><span class=\"p\">,</span> <span class=\"s1\">'ghiq'</span><span class=\"p\">]</span>\n</span></code></pre>"}]}, {"index": 7, "text": "<p>You have mastered nested lists and how to combine them with nested loops.\nBrilliant! You now have extremely powerful programming tools in your tool belt.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "DefiningFunctions": {"slug": "DefiningFunctions", "title": "Defining Functions", "index": 40, "step_names": ["define_greet", "how_are_you", "change_function_name", "change_parameter_name", "print_twice_exercise", "print_many", "swap_parameters", "final_text"], "steps": [{"index": 0, "text": "<p>You've seen how to call functions such as <code>print()</code> and <code>len()</code>. Now you're going to learn how to write your own\nfunctions that you or other people can use. This is very important as programs get bigger and more complicated.</p>\n<p>Here's a simple example:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Hello </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">!\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">greet</span><span class=\"p\">(</span><span class=\"s2\">\"Alice\"</span><span class=\"p\">)</span>\n<span class=\"n\">greet</span><span class=\"p\">(</span><span class=\"s2\">\"Bob\"</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>This defines a function called <code>greet</code> which accepts one parameter. Below the definition, we call the function twice.\nRun the code to see what happens.</p>", "name": "define_greet", "hints": [], "solution": {"tokens": ["def", " ", "greet", "(", "name", ")", ":", "\n", "    ", "print", "(", "f\"Hello {name}!\"", ")", "\n", "\n", "greet", "(", "\"Alice\"", ")", "\n", "greet", "(", "\"Bob\"", ")"], "maskedIndices": [6, 4, 17, 20, 5, 22, 11, 9, 0, 16, 3, 21, 18, 12, 2, 15, 23, 10], "mask": [true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>A function definition is a compound statement. Like <code>if</code> and <code>for</code>, it has a header line followed by an indented body\nwhich can contain one or more statements.</p>\n<p>Add another statement to the function so that it looks like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Hello </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">!\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"How are you?\"</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Then run the program again.</p>", "name": "how_are_you", "hints": [], "solution": {"tokens": ["def", " ", "greet", "(", "name", ")", ":", "\n", "    ", "print", "(", "f\"Hello {name}!\"", ")", "\n", "    ", "print", "(", "\"How are you?\"", ")", "\n", "\n", "greet", "(", "\"Alice\"", ")", "\n", "greet", "(", "\"Bob\"", ")"], "maskedIndices": [5, 28, 3, 18, 22, 11, 15, 2, 24, 12, 0, 10, 29, 26, 17, 9, 27, 4, 21, 23, 16, 6], "mask": [true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["Hello Alice!\nHow are you?\nHello Bob!\nHow are you?", "Hello Alice!\nHello Bob!\nHow are you?", "Hello Alice!\nHow are you?\nHello Bob!", "Error"], "answer": "Hello Alice!\nHow are you?\nHello Bob!\nHow are you?"}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Add <code>print(\"How are you?\")</code> after <code>print(f\"Hello {name}!\")</code> with the same indentation.\nKeep the two calls to <code>greet</code> after the definition as is.</p>"}]}, {"index": 2, "text": "<p>Note how the output of the program changed. <code>How are you?</code> is printed twice. You can think of the whole program as being\nequivalent to this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Alice\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Hello </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">!\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"How are you?\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Bob\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Hello </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">!\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"How are you?\"</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>This shows one of the most useful things about functions. They let you reuse the same code multiple times without\nhaving to repeat yourself. It's like writing a program within a program.</p>\n<p>The header line of a function definition always has these parts:</p>\n<ol>\n<li>The special keyword <code>def</code>, followed by a space.</li>\n<li>The name of the function. This is like a variable name - you can choose the name you want, but there are some constraints,\ne.g. it can't contain a space.</li>\n<li>A pair of parentheses <code>(</code> and <code>)</code></li>\n<li>Zero or more parameter names between the parentheses, separated by commas if there's more than one. Here we have\none parameter called <code>name</code>.</li>\n<li>A colon <code>:</code></li>\n</ol>\n<p>Let's do some simple exercises. Change the name of the function from <code>greet</code> to <code>say_hello</code>.\nMake sure the whole program stays working as before, but don't change anything else.</p>", "name": "change_function_name", "hints": ["<p>You have to change the name in the function definition header, but that's not all.</p>", "<p>If you just change the name in the function definition header, what happens?</p>", "<p>You get an error. Look at the message. What is it telling you? Where does the error come from?</p>", "<p>If your function is called <code>say_hello</code>, what does <code>greet(\"Alice\")</code> mean?</p>", "<p>You need to change exactly 3 lines of the program.</p>", "<p>In each line you change, change exactly one word.</p>", "<p>Don't touch the body of the function. It should still have <code>print(\"How are you?\")</code>.</p>", "<p>You should still call the function twice after defining it, with arguments <code>\"Alice\"</code> and <code>\"Bob\"</code>.</p>"], "solution": {"tokens": ["def", " ", "say_hello", "(", "name", ")", ":", "\n", "    ", "print", "(", "f\"Hello {name}!\"", ")", "\n", "    ", "print", "(", "\"How are you?\"", ")", "\n", "\n", "say_hello", "(", "\"Alice\"", ")", "\n", "say_hello", "(", "\"Bob\"", ")"], "maskedIndices": [26, 16, 12, 21, 2, 9, 27, 15, 22, 29, 23, 4, 11, 6, 28, 3, 10, 17, 0, 5, 24, 18], "mask": [true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}]}, {"index": 3, "text": "<p>Good! Now do a similar exercise: change the name of the parameter from <code>name</code> to <code>person_name</code>.</p>", "name": "change_parameter_name", "hints": ["<p>You have to change the parameter name in the function definition header, but that's not all.</p>", "<p>If you just change the parameter name in the function definition header, what happens?</p>", "<p>You get an error. Look at the message. What is it telling you? Where does the error come from?</p>", "<p>If the parameter is called <code>person_name</code>, what does <code>print(f\"Hello {name}!\")</code> mean?</p>", "<p>You need to change exactly 2 lines of the program.</p>", "<p>In each line you change, change exactly one word.</p>", "<p>Don't touch the part after the function definition, i.e. <code>say_hello(\"Alice\")</code> and <code>say_hello(\"Bob\")</code>.</p>", "<p>You should still have two statements in the function body, including <code>print(\"How are you?\")</code>.</p>"], "solution": {"tokens": ["def", " ", "say_hello", "(", "person_name", ")", ":", "\n", "    ", "print", "(", "f\"Hello {person_name}!\"", ")", "\n", "    ", "print", "(", "\"How are you?\"", ")", "\n", "\n", "say_hello", "(", "\"Alice\"", ")", "\n", "say_hello", "(", "\"Bob\"", ")"], "maskedIndices": [28, 12, 22, 6, 18, 23, 2, 5, 24, 3, 17, 15, 0, 4, 26, 16, 11, 27, 21, 9, 29, 10], "mask": [true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}]}, {"index": 4, "text": "<p>Well done!</p>\n<p>Now write your own function called <code>print_twice</code> which accepts one argument <code>x</code> and prints that argument twice\non two lines.</p>\n<p>For example, <code>print_twice(\"Hello\")</code> should output:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">Hello</span>\n<span class=\"n\">Hello</span>\n</span></code></pre>\n<p>You can test your function by calling it after the function definition, but it's not required.</p>", "name": "print_twice_exercise", "hints": ["<p>There's no clever problem solving here, this is just about following the recipe for defining a function.</p>", "<p>Make sure you have all the parts of a function listed above.</p>", "<p>That includes <code>def</code>, <code>()</code>, and <code>:</code>.</p>", "<p>Make sure your function is named <code>print_twice</code>.</p>", "<p>Make sure it accepts one parameter called <code>x</code> in between the parentheses <code>()</code>.</p>", "<p>Look at the other functions defined above for help.</p>", "<p>Use the parameter inside the function body.</p>", "<p>Make sure the body is indented.</p>", "<p>The body needs two statements or a very simple loop.</p>", "<p>Make sure that you don't call <code>print_twice</code> inside the function body of <code>print_twice</code>. Check your indentation.</p>"], "solution": {"tokens": ["def", " ", "print_twice", "(", "x", ")", ":", "\n", "    ", "print", "(", "x", ")", "\n", "    ", "print", "(", "x", ")"], "maskedIndices": [0, 10, 15, 2, 17, 5, 18, 9, 11, 3, 16, 6, 12, 4], "mask": [true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Write a program which defines a function called <code>print_twice</code> as described above.</p>"}]}, {"index": 5, "text": "<p>Functions can have many parameters. Here's an example:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">print_many</span><span class=\"p\">(</span><span class=\"n\">thing</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">thing</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_many</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "print_many", "hints": [], "solution": {"tokens": ["def", " ", "print_many", "(", "thing", ",", " ", "n", ")", ":", "\n", "    ", "for", " ", "_", " ", "in", " ", "range", "(", "n", ")", ":", "\n", "        ", "print", "(", "thing", ")", "\n", "\n", "print_many", "(", "\"Hello\"", ",", " ", "3", ")"], "maskedIndices": [2, 37, 20, 7, 16, 8, 3, 27, 9, 22, 33, 5, 28, 31, 14, 18, 0, 34, 21, 32, 4, 12, 25, 19, 26, 36], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true], "lines": null}, "prediction": {"choices": ["3\n3\n3", "3", "Hello\nHello\nHello", "Hello", "H\ne\nl\nl\no", "Error"], "answer": "Hello\nHello\nHello"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 6, "text": "<p>Note the commas used to separate parameters in the function definition and arguments in the function call,\nand the correspondence between the definition and the call:</p>\n<pre><code>def print_many(thing, n):\n                 ^    ^\n                 |    |\n  print_many(\"Hello\", 3)\n</code></pre>\n<p>So calling <code>print_many(\"Hello\", 3)</code> is like running:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">thing</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hello\"</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">thing</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Now for another simple exercise. Swap around the parameters in the function definition header so that it says:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">print_many</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">thing</span><span class=\"p\">):</span>\n</span></code></pre>\n<p>If you do this and nothing else, you will get an error. Fix the rest of the program so that it behaves like before.\n<em>Don't change the body of the function</em>.</p>", "name": "swap_parameters", "hints": ["<p>The only change to the function definition should be the swapping of parameters as instructed, nothing else.</p>", "<p>You need to fix the call to <code>print_many</code>.</p>", "<p>If the function is defined as <code>def print_many(n, thing)</code>, what does <code>print_many(\"Hello\", 3)</code> mean?</p>", "<p>We still want <code>thing = \"Hello\"</code> and <code>n = 3</code>.</p>"], "solution": {"tokens": ["def", " ", "print_many", "(", "n", ",", " ", "thing", ")", ":", "\n", "    ", "for", " ", "_", " ", "in", " ", "range", "(", "n", ")", ":", "\n", "        ", "print", "(", "thing", ")", "\n", "\n", "print_many", "(", "3", ",", " ", "\"Hello\"", ")"], "maskedIndices": [28, 27, 21, 25, 18, 36, 34, 20, 4, 31, 26, 2, 12, 7, 33, 14, 9, 16, 19, 8, 5, 0, 3, 22, 37, 32], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}]}, {"index": 7, "text": "<p>Perfect! Now you have a solid foundation of the basics of defining functions.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "CallingFunctionsWithinFunctions": {"slug": "CallingFunctionsWithinFunctions", "title": "Calling Functions Within Functions", "index": 41, "step_names": ["print_twice_call_print_many", "see_stack_in_snoop", "see_stack_in_pythontutor", "see_stack_in_birdseye", "final_text"], "steps": [{"index": 0, "text": "<p>The body of a function can contain anything, including function calls. In fact we've already done that by calling\nprint. But calling one of our own functions is no different, so our functions can call each other!</p>\n<p>For example, we can implement <code>print_twice</code> using <code>print_many</code>:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">print_many</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">thing</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">thing</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_twice</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">print_many</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_twice</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "print_twice_call_print_many", "hints": [], "solution": {"tokens": ["def", " ", "print_many", "(", "n", ",", " ", "thing", ")", ":", "\n", "    ", "for", " ", "_", " ", "in", " ", "range", "(", "n", ")", ":", "\n", "        ", "print", "(", "thing", ")", "\n", "\n", "def", " ", "print_twice", "(", "x", ")", ":", "\n", "    ", "print_many", "(", "2", ",", " ", "x", ")", "\n", "\n", "print_twice", "(", "\"Hello\"", ")"], "maskedIndices": [41, 4, 16, 27, 37, 2, 0, 52, 36, 45, 5, 40, 43, 9, 21, 22, 31, 3, 34, 49, 26, 33, 7, 12, 14, 50, 20, 25, 8, 46, 51, 18, 35, 19, 28, 42], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>It's important to get a good sense of what's going on here and to know how\nto explore function calls, so we're going to try this out in each debugger.</p>\n<p>First, run the program again with <code>snoop</code>.</p>", "name": "see_stack_in_snoop", "hints": [], "solution": {"tokens": ["def", " ", "print_many", "(", "n", ",", " ", "thing", ")", ":", "\n", "    ", "for", " ", "_", " ", "in", " ", "range", "(", "n", ")", ":", "\n", "        ", "print", "(", "thing", ")", "\n", "\n", "def", " ", "print_twice", "(", "x", ")", ":", "\n", "    ", "print_many", "(", "2", ",", " ", "x", ")", "\n", "\n", "print_twice", "(", "\"Hello\"", ")"], "maskedIndices": [31, 25, 12, 19, 36, 16, 21, 43, 26, 7, 45, 41, 28, 2, 0, 35, 37, 49, 27, 14, 50, 5, 51, 33, 20, 52, 8, 3, 18, 34, 46, 4, 42, 9, 40, 22], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same program as above, but with <code>snoop</code>.</p>"}, {"type": "custom", "message": "<p>With your code in the editor, click the <code>snoop</code> button.</p>"}]}, {"index": 2, "text": "<p><code>snoop</code> starts each function call with:</p>\n<ol>\n<li>A new level of indentation in the logs.</li>\n<li><code>&gt;&gt;&gt; Call to &lt;function name&gt;</code></li>\n<li>The values of the arguments.</li>\n<li>The function header line.</li>\n</ol>\n<p>It ends the call with <code>&lt;&lt;&lt; Return value from &lt;function name&gt;</code>. We'll learn about return values soon.</p>\n<p>Now run the program again with Python Tutor.</p>", "name": "see_stack_in_pythontutor", "hints": [], "solution": {"tokens": ["def", " ", "print_many", "(", "n", ",", " ", "thing", ")", ":", "\n", "    ", "for", " ", "_", " ", "in", " ", "range", "(", "n", ")", ":", "\n", "        ", "print", "(", "thing", ")", "\n", "\n", "def", " ", "print_twice", "(", "x", ")", ":", "\n", "    ", "print_many", "(", "2", ",", " ", "x", ")", "\n", "\n", "print_twice", "(", "\"Hello\"", ")"], "maskedIndices": [3, 33, 21, 18, 19, 49, 50, 9, 26, 46, 7, 51, 0, 27, 14, 40, 12, 41, 20, 2, 36, 25, 4, 22, 35, 31, 28, 43, 37, 8, 34, 52, 45, 16, 5, 42], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same program as above, but with Python Tutor.</p>"}, {"type": "custom", "message": "<p>With your code in the editor, click the Python Tutor button.</p>"}]}, {"index": 3, "text": "<p>Each time a function is called, a new <em>frame</em> is created, which contains the local variable values\nin that call and other information about what's currently happening.\nWhen the function call completes, the frame is deleted.</p>\n<p>You can see this in Python Tutor on the right under \"Frames\". At the top is the Global frame,\nthe top level frame where the whole program is running. As you click Next, new frames appear\nand then disappear. In each one you can see the values of the variables.</p>\n<p>Finally, run the program with <code>birdseye</code>.</p>", "name": "see_stack_in_birdseye", "hints": [], "solution": {"tokens": ["def", " ", "print_many", "(", "n", ",", " ", "thing", ")", ":", "\n", "    ", "for", " ", "_", " ", "in", " ", "range", "(", "n", ")", ":", "\n", "        ", "print", "(", "thing", ")", "\n", "\n", "def", " ", "print_twice", "(", "x", ")", ":", "\n", "    ", "print_many", "(", "2", ",", " ", "x", ")", "\n", "\n", "print_twice", "(", "\"Hello\"", ")"], "maskedIndices": [37, 20, 22, 49, 36, 2, 31, 18, 7, 26, 5, 33, 35, 3, 21, 50, 25, 41, 0, 16, 12, 27, 51, 46, 43, 9, 19, 28, 42, 14, 4, 45, 34, 8, 52, 40], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same program as above, but with <code>birdseye</code>.</p>"}, {"type": "custom", "message": "<p>With your code in the editor, click the <code>birdseye</code> button.</p>"}]}, {"index": 4, "text": "<p><code>birdseye</code> only shows one frame (function call) at a time. At first you see the global frame.\nAt the bottom is the call to <code>print_twice</code>. Click on the little blue arrow to take\nyou into that frame, and then click on the next one to enter <code>print_many</code>.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "ReturningValuesFromFunctions": {"slug": "ReturningValuesFromFunctions", "title": "Returning Values From Functions", "index": 42, "step_names": ["first_return", "losing_return_value", "quadruple_exercise", "final_text"], "steps": [{"index": 0, "text": "<p>Functions can be especially useful when they <em>return</em> values, rather than just printing them. Try this example:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">double</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">twice</span> <span class=\"o\">=</span> <span class=\"n\">double</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">twice</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "first_return", "hints": [], "solution": {"tokens": ["def", " ", "double", "(", "x", ")", ":", "\n", "    ", "return", " ", "x", " ", "*", " ", "2", "\n", "\n", "number", " ", "=", " ", "5", "\n", "twice", " ", "=", " ", "double", "(", "number", ")", "\n", "print", "(", "number", ")", "\n", "print", "(", "twice", ")"], "maskedIndices": [30, 18, 15, 9, 20, 41, 26, 4, 13, 33, 31, 6, 38, 3, 5, 11, 0, 39, 35, 40, 28, 29, 24, 22, 2, 34, 36], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["5\n5", "5\n10", "10\n10", "Error"], "answer": "5\n10"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Here we passed <code>number</code> (which has value <code>5</code>) as the argument <code>x</code> to the function <code>double</code>, and <code>double</code> <em>returned</em>\n<code>x * 2</code>, i.e. <code>5 * 2</code>, i.e. <code>10</code>, which became the value of the variable <code>twice</code>. The special keyword <code>return</code> inside\n<code>double</code> makes <code>double(number)</code> an expression with a value - specifically the value which was returned.\nIt's a bit like <code>twice = double(number)</code> is equivalent to <code>twice = number * 2</code>, although that's not\nexactly what happens.</p>\n<p>Note that <code>double(number)</code> <em>didn't change <code>number</code></em>. At the end, <code>number</code> is still <code>5</code>. Rather, <code>double(number)</code>\nreturned a new value. It's crucial that the program made use of that returned value, in this case by storing\nit in a variable. Immediately printing it with <code>print(double(number))</code> also works. On the other hand,\ntry this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">double</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">double</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "losing_return_value", "hints": [], "solution": {"tokens": ["def", " ", "double", "(", "x", ")", ":", "\n", "    ", "return", " ", "x", " ", "*", " ", "2", "\n", "\n", "number", " ", "=", " ", "5", "\n", "double", "(", "number", ")", "\n", "print", "(", "number", ")"], "maskedIndices": [29, 26, 18, 22, 4, 31, 15, 6, 32, 27, 30, 20, 13, 5, 0, 3, 2, 9, 25, 11, 24], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["5", "10", "Error"], "answer": "5"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>Here <code>double(number)</code> still returned <code>10</code>, but we didn't make use of that so it was lost. <code>number</code> is still <code>5</code>.</p>\n<p>Write a function <code>quadruple</code> which takes one argument <code>x</code> and returns that argument multiplied by 4.\nYou must only use the <code>double</code> function - no numbers or multiplication are allowed directly in the body\nof <code>quadruple</code>.</p>", "name": "quadruple_exercise", "hints": ["<p>To multiply by 4, multiply by 2 twice.</p>", "<p>That means you need to call <code>double</code> twice.</p>", "<p>Make sure you use the returned value from <code>double</code> each time.</p>", "<p>Make sure you have all the parts of a function definition.</p>", "<p>That includes <code>def</code>, <code>()</code>, and <code>:</code>.</p>", "<p>Make sure your function is named <code>quadruple</code>.</p>", "<p>Make sure it accepts one parameter called <code>x</code> in between the parentheses <code>()</code>.</p>", "<p>Use the parameter inside the function body.</p>", "<p>Make sure the body is indented.</p>", "<p>Make sure you <code>return</code> something at the end.</p>", "<p>Look at the definition of <code>double</code> for an example.</p>", "<p>Make sure that you don't call <code>quadruple</code> inside the function body of <code>quadruple</code>. Check your indentation.</p>"], "solution": {"tokens": ["def", " ", "quadruple", "(", "x", ")", ":", "\n", "    ", "return", " ", "double", "(", "double", "(", "x", ")", ")"], "maskedIndices": [6, 11, 12, 2, 9, 4, 16, 5, 17, 3, 15, 0, 14, 13], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Write a program which defines a function called <code>quadruple</code> as described above.</p>"}]}, {"index": 3, "text": "<p>Well done! Here are two possible solutions:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">quadruple</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">double</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">double</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">quadruple</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">double</span><span class=\"p\">(</span><span class=\"n\">double</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n</span></code></pre>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "TestingFunctions": {"slug": "TestingFunctions", "title": "Testing Functions", "index": 43, "step_names": ["introducing_assert_equal", "make_tests_fail", "complete_quadruple_tests", "surround_exercise", "alert_exercise", "final_text"], "steps": [{"index": 0, "text": "<p>An important part of writing programs is testing that they work correctly. You can do this manually, e.g. by checking that\n<code>print(double(5))</code> prints <code>10</code>, but this kind of thing can get tedious quickly.\nIt's helpful to actually write programs that test your programs. This is called <em>automated testing</em>,\nand the programs are called <em>tests</em>.</p>\n<p>Here's a simple function <code>assert_equal</code> to help us write tests:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">actual</span> <span class=\"o\">==</span> <span class=\"n\">expected</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"OK\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Error! </span><span class=\"si\">{</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> != </span><span class=\"si\">{</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>(What's that function <code>repr</code>? Try <code>print(f\"{'abc'} {repr('abc')}\")</code> to see one difference, but don't worry about it too much.)</p>\n<p>This isn't a standard part of python (although similar functions are), but we've added it to your coding environment\nso you can always use it. Here's an example of using it for you to try out:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">double</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">double</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">double</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "introducing_assert_equal", "hints": [], "solution": {"tokens": ["def", " ", "double", "(", "x", ")", ":", "\n", "    ", "return", " ", "x", " ", "*", " ", "2", "\n", "\n", "assert_equal", "(", "double", "(", "2", ")", ",", " ", "4", ")", "\n", "assert_equal", "(", "double", "(", "5", ")", ",", " ", "10", ")"], "maskedIndices": [29, 20, 15, 2, 11, 22, 33, 34, 35, 21, 23, 3, 0, 27, 38, 13, 18, 6, 5, 19, 31, 32, 24, 9, 4, 26, 37, 30], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true], "lines": null}, "prediction": {"choices": ["Error! 4 != 4\nError! 10 != 10", "Error! 2 != 4\nError! 5 != 10", "Error! 2 != 4", "OK\nOK", "OK", "Error"], "answer": "OK\nOK"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>The OKs tell us that the tests passed. Our <code>double</code> function seems to be working correctly. Change it to return\n<code>x * 3</code> instead and see what happens.</p>", "name": "make_tests_fail", "hints": [], "solution": {"tokens": ["def", " ", "double", "(", "x", ")", ":", "\n", "    ", "return", " ", "x", " ", "*", " ", "3", "\n", "\n", "assert_equal", "(", "double", "(", "2", ")", ",", " ", "4", ")", "\n", "assert_equal", "(", "double", "(", "5", ")", ",", " ", "10", ")"], "maskedIndices": [3, 11, 23, 18, 4, 2, 29, 21, 30, 6, 38, 31, 35, 34, 20, 5, 32, 0, 22, 19, 24, 33, 27, 37, 26, 13, 9, 15], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true], "lines": null}, "prediction": {"choices": ["Error! 4 != 4\nError! 10 != 10", "Error! 6 != 4\nError! 15 != 10", "Error! 4 != 6\nError! 10 != 15", "OK\nOK", "Error"], "answer": "Error! 6 != 4\nError! 15 != 10"}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the program from the previous step, but replace <code>x * 2</code> with <code>x * 3</code>. Keep the rest the same.</p>"}]}, {"index": 2, "text": "<p>Excellent! Our tests failed! Of course that's not usually a good thing, but it tells us that the tests are\ndoing their job. They will make sure that our implementation of <code>double</code> is correct.</p>\n<p>Let's practice this new concept. Below is the function <code>quadruple</code> from before with some incomplete tests.\nFix the program by adding the missing arguments to <code>assert_equal</code>.</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">double</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">quadruple</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">double</span><span class=\"p\">(</span><span class=\"n\">double</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">quadruple</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">quadruple</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n</span></code></pre>", "name": "complete_quadruple_tests", "hints": [], "solution": {"tokens": ["def", " ", "double", "(", "x", ")", ":", "\n", "    ", "return", " ", "x", " ", "*", " ", "2", "\n", "\n", "def", " ", "quadruple", "(", "x", ")", ":", "\n", "    ", "return", " ", "double", "(", "double", "(", "x", ")", ")", "\n", "\n", "assert_equal", "(", "quadruple", "(", "2", ")", ",", " ", "8", ")", "\n", "assert_equal", "(", "quadruple", "(", "5", ")", ",", " ", "20", ")"], "maskedIndices": [46, 27, 30, 21, 41, 57, 40, 52, 11, 13, 34, 49, 24, 20, 4, 29, 58, 3, 53, 32, 2, 0, 6, 42, 51, 44, 35, 18, 23, 54, 38, 33, 31, 39, 55, 50, 9, 47, 15, 22, 43, 5], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Type in the program above.\nThen change the last two lines by adding one argument to each <code>assert_equal</code> call to make the tests pass.\nDon't touch the function definitions.</p>"}]}, {"index": 3, "text": "<p>Another useful thing about the tests is that anyone can read them and see clear, unambiguous examples\nof what the function does. This is helpful when a function is complicated and difficult to describe in English.</p>\n<p>For example, here are some tests:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">surround</span><span class=\"p\">(</span><span class=\"s2\">\"more\"</span><span class=\"p\">,</span> <span class=\"s2\">\"++\"</span><span class=\"p\">),</span> <span class=\"s2\">\"++more++\"</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">surround</span><span class=\"p\">(</span><span class=\"s2\">\"the same\"</span><span class=\"p\">,</span> <span class=\"s2\">\"=\"</span><span class=\"p\">),</span> <span class=\"s2\">\"=the same=\"</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>I don't need to explain what <code>surround</code> does, you can see for yourself.</p>\n<p>Write a function <code>surround</code> that passes these tests and starts like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">surround</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">sides</span><span class=\"p\">):</span>\n</span></code></pre>", "name": "surround_exercise", "hints": ["<p>The argument <code>sides</code> should be added before and after <code>string</code>.</p>", "<p>Use string concatenation to do this.</p>", "<p>Make sure the body is indented.</p>", "<p>Make sure you <code>return</code> something at the end.</p>", "<p>Make sure that you don't call <code>surround</code> inside the function body of <code>surround</code>. Check your indentation.</p>"], "solution": {"tokens": ["def", " ", "surround", "(", "string", ",", " ", "sides", ")", ":", "\n", "    ", "return", " ", "sides", " ", "+", " ", "string", " ", "+", " ", "sides"], "maskedIndices": [4, 3, 2, 22, 14, 5, 7, 18, 16, 0, 9, 8, 12, 20], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">surround</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">sides</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 4, "text": "<p>Perfect! Now write a function <code>alert</code> that passes these tests:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">alert</span><span class=\"p\">(</span><span class=\"s2\">\"Warning\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"s2\">\"!! Warning !!\"</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">alert</span><span class=\"p\">(</span><span class=\"s2\">\"DANGER\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"s2\">\"!!!! DANGER !!!!\"</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>The body of <code>alert</code> is not allowed to contain <code>+</code>. Use <code>surround</code> instead. Your function should start like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">alert</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"p\">):</span>\n</span></code></pre>", "name": "alert_exercise", "hints": ["<p><code>string</code> should be surrounded by one space and <code>level</code> exclamation marks (<code>!</code>) on each side.</p>", "<p>Include the definition of <code>surround</code> from before in your program and call it in <code>alert</code>.</p>", "<p>Use <code>surround</code> for the spaces.</p>", "<p>Use <code>surround</code> for the exclamation marks.</p>", "<p>You're not allowed to combine several exclamation marks into one string, so call <code>surround</code> several times.</p>", "<p>That is, call <code>surround</code> once for each pair of exclamation marks.</p>", "<p>So call <code>surround(..., '!')</code> several times.</p>", "<p>Use a loop to call it several times.</p>", "<p>Use <code>range(n)</code> to make your loop have <code>n</code> iterations.</p>", "<p>Make sure you use the return value from <code>surround</code>.</p>", "<p>Think of how you would build up strings with <code>+=</code>. Repeatedly update the same variable, building up your result.</p>", "<p>That is, write <code>something = surround(something, '!')</code> in your loop.</p>", "<p>Make sure you <code>return</code> something at the end of <code>alert</code>.</p>", "<p>Make sure you don't <code>return</code> inside the loop, but after it. Check your indentation.</p>", "<p>Make sure that you don't call <code>alert</code> inside the function body of <code>alert</code>. Check your indentation.</p>"], "solution": {"tokens": ["def", " ", "alert", "(", "string", ",", " ", "level", ")", ":", "\n", "    ", "string", " ", "=", " ", "surround", "(", "string", ",", " ", "' '", ")", "\n", "    ", "for", " ", "_", " ", "in", " ", "range", "(", "level", ")", ":", "\n", "        ", "string", " ", "=", " ", "surround", "(", "string", ",", " ", "'!'", ")", "\n", "    ", "return", " ", "string"], "maskedIndices": [19, 0, 22, 33, 43, 21, 48, 17, 31, 8, 18, 16, 5, 34, 3, 47, 45, 29, 38, 9, 44, 4, 14, 32, 25, 35, 2, 7, 12, 27, 42, 40, 53, 51], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">alert</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 5, "text": "<p>Great work! These tools will be very helpful in coming chapters.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "MoreOnReturn": {"slug": "MoreOnReturn", "title": "<code>return</code> ends the function call", "index": 44, "step_names": ["double_return_in_one_function", "cannot_return_multiple_values", "return_ends_whole_function", "break_vs_return", "final_text"], "steps": [{"index": 0, "text": "<p>Sometimes <code>return</code> can be a source of confusion and mistakes for new learners.\nLet's learn more about how it works.</p>\n<p>Run this code:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"mi\">2</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">())</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "double_return_in_one_function", "hints": [], "solution": {"tokens": ["def", " ", "foo", "(", ")", ":", "\n", "    ", "return", " ", "1", "\n", "    ", "return", " ", "2", "\n", "\n", "print", "(", "foo", "(", ")", ")"], "maskedIndices": [4, 8, 19, 20, 10, 2, 3, 13, 21, 15, 5, 18, 22, 23, 0], "mask": [true, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": ["1", "2", "[1, 2]", "1\n2", "1 2", "Error"], "answer": "1"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Once a <code>return</code> statement is executed, the function will stop, and the rest of the code is ignored.\nThis means that any code immediately after a <code>return</code> in the same block is <em>unreachable</em>:\n<code>return 2</code> can <em>never</em> be reached no matter how many times we run this function!</p>\n<p><strong><em>One, and only one <code>return</code> can be executed per function call, then execution stops.</em></strong></p>\n<p>Multiple <code>return</code> statements can still be useful when used properly, e.g. in an <code>if-else</code> block:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">condition</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">value1</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">value2</span>\n</span></code></pre>\n<p>A common mistake is to misunderstand what <code>return</code> does in <code>for</code> loops. Try the following:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">double_numbers</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">double_numbers</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]),</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "cannot_return_multiple_values", "hints": [], "solution": {"tokens": ["def", " ", "double_numbers", "(", "numbers", ")", ":", "\n", "    ", "for", " ", "x", " ", "in", " ", "numbers", ":", "\n", "        ", "return", " ", "x", " ", "*", " ", "2", "\n", "\n", "assert_equal", "(", "double_numbers", "(", "[", "1", ",", " ", "2", ",", " ", "3", "]", ")", ",", " ", "[", "2", ",", " ", "4", ",", " ", "6", "]", ")"], "maskedIndices": [32, 21, 42, 44, 11, 23, 4, 53, 45, 39, 9, 40, 25, 0, 16, 28, 46, 19, 36, 13, 3, 41, 49, 15, 30, 2, 5, 51, 48, 33, 52, 29, 31, 6, 37, 34], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>At first it may look intuitive to <code>return</code> one value for each iteration in a <code>for</code> loop.\nBut it doesn't work like that!\nIf you inspect the code with <code>snoop</code> or Python tutor you can see that the function returns 2 in the first\nloop iteration and then ends immediately.</p>\n<p>Even when there's only one <code>return</code> statement, it will get executed only once and return one value.\nIf you want to return several values, return a list:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">double_numbers</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n    <span class=\"n\">doubles</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n        <span class=\"n\">doubles</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">doubles</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">double_numbers</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]),</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>What happens if there are nested loops? Try the following function:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"s1\">'abc'</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">letter</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">number</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">letter</span> <span class=\"o\">==</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">letter</span>\n\n<span class=\"n\">foo</span><span class=\"p\">()</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "return_ends_whole_function", "hints": [], "solution": {"tokens": ["def", " ", "foo", "(", ")", ":", "\n", "    ", "for", " ", "letter", " ", "in", " ", "'abc'", ":", "\n", "        ", "for", " ", "number", " ", "in", " ", "range", "(", "3", ")", ":", "\n", "            ", "print", "(", "f\"{letter} {number}\"", ")", "\n", "            ", "if", " ", "letter", " ", "==", " ", "'b'", ":", "\n", "                ", "return", " ", "letter", "\n", "\n", "foo", "(", ")"], "maskedIndices": [18, 10, 27, 2, 4, 32, 47, 39, 14, 5, 15, 49, 33, 52, 53, 3, 25, 24, 31, 44, 54, 22, 8, 43, 41, 12, 28, 0, 37, 20, 34, 26], "mask": [true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true], "lines": null}, "prediction": {"choices": ["a 0\na 1\na 2", "a 0\na 1\na 2\nb 0", "a 0\na 1\na 2\nb 0\nb 1\nb 2", "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2", "a 0\na 1\na 2\nb 0\nb 1\nb 2\nc 0\nc 1\nc 2", "Error"], "answer": "a 0\na 1\na 2\nb 0"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>As before, <code>return</code> <strong><em>stops the whole function</em></strong>, including all loops.</p>\n<p>Previously we showed <a href=\"#UsingBreak\">how to stop a loop with <code>break</code></a>.\nChange <code>return letter</code> to <code>break</code> and see what the difference is.</p>", "name": "break_vs_return", "hints": [], "solution": {"tokens": ["def", " ", "foo", "(", ")", ":", "\n", "    ", "for", " ", "letter", " ", "in", " ", "'abc'", ":", "\n", "        ", "for", " ", "number", " ", "in", " ", "range", "(", "3", ")", ":", "\n", "            ", "print", "(", "f\"{letter} {number}\"", ")", "\n", "            ", "if", " ", "letter", " ", "==", " ", "'b'", ":", "\n", "                ", "break", "\n", "\n", "foo", "(", ")"], "maskedIndices": [41, 12, 24, 43, 51, 18, 37, 28, 22, 5, 27, 10, 26, 47, 44, 25, 32, 31, 39, 3, 14, 15, 52, 2, 4, 50, 33, 8, 0, 34, 20], "mask": [true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, false, true, true, true], "lines": null}, "prediction": {"choices": ["a 0\na 1\na 2", "a 0\na 1\na 2\nb 0", "a 0\na 1\na 2\nb 0\nb 1\nb 2", "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2", "a 0\na 1\na 2\nb 0\nb 1\nb 2\nc 0\nc 1\nc 2", "Error"], "answer": "a 0\na 1\na 2\nb 0\nc 0\nc 1\nc 2"}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same code as in the previous step, but replace the whole last line of the function (<code>return letter</code>) with just <code>break</code>.</p>"}]}, {"index": 4, "text": "<p>Unlike <code>return</code>, <code>break</code> only stops the innermost loop in which it is used, in this case <code>for number in range(3):</code>.\nHere's exactly what happens:</p>\n<ul>\n<li>For <code>letter = b</code>, the line <code>print(f\"{letter} {number}\")</code> is executed only for <code>number = 0</code>,</li>\n<li>then the inner loop is stopped by <code>break</code>, but</li>\n<li>the outer loop continues its execution, moving on to the next letter <code>c</code></li>\n<li>which is executed in full since it does not trigger the <code>break</code> statement.</li>\n</ul>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingOr": {"slug": "IntroducingOr", "title": "Introducing <code>or</code>", "index": 45, "step_names": ["InputAliceBob", "TrueOrTrue", "TrueOrFalse", "FalseOrFalse", "ImprovingWithOr", "FurtherImprovement", "ACommonMistake", "InspectWithBirdseye", "AnExercise", "final_text"], "steps": [{"index": 0, "text": "<p>We learned about <em>booleans</em> (<code>True</code> and <code>False</code>) when we introduced If statements.\nWe also learned about comparison operators <code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> which return booleans.\nNow we want to combine booleans to check for more complex conditions.</p>\n<p>Here's a simple example: imagine you have two friends, Alice and Bob.\nThe function below accepts one parameter, <code>name</code>, and checks if the person with the given name is among your friends.\nCopy and run the code in the editor:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">is_friend</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">elif</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bob\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_friend</span><span class=\"p\">(</span><span class=\"s2\">\"Alice\"</span><span class=\"p\">),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_friend</span><span class=\"p\">(</span><span class=\"s2\">\"Bob\"</span><span class=\"p\">),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_friend</span><span class=\"p\">(</span><span class=\"s2\">\"Charlie\"</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "InputAliceBob", "hints": [], "solution": {"tokens": ["def", " ", "is_friend", "(", "name", ")", ":", "\n", "    ", "if", " ", "name", " ", "==", " ", "\"Alice\"", ":", "\n", "        ", "return", " ", "True", "\n", "    ", "elif", " ", "name", " ", "==", " ", "\"Bob\"", ":", "\n", "        ", "return", " ", "True", "\n", "    ", "else", ":", "\n", "        ", "return", " ", "False", "\n", "\n", "assert_equal", "(", "is_friend", "(", "\"Alice\"", ")", ",", " ", "True", ")", "\n", "assert_equal", "(", "is_friend", "(", "\"Bob\"", ")", ",", " ", "True", ")", "\n", "assert_equal", "(", "is_friend", "(", "\"Charlie\"", ")", ",", " ", "False", ")"], "maskedIndices": [57, 45, 39, 51, 31, 68, 9, 79, 74, 11, 3, 59, 36, 67, 54, 16, 61, 70, 49, 72, 24, 26, 75, 13, 2, 63, 28, 50, 40, 64, 76, 21, 34, 6, 78, 5, 19, 15, 52, 56, 53, 60, 0, 43, 4, 73, 30, 65, 62, 71, 48], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Let's see if we can do better.\nWe can combine the <code>if</code> and <code>elif</code> statements using <strong><code>or</code></strong>. <code>or</code> is a <em>boolean operator</em>,\nmeaning it's an operator (like <code>+</code> or <code>-</code>) which combines two booleans (<code>True</code> or <code>False</code>).</p>\n<p>The expression <code>A or B</code> is <code>True</code> if either <code>A</code> or <code>B</code> is <code>True</code>, i.e. if <code>A</code> is <code>True</code> or <code>B</code> is <code>True</code>, or both.\nIt's only <code>False</code> if neither <code>A</code> nor <code>B</code> is <code>True</code>, i.e. both are <code>False</code>.</p>\n<p>Try the following in the shell.</p>\n<pre><code class=\"codehilite\"><span><span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"kc\">True</span>\n</span></code></pre>", "name": "TrueOrTrue", "hints": [], "solution": {"tokens": ["True", " ", "or", " ", "True"], "maskedIndices": [2, 4, 0], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": ["True", "False", "Error"], "answer": "True"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 2, "text": "<p>Good, now try:</p>\n<pre><code class=\"codehilite\"><span><span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"kc\">False</span>\n</span></code></pre>", "name": "TrueOrFalse", "hints": [], "solution": {"tokens": ["True", " ", "or", " ", "False"], "maskedIndices": [2, 0, 4], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": ["True", "False", "Error"], "answer": "True"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 3, "text": "<p>Finally, try:</p>\n<pre><code class=\"codehilite\"><span><span class=\"kc\">False</span> <span class=\"ow\">or</span> <span class=\"kc\">False</span>\n</span></code></pre>", "name": "FalseOrFalse", "hints": [], "solution": {"tokens": ["False", " ", "or", " ", "False"], "maskedIndices": [4, 2, 0], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": ["True", "False", "Error"], "answer": "False"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 4, "text": "<p>In the editor, replace:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n<span class=\"k\">elif</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bob\"</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</span></code></pre>\n<p>with:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bob\"</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</span></code></pre>\n<p>As you can see, <code>is_friend</code> will return <code>True</code> only when <code>name</code> is Alice or Bob.\nThe <code>or</code> is used in between the two booleans <code>name == \"Alice\"</code> and <code>name == \"Bob\"</code>.</p>", "name": "ImprovingWithOr", "hints": [], "solution": {"tokens": ["def", " ", "is_friend", "(", "name", ")", ":", "\n", "    ", "if", " ", "name", " ", "==", " ", "\"Alice\"", " ", "or", " ", "name", " ", "==", " ", "\"Bob\"", ":", "\n", "        ", "return", " ", "True", "\n", "    ", "else", ":", "\n", "        ", "return", " ", "False", "\n", "\n", "assert_equal", "(", "is_friend", "(", "\"Alice\"", ")", ",", " ", "True", ")", "\n", "assert_equal", "(", "is_friend", "(", "\"Bob\"", ")", ",", " ", "True", ")", "\n", "assert_equal", "(", "is_friend", "(", "\"Charlie\"", ")", ",", " ", "False", ")"], "maskedIndices": [44, 13, 9, 32, 45, 47, 4, 21, 57, 24, 72, 38, 66, 11, 65, 43, 49, 42, 61, 27, 55, 52, 54, 2, 41, 46, 58, 6, 64, 50, 36, 71, 60, 15, 17, 3, 69, 56, 33, 68, 29, 53, 19, 63, 67, 0, 23, 5], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Copy the program from the top of the page, then change the first four lines of the function to use <code>or</code> as suggested.</p>"}]}, {"index": 5, "text": "<p>We can do even better. Notice that</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bob\"</span>\n</span></code></pre>\n<p>is a boolean, and both <code>return</code> statements are returning booleans <code>True</code> or <code>False</code>.\nThe function:</p>\n<ul>\n<li>returns <code>True</code> when <code>name == \"Alice\" or name == \"Bob\"</code> is <code>True</code>, and</li>\n<li>returns <code>False</code> when <code>name == \"Alice\" or name == \"Bob\"</code> is <code>False</code>.</li>\n</ul>\n<p>So we could simply return the boolean <code>name == \"Alice\" or name == \"Bob\"</code> itself in both cases!</p>\n<p>This is a common pattern for simplifying your code. If you ever find yourself writing code like:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n</span></code></pre>\n<p>where <code>x</code> itself is a boolean, you can always simplify this block of code to:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">return</span> <span class=\"n\">x</span>\n</span></code></pre>\n<p>Apply this simplification to the code yourself, and run it again.</p>", "name": "FurtherImprovement", "hints": [], "solution": {"tokens": ["def", " ", "is_friend", "(", "name", ")", ":", "\n", "    ", "return", " ", "name", " ", "==", " ", "\"Alice\"", " ", "or", " ", "name", " ", "==", " ", "\"Bob\"", "\n", "\n", "assert_equal", "(", "is_friend", "(", "\"Alice\"", ")", ",", " ", "True", ")", "\n", "assert_equal", "(", "is_friend", "(", "\"Bob\"", ")", ",", " ", "True", ")", "\n", "assert_equal", "(", "is_friend", "(", "\"Charlie\"", ")", ",", " ", "False", ")"], "maskedIndices": [27, 6, 31, 40, 23, 46, 28, 3, 0, 35, 52, 48, 41, 57, 11, 29, 42, 30, 51, 50, 38, 39, 21, 49, 5, 15, 32, 19, 13, 56, 9, 54, 43, 17, 4, 34, 45, 26, 53, 2, 37], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the program from the previous step, but replace:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bob\"</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n</span></code></pre>\n<p>with:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">return</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bob\"</span>\n</span></code></pre>"}]}, {"index": 6, "text": "<p>Take careful note of how we wrote the condition:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">return</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bob\"</span>\n</span></code></pre>\n<p>A common mistake is to write this instead:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">return</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span> <span class=\"s2\">\"Bob\"</span>\n</span></code></pre>\n<p>It makes sense if you read it like English:</p>\n<blockquote>\n<p><code>return</code> whether <code>name</code> is equal to either <code>\"Alice\"</code> or <code>\"Bob\"</code></p>\n</blockquote>\n<p>But Python is not English, and that's not how <code>or</code> works.</p>\n<p>Replace the <code>return</code> line in the code with the above line, and try running it again.</p>", "name": "ACommonMistake", "hints": [], "solution": {"tokens": ["def", " ", "is_friend", "(", "name", ")", ":", "\n", "    ", "return", " ", "name", " ", "==", " ", "\"Alice\"", " ", "or", " ", "\"Bob\"", "\n", "\n", "assert_equal", "(", "is_friend", "(", "\"Alice\"", ")", ",", " ", "True", ")", "\n", "assert_equal", "(", "is_friend", "(", "\"Bob\"", ")", ",", " ", "True", ")", "\n", "assert_equal", "(", "is_friend", "(", "\"Charlie\"", ")", ",", " ", "False", ")"], "maskedIndices": [15, 13, 45, 11, 50, 28, 37, 36, 31, 4, 46, 5, 34, 41, 26, 24, 25, 48, 23, 35, 3, 0, 53, 30, 49, 22, 19, 38, 39, 52, 2, 27, 47, 9, 33, 42, 44, 6, 17], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the program from the previous step, but replace:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">return</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bob\"</span>\n</span></code></pre>\n<p>with:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">return</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span> <span class=\"s2\">\"Bob\"</span>\n</span></code></pre>"}]}, {"index": 7, "text": "<p>The second and third tests fail! Our function seems to be doing the wrong thing:\nit returns <code>\"Bob\"</code> (a string, not a boolean!) when <code>name</code> is <code>\"Bob\"</code> or <code>\"Charlie\"</code>. What is going on?\nRun the same problematic code again with <code>birdseye</code>. Inspect the <code>return</code> statements of each <code>is_friend</code> call carefully.\n(Use the blue arrow buttons)</p>", "name": "InspectWithBirdseye", "hints": [], "solution": {"tokens": ["def", " ", "is_friend", "(", "name", ")", ":", "\n", "    ", "return", " ", "name", " ", "==", " ", "\"Alice\"", " ", "or", " ", "\"Bob\"", "\n", "\n", "assert_equal", "(", "is_friend", "(", "\"Alice\"", ")", ",", " ", "True", ")", "\n", "assert_equal", "(", "is_friend", "(", "\"Bob\"", ")", ",", " ", "True", ")", "\n", "assert_equal", "(", "is_friend", "(", "\"Charlie\"", ")", ",", " ", "False", ")"], "maskedIndices": [13, 35, 44, 9, 39, 6, 27, 5, 37, 24, 15, 38, 2, 0, 50, 28, 49, 47, 42, 46, 25, 33, 4, 45, 53, 30, 22, 52, 11, 17, 23, 36, 41, 31, 19, 26, 34, 48, 3], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same code as in the previous step, but with <code>birdseye</code>.</p>"}, {"type": "custom", "message": "<p>With your code in the editor, click the <code>birdseye</code> button.</p>"}]}, {"index": 8, "text": "<p>When we inspect it with <code>birdseye</code>, we can see that:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span> <span class=\"s2\">\"Bob\"</span>\n</span></code></pre>\n<p>is not translated into</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span> <span class=\"s2\">\"Bob\"</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>the way we think in English, but rather:</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"s2\">\"Bob\"</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>which evaluates to <code>\"Bob\"</code> when <code>name == \"Alice\"</code> is <code>False</code>.</p>\n<p>Perhaps you feel like this:</p>\n<p><a href=\"https://imgur.com/a/icKzI\"><img alt=\"I now have additional questions\" src=\"https://i.imgur.com/jN57tGt.png\" /></a></p>\n<p>The only thing you really need to know is this: Until you know what you're doing, always\nmake sure you put booleans on both sides of <code>or</code>, because it's a boolean operator.\n<code>name == \"Alice\" or \"Bob\"</code> breaks that rule.</p>\n<p>If you're curious, the answers are below, but you can skip them if you want and move onto the exercise below.</p>\n<hr />\n<blockquote>\n<p>Why does <code>(name == \"Alice\") or (\"Bob\")</code> equal <code>\"Bob\"</code>? Why does it equal anything? <code>\"Bob\"</code> isn't even a boolean!</p>\n</blockquote>\n<p>The definition \"<code>A or B</code> is <code>True</code> if either <code>A</code> or <code>B</code> is <code>True</code>\" was a simplification. It's the easiest\nway to think about <code>or</code> most of the time, especially for writing <code>if</code> statements.\nThe real definition is that if <code>A</code> is true then <code>A or B</code> is just <code>A</code> (in fact <code>B</code> is not even evaluated),\notherwise it's <code>B</code>.\nYou can see for yourself that if <code>A</code> and <code>B</code> are booleans then the two definitions are equivalent.\nIn this example <code>A</code> is <code>name == \"Alice\"</code> which is <code>False</code>, so <code>A or B</code> is <code>B</code> which is <code>\"Bob\"</code>.</p>\n<blockquote>\n<p>Is there a better way to write the condition without repeating <code>name ==</code> each time?</p>\n</blockquote>\n<p>Yes! In <a href=\"#FunctionsAndMethodsForLists\">Functions and Methods for Lists</a> we mentioned the <code>in</code>\noperator, which you can use with a list like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">return</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Charlie\"</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>But you can't always get rid of <code>or</code> like that.</p>\n<hr />\n<p>Exercise: Write a function named <code>is_valid_percentage</code>, accepting one numerical argument <code>x</code>.\nIt should return <code>True</code> if <code>x</code> is between 0 and 100 (inclusive), and return <code>False</code> otherwise.\nYour function should use <code>or</code>, and pass these tests:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "AnExercise", "hints": ["<p>Remember, you can use comparison operators <code>&lt;, &gt;, &lt;=, &gt;=, ==</code> to produce booleans.</p>", "<p>You need to check how <code>x</code> compares to 0 and how it compares to 100.</p>", "<p>You need to combine the two comparisons into one boolean using <code>or</code>.</p>", "<p>Above we used a trick so that the whole function body was just <code>return &lt;comparison&gt; or &lt;comparison&gt;</code>. But that won't work here!</p>", "<p>You need to use an <code>if</code> statement.</p>", "<p>You need to have a <code>return False</code> and a <code>return True</code>.</p>", "<p>If you have something like <code>x &gt;= 0 or x &lt;= 100</code>, you're on the wrong track. That's going to be true for <em>any</em> value of <code>x</code>. After all, 101 is greater than 0!</p>"], "solution": {"tokens": ["def", " ", "is_valid_percentage", "(", "x", ")", ":", "\n", "    ", "if", " ", "x", " ", "<", " ", "0", " ", "or", " ", "x", " ", ">", " ", "100", ":", "\n", "        ", "return", " ", "False", "\n", "    ", "else", ":", "\n", "        ", "return", " ", "True"], "maskedIndices": [33, 19, 0, 38, 27, 6, 13, 3, 9, 21, 24, 4, 23, 11, 29, 32, 15, 36, 5, 17, 2], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 9, "text": "<p>Good job!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingAnd": {"slug": "IntroducingAnd", "title": "Introducing <code>and</code>", "index": 46, "step_names": ["TrueAndTrue", "TrueAndFalse", "FalseAndFalse", "AndExercise", "TicTacToeWinningRow", "final_text"], "steps": [{"index": 0, "text": "<p>Another boolean operator in Python is <code>and</code>.\nThe expression <code>A and B</code> is <code>True</code> only if BOTH <code>A</code> and <code>B</code> are <code>True</code>. Otherwise it's <code>False</code>.\nTry it in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"kc\">True</span> <span class=\"ow\">and</span> <span class=\"kc\">True</span>\n</span></code></pre>", "name": "TrueAndTrue", "hints": [], "solution": {"tokens": ["True", " ", "and", " ", "True"], "maskedIndices": [0, 2, 4], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": ["True", "False", "Error"], "answer": "True"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 1, "text": "<p>Good, now try:</p>\n<pre><code class=\"codehilite\"><span><span class=\"kc\">True</span> <span class=\"ow\">and</span> <span class=\"kc\">False</span>\n</span></code></pre>\n<p>What do you expect?</p>", "name": "TrueAndFalse", "hints": [], "solution": {"tokens": ["True", " ", "and", " ", "False"], "maskedIndices": [0, 2, 4], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": ["True", "False", "Error"], "answer": "False"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 2, "text": "<p>Finally, try:</p>\n<pre><code class=\"codehilite\"><span><span class=\"kc\">False</span> <span class=\"ow\">and</span> <span class=\"kc\">False</span>\n</span></code></pre>", "name": "FalseAndFalse", "hints": [], "solution": {"tokens": ["False", " ", "and", " ", "False"], "maskedIndices": [4, 0, 2], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": ["True", "False", "Error"], "answer": "False"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 3, "text": "<p>Let's practice now. Previously we wrote a function <code>is_valid_percentage</code> using <code>or</code>. Here's an example\nsolution:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Rewrite this function using <code>and</code> instead.</p>", "name": "AndExercise", "hints": ["<p>If you have something like <code>x &lt; 0 and x &gt; 100</code>, you're on the wrong track. That's going to be <code>False</code> for <em>any</em> value of <code>x</code>!</p>", "<p>The solution with <code>and</code> is different in several ways from the solution with <code>or</code>.</p>", "<p>Our solution with <code>or</code> first determines if <code>x</code> is an invalid percentage, else concludes validity. Using <code>and</code> will do this in reverse.</p>", "<p>You will have to reverse the <code>return</code> statements accordingly.</p>", "<p>You will have to change the comparison operators too.</p>"], "solution": {"tokens": ["def", " ", "is_valid_percentage", "(", "x", ")", ":", "\n", "    ", "if", " ", "0", " ", "<=", " ", "x", " ", "and", " ", "x", " ", "<=", " ", "100", ":", "\n", "        ", "return", " ", "True", "\n", "    ", "else", ":", "\n", "        ", "return", " ", "False"], "maskedIndices": [29, 36, 15, 11, 38, 21, 3, 0, 13, 33, 9, 5, 27, 23, 19, 4, 24, 32, 17, 2, 6], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 4, "text": "<p>Awesome! Here's one possible solution:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">x</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n</span></code></pre>\n<p>As before, we can simplify this solution to:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">x</span> <span class=\"ow\">and</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">100</span>\n</span></code></pre>\n<p>There's another trick to improve this further called comparison chaining. Any condition like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span> <span class=\"ow\">and</span> <span class=\"n\">b</span> <span class=\"o\">&lt;</span> <span class=\"n\">c</span>\n</span></code></pre>\n<p>can be shortened by removing the extra <code>and b</code> into:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">&lt;</span> <span class=\"n\">c</span>\n</span></code></pre>\n<p>This works for any comparison operators, including <code>==</code>, and the two operators can even be different.\nSo the solution can be simplified to:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">is_valid_percentage</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">100</span>\n</span></code></pre>\n<p>Next exercise: given a list of three elements, check if all three elements are equal.</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">all_equal</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">all_equal</span><span class=\"p\">([</span><span class=\"s2\">\"X\"</span><span class=\"p\">,</span> <span class=\"s2\">\"X\"</span><span class=\"p\">,</span> <span class=\"s2\">\"X\"</span><span class=\"p\">]),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">all_equal</span><span class=\"p\">([</span><span class=\"s2\">\"O\"</span><span class=\"p\">,</span> <span class=\"s2\">\"O\"</span><span class=\"p\">,</span> <span class=\"s2\">\"O\"</span><span class=\"p\">]),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">all_equal</span><span class=\"p\">([</span><span class=\"s2\">\"X\"</span><span class=\"p\">,</span> <span class=\"s2\">\"O\"</span><span class=\"p\">,</span> <span class=\"s2\">\"X\"</span><span class=\"p\">]),</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "TicTacToeWinningRow", "hints": ["<p>The list will always have 3 elements.</p>", "<p>That means you don't need to use a loop.</p>", "<p>Remember that you can get the first element using <code>row[0]</code>.</p>", "<p>The first element, second element, and third element all need to be equal.</p>", "<p>That means the first element should be equal to the second element and also the third element.</p>"], "solution": {"tokens": ["def", " ", "all_equal", "(", "row", ")", ":", "\n", "    ", "return", " ", "row", "[", "0", "]", " ", "==", " ", "row", "[", "1", "]", " ", "and", " ", "row", "[", "0", "]", " ", "==", " ", "row", "[", "2", "]"], "maskedIndices": [33, 14, 11, 35, 0, 21, 4, 25, 18, 20, 23, 12, 9, 32, 26, 19, 5, 13, 28, 34, 2, 3, 16, 6, 30, 27], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">all_equal</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 5, "text": "<p>Good job. There are many possible correct solutions here:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">all_equal</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>or using comparison chaining again:</p>\n<pre><code class=\"codehilite\"><span>    <span class=\"k\">return</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>or check that it's equal to a list containing the first element three times:</p>\n<pre><code class=\"codehilite\"><span>    <span class=\"k\">return</span> <span class=\"n\">row</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n</span></code></pre>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "MultiLineExpressions": {"slug": "MultiLineExpressions", "title": "Multi-line statements", "index": 47, "step_names": ["invalid_multiline", "valid_multiline", "final_text"], "steps": [{"index": 0, "text": "<p>Our code lines are starting to get quite long.\nThankfully Python offers a few ways to spread out one statement across many lines,\nbut it's not automatic. You have to make sure Python understands that's what you're doing.\nFor example, this code is invalid syntax and will give you an error:</p>\n<pre><code>is_friend = name == \"Alice\" or\n            name == \"Bob\"\n</code></pre>", "name": "invalid_multiline", "hints": [], "solution": {"tokens": ["is_friend", " ", "=", " ", "name", " ", "==", " ", "\"Alice\"", " ", "or", "\n", "            ", "name", " ", "==", " ", "\"Bob\""], "maskedIndices": [4, 2, 6, 8, 10, 13, 0, 15, 17], "mask": [true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Python tries to intepret this as two separate lines of code and gets confused. You need to tell it that\nthe first line is continuing onto the second line.</p>\n<p>One way to do this is by adding <code>\\</code> at the end of the line to 'escape' the line break.</p>\n<p>Another way is to ensure that the line break is contained within some kind of brackets. Then the line\ncontinuation is implied because Python will wait till all brackets have been closed before\nconsidering a line to be complete. If you already have brackets because for example you're calling a function\nor making a list, you may not need to do anything! Otherwise you can add brackets to any expression\nto imply the line continuation.</p>\n<p>Here are some examples. Pay close attention to the details.</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Bob\"</span>\n\n<span class=\"n\">is_friend</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span> \\\n            <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bob\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">is_friend</span><span class=\"p\">)</span>\n\n<span class=\"n\">is_friend</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span>\n             <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bob\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">is_friend</span><span class=\"p\">)</span>\n\n<span class=\"n\">is_friend</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span><span class=\"p\">,</span>\n             <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bob\"</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">is_friend</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Alice\"</span> <span class=\"ow\">or</span>\n      <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Bob\"</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "valid_multiline", "hints": [], "solution": {"tokens": ["name", " ", "=", " ", "\"Bob\"", "\n", "\n", "is_friend", " ", "=", " ", "name", " ", "==", " ", "\"Alice\"", " ", "or", " \\\n            ", "name", " ", "==", " ", "\"Bob\"", "\n", "print", "(", "is_friend", ")", "\n", "\n", "is_friend", " ", "=", " ", "(", "name", " ", "==", " ", "\"Alice\"", " ", "or", "\n", "             ", "name", " ", "==", " ", "\"Bob\"", ")", "\n", "print", "(", "is_friend", ")", "\n", "\n", "is_friend", " ", "=", " ", "[", "name", " ", "==", " ", "\"Alice\"", ",", "\n", "             ", "name", " ", "==", " ", "\"Bob\"", "]", "\n", "print", "(", "is_friend", ")", "\n", "\n", "print", "(", "name", " ", "==", " ", "\"Alice\"", " ", "or", "\n", "      ", "name", " ", "==", " ", "\"Bob\"", ")"], "maskedIndices": [79, 52, 15, 38, 92, 23, 97, 42, 33, 85, 18, 67, 21, 19, 60, 58, 65, 71, 54, 7, 47, 76, 95, 35, 68, 9, 75, 100, 28, 84, 40, 86, 62, 13, 4, 63, 36, 31, 81, 2, 53, 99, 11, 55, 90, 80, 25, 27, 78, 50, 0, 45, 73, 17, 88, 49, 26], "mask": [true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>So if you get a mysterious <code>SyntaxError</code>, make sure that you haven't improperly broken up any lines!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "CombiningAndAndOr": {"slug": "CombiningAndAndOr", "title": "Combining <code>and</code> and <code>or</code>", "index": 48, "step_names": ["CombiningAndOr", "AndHasHigherPriority", "final_text"], "steps": [{"index": 0, "text": "<p>If you use both <code>and</code> and <code>or</code> in a single expression, it's a lot like combining <code>*</code> and <code>+</code>.\nThe operators are evaluated in a specific order.</p>\n<p>For example, try the following code in the shell.\nWhat do you expect?</p>\n<pre><code class=\"codehilite\"><span><span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"kc\">False</span> <span class=\"ow\">and</span> <span class=\"kc\">False</span>\n</span></code></pre>", "name": "CombiningAndOr", "hints": [], "solution": {"tokens": ["True", " ", "or", " ", "False", " ", "and", " ", "False"], "maskedIndices": [0, 8, 4, 2, 6], "mask": [true, false, true, false, true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 1, "text": "<p>If you read it casually from left to right, you may think that:</p>\n<pre><code class=\"codehilite\"><span><span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"kc\">False</span> <span class=\"ow\">and</span> <span class=\"kc\">False</span>\n</span></code></pre>\n<p>is equivalent to</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">(</span><span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"kc\">False</span>\n</span></code></pre>\n<p>but it's actually equivalent to</p>\n<pre><code class=\"codehilite\"><span><span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"kc\">False</span> <span class=\"ow\">and</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>This is because <code>and</code> has a higher priority than <code>or</code>.\nThis is important because the first interpretation reduces to <code>True and False</code> which is <code>False</code>, while the second\ninterpretation reduces to <code>True or False</code> which is <code>True</code>!\nYou can try both options with parentheses in the shell to confirm.</p>\n<p><strong>The lesson here is to be extra careful when combining operators.</strong> Either add parentheses to be safe or\nbreak up your expression into smaller parts and assign each part to a variable.\nThis will make your code clear, readable, and unambiguous, and will save you from painful mistakes.</p>\n<p>Time for an exercise. Suppose you're writing a program to play tic-tac-toe,\nalso known as noughts and crosses or Xs and Os. If you've never heard of tic-tac-toe, you can read the rules\nand play a few games <a href=\"https://gametable.org/games/tic-tac-toe/\">here</a>.</p>\n<p>We need to check if someone has won a game. Our function <code>all_equal</code> is already helpful for checking rows.</p>\n<p>Write a function to check if someone has won a game by placing 3 of the same pieces on one of the diagonal lines.\nThe board is given as a nested list <code>board</code> of 3 sublists, each sublist containing 3 strings, representing a row. For example:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</span></code></pre>\n<p>The function should return a boolean: <code>True</code> if one of the diagonals have 3 of the same pieces, <code>False</code> otherwise.\nClick the Copy button to get started with the code below.\nWe provided some tests for you, your job is to replace the <code>...</code> with your code.</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">diagonal_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">diagonal_winner</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">diagonal_winner</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">diagonal_winner</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "AndHasHigherPriority", "hints": ["<p>How many diagonals are there on the board?</p>", "<p>Which entries of the three sublists make up each diagonal? How can you access these entries?</p>", "<p>Every list always has 3 entries, so no need for a loop.</p>", "<p>There are two problems to solve here: checking for a win in a specific diagonal, and combining the checks for each diagonal.</p>", "<p>One problem can be solved using <code>and</code>, the other using <code>or</code>.</p>", "<p>There's a lot of similarity with the <code>all_equal</code> function. You can even call that function to help! But then you have to include its definition.</p>", "<p>Similar to <code>all_equal</code>, check that the 3 entries on a diagonal are equal to each other, e.g. by using <code>and</code>.</p>", "<p>Check the two diagonals together, using <code>or</code>.</p>"], "solution": {"tokens": ["def", " ", "diagonal_winner", "(", "board", ")", ":", "\n", "    ", "middle", " ", "=", " ", "board", "[", "1", "]", "[", "1", "]", "\n", "    ", "return", " ", "(", "\n", "            ", "(", "middle", " ", "==", " ", "board", "[", "0", "]", "[", "0", "]", " ", "and", " ", "middle", " ", "==", " ", "board", "[", "2", "]", "[", "2", "]", ")", " ", "or", "\n", "            ", "(", "middle", " ", "==", " ", "board", "[", "0", "]", "[", "2", "]", " ", "and", " ", "middle", " ", "==", " ", "board", "[", "2", "]", "[", "0", "]", ")", "\n", "    ", ")"], "maskedIndices": [46, 84, 51, 44, 73, 36, 66, 78, 16, 64, 83, 27, 4, 82, 13, 68, 52, 2, 22, 28, 15, 0, 79, 69, 67, 38, 77, 6, 58, 18, 24, 37, 19, 59, 48, 61, 11, 5, 34, 55, 33, 63, 75, 65, 9, 14, 40, 17, 87, 81, 35, 80, 30, 32, 71, 3, 49, 53, 50, 47, 42], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">diagonal_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 2, "text": "<p>Well done! This was a hard one. Here are some possible solutions:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">diagonal_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"n\">middle</span> <span class=\"o\">=</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"n\">middle</span> <span class=\"o\">==</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">middle</span> <span class=\"o\">==</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"ow\">or</span>\n            <span class=\"p\">(</span><span class=\"n\">middle</span> <span class=\"o\">==</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">middle</span> <span class=\"o\">==</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"p\">)</span>\n</span></code></pre>\n<p>or:</p>\n<pre><code class=\"codehilite\"><span>    <span class=\"n\">diagonal1</span> <span class=\"o\">=</span> <span class=\"n\">all_equal</span><span class=\"p\">([</span><span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]])</span>\n    <span class=\"n\">diagonal2</span> <span class=\"o\">=</span> <span class=\"n\">all_equal</span><span class=\"p\">([</span><span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]])</span>\n    <span class=\"k\">return</span> <span class=\"n\">diagonal1</span> <span class=\"ow\">or</span> <span class=\"n\">diagonal2</span>\n</span></code></pre>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingNotPage": {"slug": "IntroducingNotPage", "title": "Introducing <code>not</code>", "index": 49, "step_names": ["IntroducingNot", "NotFalse", "NotTrueOrTrue", "NotPriority", "final_text"], "steps": [{"index": 0, "text": "<p>Unlike the other two boolean operators <code>and</code> and <code>or</code>,\nwhich are used in between two booleans (called <em>binary</em> operators),\n<code>not</code> is used before only one boolean (called a <em>unary</em> operator).\nIt negates the expression to which it is applied, a bit like a minus sign. Try in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"ow\">not</span> <span class=\"kc\">True</span>\n</span></code></pre>", "name": "IntroducingNot", "hints": [], "solution": {"tokens": ["not", " ", "True"], "maskedIndices": [2, 0], "mask": [true, false, true], "lines": null}, "prediction": {"choices": ["True", "False", "Error"], "answer": "False"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Now try the following:</p>\n<pre><code class=\"codehilite\"><span><span class=\"ow\">not</span> <span class=\"kc\">False</span>\n</span></code></pre>", "name": "NotFalse", "hints": [], "solution": {"tokens": ["not", " ", "False"], "maskedIndices": [2, 0], "mask": [true, false, true], "lines": null}, "prediction": {"choices": ["True", "False", "Error"], "answer": "True"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>What is the priority of <code>not</code> compared to <code>and</code> and <code>or</code>? Try the following in <code>birdseye</code>:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">b</span> <span class=\"ow\">or</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "NotTrueOrTrue", "hints": [], "solution": {"tokens": ["b", " ", "=", " ", "True", "\n", "print", "(", "not", " ", "b", " ", "or", " ", "b", ")"], "maskedIndices": [8, 2, 10, 6, 0, 15, 7, 4, 14, 12], "mask": [true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>With your code in the editor, click the <code>birdseye</code> button.</p>"}]}, {"index": 3, "text": "<p>You can see in <code>birdseye</code> that</p>\n<pre><code class=\"codehilite\"><span><span class=\"ow\">not</span> <span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"kc\">True</span>\n</span></code></pre>\n<p>is interpreted by Python as</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"kc\">True</span>\n</span></code></pre>\n<p>rather than:</p>\n<pre><code class=\"codehilite\"><span><span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"kc\">True</span> <span class=\"ow\">or</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>So, <code>not</code> has higher priority than <code>or</code> if there are no parentheses. It's the same as how</p>\n<pre><code class=\"codehilite\"><span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span>\n</span></code></pre>\n<p>means:</p>\n<pre><code class=\"codehilite\"><span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span>\n</span></code></pre>\n<p>rather than</p>\n<pre><code class=\"codehilite\"><span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</span></code></pre>\n<p><code>not</code> also has higher priority than <code>and</code>.</p>\n<p>Again, the main thing to remember is to use parentheses or extra variables when in doubt.</p>\n<p>Exercise: Suppose you're writing a program which processes images. Only certain types of file can be processed.\nIf the user gives you a file that can't be processed, you want to show an error:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">invalid_image</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I can't process \"</span> <span class=\"o\">+</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Suppose that .png and .jpg files can be processed, but other file types cannot.\nHere's an example function to do that:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">invalid_image</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".png\"</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".jpg\"</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">invalid_image</span><span class=\"p\">(</span><span class=\"s2\">\"dog.png\"</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">invalid_image</span><span class=\"p\">(</span><span class=\"s2\">\"cat.jpg\"</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">invalid_image</span><span class=\"p\">(</span><span class=\"s2\">\"invoice.pdf\"</span><span class=\"p\">),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>This is longer than it needs to be. Rewrite <code>invalid_image</code> so that the body is a single line <code>return &lt;expression&gt;</code>,\ni.e. no <code>if</code> statement. It should pass the same tests.</p>", "name": "NotPriority", "hints": ["<p>What if you were instead asked to simplify this related but opposite function?</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">valid_image</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".png\"</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".jpg\"</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">valid_image</span><span class=\"p\">(</span><span class=\"s2\">\"dog.png\"</span><span class=\"p\">),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">valid_image</span><span class=\"p\">(</span><span class=\"s2\">\"cat.jpg\"</span><span class=\"p\">),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">valid_image</span><span class=\"p\">(</span><span class=\"s2\">\"invoice.pdf\"</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</span></code></pre>", "<p>In that case there is a standard simplification trick you can apply that we discussed a few pages ago.</p>", "<p>In particular the <code>returns</code> are redundant because <code>filename.endswith(\".png\") or filename.endswith(\".jpg\")</code> is already the desired boolean.</p>", "<p>So you can just write:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">valid_image</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".png\"</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".jpg\"</span><span class=\"p\">)</span>\n</span></code></pre>", "<p>For the real exercise, you can do something similar.</p>", "<p>The difference in the real exercise is that the result is reversed.</p>", "<p>That is, <code>invalid_image</code> returns <code>True</code> when <code>valid_image</code> returns <code>False</code> and vice versa.</p>", "<p>Remember what <code>not</code> does?</p>"], "solution": {"tokens": ["def", " ", "invalid_image", "(", "filename", ")", ":", "\n", "    ", "return", " ", "not", " ", "(", "filename", ".", "endswith", "(", "\".png\"", ")", " ", "or", " ", "filename", ".", "endswith", "(", "\".jpg\"", ")", ")"], "maskedIndices": [0, 13, 15, 6, 29, 2, 19, 26, 11, 28, 16, 5, 17, 14, 21, 4, 25, 23, 24, 9, 27, 3, 18], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">invalid_image</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 4, "text": "<p>Well done! Here are two valid solutions:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">invalid_image</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".png\"</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".jpg\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">invalid_image</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".png\"</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".jpg\"</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>(if you're curious, these are equivalent because of something called De Morgan's law)</p>\n<p>Also notice that this is another general pattern that can be simplified: if your code has the form:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</span></code></pre>\n<p>where <code>x</code> itself is a boolean, then it can be simplified to:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">x</span>\n</span></code></pre>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingTicTacToe": {"slug": "IntroducingTicTacToe", "title": "Checking the board for winners", "index": 50, "step_names": ["intro_row_winner", "column_winner", "diagonal_winner", "winner", "final_text"], "steps": [{"index": 0, "text": "<p>You've done many short exercises solving one little problem. Now we're going to tackle a larger, more complex\nproject which will really test your knowledge and require combining many smaller parts together.\nIt's going to be so fun!</p>\n<p>You will develop a text-based interactive tic-tac-toe game to be played by 2 human players.\nHere is a small preview of what the finished game will look like in play:</p>\n<pre><code>  1 2 3\n1  | |\n  -+-+-\n2  | |\n  -+-+-\n3  | |\n\nX to play:\n1\n1\n\n  1 2 3\n1 X| |\n  -+-+-\n2  | |\n  -+-+-\n3  | |\n\nO to play:\n2\n2\n\n  1 2 3\n1 X| |\n  -+-+-\n2  |O|\n  -+-+-\n3  | |\n\nX to play:\n1\n3\n\n  1 2 3\n1 X| |X\n  -+-+-\n2  |O|\n  -+-+-\n3  | |\n</code></pre>\n<p>We will break up the project into several small functions, which will be exercises.</p>\n<p>You will use many of the concepts you have learned so far: strings,\nnested lists, nested loops, <code>range</code>, calling functions within functions, comparisons, and booleans.</p>\n<p>Along the way you will also learn some new concepts, including newline characters, types, and <code>input()</code>.</p>\n<p>Here is a rough outline of the project:</p>\n<ul>\n<li>three functions <code>row_winner</code>, <code>column_winner</code>,  <code>diagonal_winner</code>  that check the whole board for winning rows, columns, and diagonals</li>\n<li>a function <code>winner</code> that checks the whole board for a winner, combining the above functions</li>\n<li>a function <code>format_board</code> that displays the current state of the game</li>\n<li>a function <code>play_move</code> that takes user input to play a move,</li>\n<li>finally a <code>play_game</code> function that puts it all together and runs the game interactively.</li>\n<li>Later on we will add further improvements.</li>\n</ul>\n<p>Let's get started!</p>\n<p>As in the last chapter, we will represent the tic-tac-toe board as a nested list of strings.\nFor a typical game this will be a 3x3 list, i.e. 3 lists each containing 3 strings, with players represented by <code>'X'</code> or <code>'O'</code>.\nEmpty squares will be represented by a space, i.e. <code>' '</code>. For example:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</span></code></pre>\n<p>However to make things more interesting your code will need to work for square boards of any size\n(4x4, 5x5, etc) where players can be represented by any strings, e.g.</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</span></code></pre>\n<p>Write a function <code>row_winner</code> which returns <code>True</code> if <code>board</code> contains\na winning row, i.e. a horizontal line which has the same character in all its entries (except <code>' '</code>):</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">row_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">row_winner</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">row_winner</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>In the second example, <code>O</code> wins in the bottom row.</p>", "name": "intro_row_winner", "hints": ["<p>You need to check every row in the board, so you'll need a loop for that.</p>", "<p>How can you check if all entries in a row are equal to each other?</p>", "<p>That's a self contained problem on its own. You can start by forgetting about the whole board and just checking a single row.</p>", "<p>You could even write a function which just does this, although you don't have to.</p>", "<p>Since the row could have any size, you'll have to loop all the way through it.</p>", "<p>For each row, define a boolean. Then loop through that row, updating the boolean accordingly.</p>", "<p>You can use the first entry <code>row[0]</code> in a row to compare all the row entries to it.</p>", "<p>Think carefully about what the initial value of the boolean should be, and under what conditions you should change its value.</p>", "<p>After looping through a row, if you determined that all its entries are equal, then return <code>True</code> (ending the outer loop early).</p>", "<p>Make sure you don't return <code>True</code> for a row filled with spaces.</p>", "<p>Make sure you return <code>False</code> if there are no winning rows</p>"], "solution": {"tokens": ["def", " ", "row_winner", "(", "board", ")", ":", "\n", "    ", "for", " ", "row", " ", "in", " ", "board", ":", "\n", "        ", "all_equal", " ", "=", " ", "True", "\n", "        ", "piece", " ", "=", " ", "row", "[", "0", "]", "\n", "        ", "for", " ", "entry", " ", "in", " ", "row", ":", "\n", "            ", "if", " ", "entry", " ", "==", " ", "' '", " ", "or", " ", "piece", " ", "!=", " ", "entry", ":", "\n", "                ", "all_equal", " ", "=", " ", "False", "\n", "                ", "break", "\n", "        ", "if", " ", "all_equal", ":", "\n", "            ", "return", " ", "True", "\n", "    ", "return", " ", "False"], "maskedIndices": [74, 3, 40, 76, 60, 54, 64, 56, 4, 42, 13, 80, 32, 2, 68, 48, 52, 71, 19, 77, 11, 46, 33, 85, 23, 21, 58, 50, 0, 82, 31, 66, 30, 87, 15, 9, 38, 5, 6, 16, 26, 28, 61, 43, 36], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, true], "lines": [{"id": "7", "content": "                <span class=\"k\">break</span>"}, {"id": "8", "content": "        <span class=\"k\">if</span> <span class=\"n\">all_equal</span><span class=\"p\">:</span>"}, {"id": "2", "content": "        <span class=\"n\">all_equal</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>"}, {"id": "3", "content": "        <span class=\"n\">piece</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>"}, {"id": "10", "content": "    <span class=\"k\">return</span> <span class=\"kc\">False</span>"}, {"id": "5", "content": "            <span class=\"k\">if</span> <span class=\"n\">entry</span> <span class=\"o\">==</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"ow\">or</span> <span class=\"n\">piece</span> <span class=\"o\">!=</span> <span class=\"n\">entry</span><span class=\"p\">:</span>"}, {"id": "4", "content": "        <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">row</span><span class=\"p\">:</span>"}, {"id": "9", "content": "            <span class=\"k\">return</span> <span class=\"kc\">True</span>"}, {"id": "1", "content": "    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">board</span><span class=\"p\">:</span>"}, {"id": "6", "content": "                <span class=\"n\">all_equal</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>"}, {"id": "0", "content": "<span class=\"k\">def</span> <span class=\"nf\">row_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">row_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 1, "text": "<p>Great job!</p>\n<p>Now write a similar function <code>column_winner</code> which checks for a winning <em>column</em> (a vertical line) of either piece:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">column_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">column_winner</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">column_winner</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Here <code>O</code> won in the second column of the second board.</p>", "name": "column_winner", "hints": ["<p>You can start by imitating <code>row_winner</code> above, then change it to make it work with columns.</p>", "<p>You can't loop through the columns of <code>board</code> as simply as its rows.</p>", "<p>What <em>is</em> a column of a nested list? The first column consists of the first element of the first row, the first element of the second row, etc.</p>", "<p>Looping through all columns means looking at the first element of every row, then the second element of every row, etc.</p>", "<p>So you need to loop through numbers representing the positions first, second, etc.</p>", "<p>How do you find the number of columns in <code>board</code>?</p>", "<p>That covers the outer loop, which goes through each column. Then you need an inner loop to go through each element in the column.</p>", "<p>The different entries of a column are NOT on the same row. So how can you access them?</p>", "<p>You can loop through rows of the board and find the element corresponding to that row and the current column.</p>", "<p>To access all the entries of, say, the 5th column, you can loop through all the rows, and access the 5th element in each row.</p>", "<p>Define a boolean for each column, then update it accordingly inside the inner loop.</p>", "<p>The rest of the logic is very similar to <code>row_winner</code>.</p>", "<p>Watch out for <code>' '</code>.</p>", "<p>Remember to return <code>False</code> at the end if needed.</p>"], "solution": {"tokens": ["def", " ", "column_winner", "(", "board", ")", ":", "\n", "    ", "for", " ", "col", " ", "in", " ", "range", "(", "len", "(", "board", "[", "0", "]", ")", ")", ":", "\n", "        ", "all_equal", " ", "=", " ", "True", "\n", "        ", "piece", " ", "=", " ", "board", "[", "0", "]", "[", "col", "]", "\n", "        ", "for", " ", "row", " ", "in", " ", "board", ":", "\n", "            ", "if", " ", "row", "[", "col", "]", " ", "==", " ", "' '", " ", "or", " ", "row", "[", "col", "]", " ", "!=", " ", "piece", ":", "\n", "                ", "all_equal", " ", "=", " ", "False", "\n", "                ", "break", "\n", "        ", "if", " ", "all_equal", ":", "\n", "            ", "return", " ", "True", "\n", "    ", "return", " ", "False"], "maskedIndices": [9, 89, 73, 42, 37, 18, 92, 76, 54, 69, 50, 65, 82, 86, 16, 24, 30, 43, 62, 44, 74, 4, 2, 55, 45, 20, 67, 60, 72, 17, 94, 41, 32, 61, 13, 35, 100, 63, 78, 0, 6, 48, 52, 28, 11, 25, 103, 22, 71, 15, 40, 23, 39, 21, 3, 95, 98, 105, 79, 84, 58, 5, 19], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, true], "lines": [{"id": "9", "content": "            <span class=\"k\">return</span> <span class=\"kc\">True</span>"}, {"id": "1", "content": "    <span class=\"k\">for</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])):</span>"}, {"id": "8", "content": "        <span class=\"k\">if</span> <span class=\"n\">all_equal</span><span class=\"p\">:</span>"}, {"id": "2", "content": "        <span class=\"n\">all_equal</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>"}, {"id": "6", "content": "                <span class=\"n\">all_equal</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>"}, {"id": "10", "content": "    <span class=\"k\">return</span> <span class=\"kc\">False</span>"}, {"id": "7", "content": "                <span class=\"k\">break</span>"}, {"id": "4", "content": "        <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">board</span><span class=\"p\">:</span>"}, {"id": "0", "content": "<span class=\"k\">def</span> <span class=\"nf\">column_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>"}, {"id": "3", "content": "        <span class=\"n\">piece</span> <span class=\"o\">=</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">col</span><span class=\"p\">]</span>"}, {"id": "5", "content": "            <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"ow\">or</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">piece</span><span class=\"p\">:</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">column_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 2, "text": "<p>Excellent! That was challenging.</p>\n<p>Finally we need to check for winning diagonals. You already wrote a function to do just that in the previous chapter, for 3-by-3 boards:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">diagonal_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"n\">middle</span> <span class=\"o\">=</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"n\">middle</span> <span class=\"o\">==</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">middle</span> <span class=\"o\">==</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"ow\">or</span>\n            <span class=\"p\">(</span><span class=\"n\">middle</span> <span class=\"o\">==</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">middle</span> <span class=\"o\">==</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"p\">)</span>\n</span></code></pre>\n<p>Now write a <code>diagonal_winner</code> that works for square boards of any size: 4-by-4, 5-by-5, and so on...</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">diagonal_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">diagonal_winner</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">diagonal_winner</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>In the first example, <code>X</code> won in the diagonal going from the bottom left to the top right.</p>", "name": "diagonal_winner", "hints": ["<p>How many diagonals are there on a square board of arbitrary size?</p>", "<p>Even if the size of the board changes, the number of diagonals remains the same!</p>", "<p>You can't do something like <code>middle == board[0][0] and middle == board[2][2]</code> this time, because you don't know how long a diagonal is.</p>", "<p>Moreover the two diagonals might not have anything in common like <code>middle</code>.</p>", "<p>First, focus on the diagonal that goes from top left to bottom right.</p>", "<p>How can you access those entries with double subscripting?</p>", "<p>Do you see a pattern in those double subscripts? Get some paper and pen, work it out on some examples.</p>", "<p>Now focus on the other diagonal (from top right to bottom left). There is a pattern in the subscripts again, but it's a little bit more difficult.</p>", "<p>Do you remember negative indexing? It might be helpful here.</p>", "<p>Once you get the hang of the patterns, use the same ideas from before to check if all entries are equal.</p>", "<p>You can use one loop and check both diagonals at the same time. Or you can use one loop for each diagonal.</p>"], "solution": {"tokens": ["def", " ", "diagonal_winner", "(", "board", ")", ":", "\n", "    ", "all_equal1", " ", "=", " ", "True", "\n", "    ", "all_equal2", " ", "=", " ", "True", "\n", "    ", "topleft", " ", "=", " ", "board", "[", "0", "]", "[", "0", "]", "\n", "    ", "topright", " ", "=", " ", "board", "[", "0", "]", "[", "-", "1", "]", "\n", "    ", "for", " ", "i", " ", "in", " ", "range", "(", "len", "(", "board", ")", ")", ":", "\n", "        ", "if", " ", "board", "[", "i", "]", "[", "i", "]", " ", "==", " ", "' '", " ", "or", " ", "board", "[", "i", "]", "[", "i", "]", " ", "!=", " ", "topleft", ":", "\n", "            ", "all_equal1", " ", "=", " ", "False", "\n", "        ", "if", " ", "board", "[", "i", "]", "[", "-", "i", " ", "-", " ", "1", "]", " ", "==", " ", "' '", " ", "or", " ", "board", "[", "i", "]", "[", "-", "i", " ", "-", " ", "1", "]", " ", "!=", " ", "topright", ":", "\n", "            ", "all_equal2", " ", "=", " ", "False", "\n", "    ", "return", " ", "all_equal1", " ", "or", " ", "all_equal2"], "maskedIndices": [109, 18, 147, 134, 86, 74, 87, 108, 116, 29, 152, 128, 127, 2, 76, 5, 4, 126, 139, 135, 41, 115, 66, 85, 11, 50, 90, 72, 62, 38, 154, 42, 156, 150, 124, 25, 28, 45, 83, 84, 120, 132, 70, 69, 16, 129, 78, 20, 88, 118, 130, 30, 137, 23, 61, 140, 105, 113, 63, 80, 122, 13, 60, 44, 27, 110, 82, 9, 107, 31, 98, 71, 59, 106, 93, 6, 52, 145, 54, 111, 32, 125, 33, 46, 92, 40, 100, 47, 73, 3, 58, 103, 57, 0, 36, 96, 56, 143, 43, 68], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true], "lines": [{"id": "8", "content": "        <span class=\"k\">if</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"ow\">or</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">topright</span><span class=\"p\">:</span>"}, {"id": "10", "content": "    <span class=\"k\">return</span> <span class=\"n\">all_equal1</span> <span class=\"ow\">or</span> <span class=\"n\">all_equal2</span>"}, {"id": "9", "content": "            <span class=\"n\">all_equal2</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>"}, {"id": "0", "content": "<span class=\"k\">def</span> <span class=\"nf\">diagonal_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>"}, {"id": "1", "content": "    <span class=\"n\">all_equal1</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>"}, {"id": "7", "content": "            <span class=\"n\">all_equal1</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>"}, {"id": "2", "content": "    <span class=\"n\">all_equal2</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>"}, {"id": "6", "content": "        <span class=\"k\">if</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"ow\">or</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">topleft</span><span class=\"p\">:</span>"}, {"id": "4", "content": "    <span class=\"n\">topright</span> <span class=\"o\">=</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>"}, {"id": "3", "content": "    <span class=\"n\">topleft</span> <span class=\"o\">=</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>"}, {"id": "5", "content": "    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)):</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">diagonal_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 3, "text": "<p>Bravo! That was quite tough.</p>\n<p>Now we can put the three functions together! Write a function <code>winner</code> that takes an argument <code>board</code> as before,\nand returns <code>True</code> if <code>board</code> contains either a winning row, column or diagonal, <code>False</code> otherwise.</p>\n<p>Your solution should work by calling the three functions. <code>winner</code> itself should not do any\nlooping, subscripting, etc.</p>\n<p>Here is some code for <code>row_winner</code>, <code>column_winner</code> and <code>diagonal_winner</code>, along with some tests for <code>winner</code>.\nClick the Copy button, and fill in the blanks for your <code>winner</code> function.</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">winning_line</span><span class=\"p\">(</span><span class=\"n\">strings</span><span class=\"p\">):</span>\n    <span class=\"n\">piece</span> <span class=\"o\">=</span> <span class=\"n\">strings</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">piece</span> <span class=\"o\">==</span> <span class=\"s1\">' '</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">strings</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">piece</span> <span class=\"o\">!=</span> <span class=\"n\">entry</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">row_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">board</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">winning_line</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">column_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])):</span>\n        <span class=\"n\">column</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">board</span><span class=\"p\">:</span>\n            <span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">winning_line</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">diagonal_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"n\">diagonal1</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">diagonal2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)):</span>\n        <span class=\"n\">diagonal1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"n\">diagonal2</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">winning_line</span><span class=\"p\">(</span><span class=\"n\">diagonal1</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">winning_line</span><span class=\"p\">(</span><span class=\"n\">diagonal2</span><span class=\"p\">)</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">winner</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">winner</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">winner</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "winner", "hints": ["<p>The solution is quite short! Simply use the three functions correctly.</p>", "<p>Think about possible cases. When does <code>winner(board)</code> return <code>False</code>? When does it return <code>True</code>?</p>", "<p>How can you use the three functions and a boolean operator together to get the result you need?</p>"], "solution": {"tokens": ["def", " ", "winner", "(", "board", ")", ":", "\n", "    ", "return", " ", "row_winner", "(", "board", ")", " ", "or", " ", "column_winner", "(", "board", ")", " ", "or", " ", "diagonal_winner", "(", "board", ")"], "maskedIndices": [13, 16, 18, 3, 28, 19, 12, 4, 23, 20, 9, 6, 11, 5, 25, 2, 0, 26, 21, 14, 27], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 4, "text": "<p>Great work!</p>\n<p>Now we have the code to determine a winning state on the board.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "NewlinesAndFormatBoard": {"slug": "NewlinesAndFormatBoard", "title": "The newline character, <code>format_board</code>", "index": 51, "step_names": ["one_way_to_print_board", "invalid_multi_line_string", "multi_line_strings_triple_quotes", "discovering_newline", "introducing_newline", "format_board_simple", "format_board_bonus_challenge", "final_text"], "steps": [{"index": 0, "text": "<p>Next we want to tackle the problem of displaying the tic-tac-toe board. Here's one way to do this:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">print_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">board</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">))</span>\n\n<span class=\"n\">print_board</span><span class=\"p\">([</span>\n    <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">]</span>\n<span class=\"p\">])</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>(What's <code>\"\".join</code>? Google it!)</p>", "name": "one_way_to_print_board", "hints": [], "solution": {"tokens": ["def", " ", "print_board", "(", "board", ")", ":", "\n", "    ", "for", " ", "row", " ", "in", " ", "board", ":", "\n", "        ", "print", "(", "\"\"", ".", "join", "(", "row", ")", ")", "\n", "\n", "print_board", "(", "[", "\n", "    ", "[", "'X'", ",", " ", "'O'", ",", " ", "'X'", "]", ",", "\n", "    ", "[", "' '", ",", " ", "'O'", ",", " ", "'O'", "]", ",", "\n", "    ", "[", "' '", ",", " ", "'X'", ",", " ", "' '", "]", "\n", "]", ")"], "maskedIndices": [63, 26, 23, 15, 9, 2, 3, 24, 22, 52, 61, 37, 6, 49, 30, 69, 56, 44, 66, 59, 13, 48, 42, 11, 64, 40, 19, 43, 27, 54, 47, 67, 21, 25, 36, 60, 39, 16, 31, 55, 70, 5, 20, 4, 51, 35, 0, 32], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>This is a good start but ideally we'd like a function which <em>returns</em> a string rather than printing it.\nThis way other code can make easy use of the string in different ways. We might want to manipulate the string\n(e.g. draw a box around it or extract only the first few lines), we might want to send it somewhere other than the screen\n(e.g. a file) and in this particular case we want to be able to test it with <code>assert_equal</code>. This doesn't work:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">print_board</span><span class=\"p\">([</span><span class=\"o\">...</span><span class=\"p\">]),</span> <span class=\"s2\">\"...\"</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>because <code>print_board</code> doesn't use <code>return</code> so it just returns <code>None</code> by default.\nSo instead we want code like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"o\">...</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">format_board</span><span class=\"p\">([</span><span class=\"o\">...</span><span class=\"p\">]),</span> <span class=\"s2\">\"...\"</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>Then <code>print(format_board(board))</code> should print something like what we saw at the beginning.\nBut how do we return a string with multiple lines? And how do we test it? We'd like to do something like this:</p>\n<pre><code class=\" copyable\">assert_equal(\n    format_board([\n        ['X', 'O', 'X'],\n        [' ', 'O', 'O'],\n        [' ', 'X', ' ']\n    ]),\n    \"XOX\n      OO\n      X \"\n)\n<button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>See for yourself how this doesn't work.</p>", "name": "invalid_multi_line_string", "hints": [], "solution": {"tokens": ["assert_equal", "(", "\n", "    ", "format_board", "(", "[", "\n", "        ", "[", "'X'", ",", " ", "'O'", ",", " ", "'X'", "]", ",", "\n", "        ", "[", "' '", ",", " ", "'O'", ",", " ", "'O'", "]", ",", "\n", "        ", "[", "' '", ",", " ", "'X'", ",", " ", "' '", "]", "\n", "    ", "]", ")", ",", "\n", " ", " ", " ", " ", "\"", "XOX", "\n", "      ", "OO", "\n", "      ", "X", " ", "\"", "\n", ")"], "maskedIndices": [61, 17, 13, 34, 22, 9, 5, 56, 16, 10, 29, 26, 44, 28, 6, 41, 11, 45, 38, 14, 40, 53, 46, 59, 25, 37, 1, 33, 21, 35, 63, 0, 30, 18, 4, 23, 52], "mask": [true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>Normally a string literal has to be on one line, so this is invalid:</p>\n<pre><code>string = \"First line\nSecond line\"\nprint(string)\n</code></pre>\n<p>But Python provides a way! The solution is to use <em>triple quotes</em>, i.e. three quote characters in a row\n(either <code>'''</code> or <code>\"\"\"</code>) around the contents of the string. Run the following:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"First line</span>\n<span class=\"s2\">Second line\"\"\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "multi_line_strings_triple_quotes", "hints": [], "solution": {"tokens": ["string", " ", "=", " ", "\"\"\"First line\nSecond line\"\"\"", "\n", "print", "(", "string", ")"], "maskedIndices": [6, 2, 9, 0, 8, 4, 7], "mask": [true, false, true, false, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>Hooray! A <em>triple quoted string</em> is allowed to span many lines and they will be shown in the output.</p>\n<p>Like single and double quotes, triple quotes are just another kind of notation, not a new kind of string.\n<code>\"\"\"abc\"\"\"</code> is the same thing as <code>\"abc\"</code>.</p>\n<p>However <code>string</code> does contain something new. Run <code>string</code> in the shell to see.</p>", "name": "discovering_newline", "hints": [], "solution": {"tokens": ["string"], "maskedIndices": [0], "mask": [true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 4, "text": "<p>There's the secret!</p>\n<p><code>\\n</code> represents a <strong><em>newline</em></strong> character. This is just another character, like a letter or a space (<code>' '</code>).\nIt's the character between two separate lines that you type in by pressing Enter on your keyboard.</p>\n<p>Again, <code>\\n</code> <em>represents</em> the newline character within a Python string literal.\nThe string doesn't actually contain <code>\\</code> and <code>n</code>, it just contains one character. Check this in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</span></code></pre>", "name": "introducing_newline", "hints": [], "solution": {"tokens": ["len", "(", "'\\n'", ")"], "maskedIndices": [1, 3, 2, 0], "mask": [true, true, true, true], "lines": null}, "prediction": {"choices": ["1", "2", "Error"], "answer": "1"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 5, "text": "<p>Now use the newline character to write the function <code>format_board</code> (your solution should work for a square <code>board</code> of any size):</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">format_board</span><span class=\"p\">([</span>\n        <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">]</span>\n    <span class=\"p\">]),</span>\n    <span class=\"s1\">'XOX</span><span class=\"se\">\\n</span><span class=\"s1\">O  </span><span class=\"se\">\\n</span><span class=\"s1\"> XO'</span>\n<span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "format_board_simple", "hints": ["<p>Look carefully at the test case we provided. It shows you all you need!</p>", "<p>You need to build up a string for the whole board. Start with an empty string.</p>", "<p>For each row, add the characters from that row to the string.</p>", "<p>You'll need a nested loop.</p>", "<p>When you reach the end of a row, you need to add a newline before the next row.</p>", "<p><code>'\\n'</code> is just like any other character! You can add it as usual with <code>+</code>.</p>", "<p>Notice that the end of the last row is different than the others.</p>", "<p>Before you add a newline, you'll need to check if it's the last row or not.</p>", "<p>Your outer loop should loop over the length of the board.</p>", "<p>Then check if you are at the last index or not.</p>"], "solution": {"tokens": ["def", " ", "format_board", "(", "board", ")", ":", "\n", "    ", "result", " ", "=", " ", "''", "\n", "    ", "for", " ", "i", " ", "in", " ", "range", "(", "len", "(", "board", ")", ")", ":", "\n", "        ", "for", " ", "char", " ", "in", " ", "board", "[", "i", "]", ":", "\n", "            ", "result", " ", "+=", " ", "char", "\n", "        ", "if", " ", "i", " ", "!=", " ", "len", "(", "board", ")", " ", "-", " ", "1", ":", "\n", "            ", "result", " ", "+=", " ", "'\\n'", "\n", "    ", "return", " ", "result"], "maskedIndices": [23, 11, 63, 54, 39, 24, 28, 29, 40, 6, 36, 18, 2, 52, 26, 69, 42, 13, 4, 27, 5, 59, 45, 60, 71, 16, 25, 34, 38, 73, 56, 61, 32, 65, 9, 58, 49, 0, 78, 20, 76, 47, 3, 22, 41, 66], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true], "lines": [{"id": "5", "content": "        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span>"}, {"id": "2", "content": "    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)):</span>"}, {"id": "7", "content": "    <span class=\"k\">return</span> <span class=\"n\">result</span>"}, {"id": "0", "content": "<span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>"}, {"id": "6", "content": "            <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>"}, {"id": "4", "content": "            <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>"}, {"id": "1", "content": "    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>"}, {"id": "3", "content": "        <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 6, "text": "<p>Excellent! A typical solution looks like:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)):</span>\n        <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n            <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</span></code></pre>\n<p>If you looked up how <code>join</code> works and used it in your solution, that's great!\nYou might have solved it with something like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"n\">joined_rows</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">board</span><span class=\"p\">:</span>\n        <span class=\"n\">joined_rows</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">joined_rows</span><span class=\"p\">)</span>\n</span></code></pre>\n<p>If you'd like, you can just continue to the <a href=\"#Types\">next page</a> now. Or you can do a bonus challenge!</p>\n<p>Write an improved version of <code>format_board</code> that displays row and column separators. For example, if</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</span></code></pre>\n<p>then <code>print(format_board(board))</code> should print</p>\n<pre><code>X|O|X\n-+-+-\n |O|O\n-+-+-\n |X|\n</code></pre>\n<p>Once again it should work for a square <code>board</code> of <em>any size</em>.</p>\n<p>You are strongly encouraged to use <code>join</code> on this exercise. We provide one test as before, you can write additional tests:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">format_board</span><span class=\"p\">([</span>\n        <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">]</span>\n    <span class=\"p\">]),</span>\n    <span class=\"s1\">'X|O|X</span><span class=\"se\">\\n</span><span class=\"s1\">-+-+-</span><span class=\"se\">\\n</span><span class=\"s1\">O| | </span><span class=\"se\">\\n</span><span class=\"s1\">-+-+-</span><span class=\"se\">\\n</span><span class=\"s1\"> |X|O'</span>\n<span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "format_board_bonus_challenge", "hints": ["<p>There are two types of lines to be displayed: one type has the pieces joined by <code>|</code>s in between them, the other type has <code>-</code>s joined by <code>+</code>s in between them.</p>", "<p>Both of these types of lines can be built up by using <code>join</code> appropriately.</p>", "<p>For example, how can you convert a row <code>['X', 'O', 'X']</code> into <code>'X|O|X'</code> using <code>join</code>?</p>", "<p>Similarly, how can you obtain <code>'-+-+-'</code> using <code>join</code>? To what list should you apply <code>join</code>?</p>", "<p>Once you figured out how to build up both types of lines, how can you combine them to obtain the final result?</p>", "<p>Notice that the lines with the <code>+-</code>  signs are always the same.</p>", "<p>And there is one line with <code>+-</code> separating every consecutive pair of lines with pieces.</p>", "<p>You can use <code>join</code> on the lines themselves!</p>", "<p>The lines with the pieces can be joined together with the <code>+-</code> line in between them (with newlines added in appropriate places).</p>", "<p>To do that, first you need to keep the lines with the pieces stored in a list as you are building them.</p>", "<p>Then apply <code>join</code> to that list, with the <code>+-</code> line as separator.</p>", "<p>To add the newlines to the <code>+-</code> line correctly, take a look at the test case we provided.</p>"], "solution": {"tokens": ["def", " ", "format_board", "(", "board", ")", ":", "\n", "    ", "joined_rows", " ", "=", " ", "[", "]", "\n", "    ", "for", " ", "row", " ", "in", " ", "board", ":", "\n", "        ", "joined_rows", ".", "append", "(", "\"|\"", ".", "join", "(", "row", ")", ")", "\n", "    ", "lines", " ", "=", " ", "[", "]", "\n", "    ", "for", " ", "_", " ", "in", " ", "board", "[", "0", "]", ":", "\n", "        ", "lines", ".", "append", "(", "\"-\"", ")", "\n", "    ", "line", " ", "=", " ", "f'\\n{\"+\".join(lines)}\\n'", "\n", "    ", "return", " ", "line", ".", "join", "(", "joined_rows", ")"], "maskedIndices": [50, 31, 57, 69, 21, 34, 11, 44, 6, 3, 9, 83, 0, 30, 36, 61, 42, 58, 14, 62, 40, 71, 19, 32, 54, 55, 33, 65, 2, 66, 52, 45, 28, 37, 4, 82, 63, 80, 79, 73, 64, 13, 35, 5, 56, 17, 76, 29, 81, 27, 48, 78, 23, 24], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true], "lines": [{"id": "7", "content": "    <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"s2\">&quot;+&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>"}, {"id": "0", "content": "<span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>"}, {"id": "6", "content": "        <span class=\"n\">lines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;-&quot;</span><span class=\"p\">)</span>"}, {"id": "4", "content": "    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>"}, {"id": "3", "content": "        <span class=\"n\">joined_rows</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;|&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">))</span>"}, {"id": "1", "content": "    <span class=\"n\">joined_rows</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>"}, {"id": "8", "content": "    <span class=\"k\">return</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">joined_rows</span><span class=\"p\">)</span>"}, {"id": "5", "content": "    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>"}, {"id": "2", "content": "    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">board</span><span class=\"p\">:</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 7, "text": "<p>Great work! That was quite challenging.</p>\n<p>Now you have mastered how to build up a string of multiple lines of text, and solved the problem of displaying the board to the players.</p>\n<p>Next you will learn more about types in Python and how to convert them, and how to get input from the players.\nYou are already about halfway done with the project. Keep going!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "Types": {"slug": "Types", "title": "Types", "index": 52, "step_names": ["five_different_types", "check_type_manually", "different_types_look_same", "plus_has_two_meanings", "less_than_has_two_meanings", "less_than_sorting_strings", "common_type_errors", "fixing_type_errors_with_conversion", "format_board_with_numbers", "final_text"], "steps": [{"index": 0, "text": "<p>So far we've seen various kinds of data: strings, lists, numbers and booleans.\nThese are called <em>types</em>. Every value has a type which affects how it behaves\nand can be revealed with the <code>type</code> function:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"s1\">'Hello World'</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"mi\">23</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"mf\">4.56</span><span class=\"p\">))</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "five_different_types", "hints": [], "solution": {"tokens": ["print", "(", "type", "(", "'Hello World'", ")", ")", "\n", "print", "(", "type", "(", "23", ")", ")", "\n", "print", "(", "type", "(", "True", ")", ")", "\n", "print", "(", "type", "(", "[", "1", ",", " ", "2", ",", " ", "3", "]", ")", ")", "\n", "print", "(", "type", "(", "4.56", ")", ")"], "maskedIndices": [0, 3, 26, 5, 45, 14, 17, 43, 29, 38, 20, 28, 12, 6, 13, 41, 22, 35, 16, 21, 4, 27, 25, 44, 11, 40, 36, 18, 24, 1, 37, 33, 9, 46, 32, 30, 19, 2, 42, 10, 8], "mask": [true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Python reports first that <code>type('Hello World')</code> is <code>&lt;class 'str'&gt;</code>. Don't worry about <code>class</code> for now.\n<code>str</code> is short for <em>string</em>.</p>\n<p>Then <code>True</code> is a <code>bool</code> (short for <em>boolean</em>) and <code>[1, 2, 3]</code> has type <code>list</code>.</p>\n<p>Note that there are two types for numbers:</p>\n<ul>\n<li><code>int</code>, short for 'integer', is for whole numbers, meaning no fractions or decimal points.</li>\n<li><code>float</code>, short for 'floating point number', is for numbers with a decimal point and maybe a fractional part</li>\n</ul>\n<p>In most cases you don't have to worry about the different types of number, as you can mix the two when doing maths.</p>\n<p>Types are values which can be used in various ways, just like other values.\nFor example, try this in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">int</span>\n</span></code></pre>", "name": "check_type_manually", "hints": [], "solution": {"tokens": ["type", "(", "3", ")", " ", "==", " ", "int"], "maskedIndices": [2, 0, 3, 5, 1, 7], "mask": [true, true, true, true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 2, "text": "<p>Values with different types are usually quite different from each other, but they can look the same when printed,\nwhich can be confusing. Try this:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'123'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">123</span> <span class=\"o\">==</span> <span class=\"s1\">'123'</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>(You can use <code>print(repr(123))</code> and <code>print(repr('123'))</code> to tell the difference. What's <code>repr</code>? Google it!)</p>", "name": "different_types_look_same", "hints": [], "solution": {"tokens": ["print", "(", "'123'", ")", "\n", "print", "(", "123", ")", "\n", "print", "(", "123", " ", "==", " ", "'123'", ")"], "maskedIndices": [10, 3, 5, 17, 2, 16, 8, 0, 7, 14, 6, 12, 11, 1], "mask": [true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>Different types have different methods and support different operators.\nThe same method or operator can also mean different things.\nFor example, see how <code>+</code> has different meanings for <code>str</code> and <code>int</code>:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">123</span> <span class=\"o\">+</span> <span class=\"mi\">456</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'123'</span> <span class=\"o\">+</span> <span class=\"s1\">'456'</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "plus_has_two_meanings", "hints": [], "solution": {"tokens": ["print", "(", "123", " ", "+", " ", "456", ")", "\n", "print", "(", "'123'", " ", "+", " ", "'456'", ")"], "maskedIndices": [0, 1, 9, 15, 7, 6, 2, 10, 4, 11, 13, 16], "mask": [true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": ["579\n579", "579\n'579'", "123456\n123456", "123456\n'123456'", "579\n123456", "579\n'123456'", "Error"], "answer": "579\n123456"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 4, "text": "<p>For two integers <code>+</code> acts as addition, whereas for two strings it acts as string concatenation.\nPython automatically figures out the meaning of <code>+</code> from the types of the inputs.\nSimilarly <code>&lt;</code> acts differently on two strings and two integers:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">13</span> <span class=\"o\">&lt;</span> <span class=\"mi\">120</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'13'</span> <span class=\"o\">&lt;</span> <span class=\"s1\">'120'</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "less_than_has_two_meanings", "hints": [], "solution": {"tokens": ["print", "(", "13", " ", "<", " ", "120", ")", "\n", "print", "(", "'13'", " ", "<", " ", "'120'", ")"], "maskedIndices": [0, 2, 15, 13, 1, 6, 11, 9, 16, 4, 10, 7], "mask": [true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, true, true], "lines": null}, "prediction": {"choices": ["True\nTrue", "True\nFalse", "False\nTrue", "False\nFalse", "Error"], "answer": "True\nFalse"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 5, "text": "<p>So <code>&lt;</code> acts as the usual 'less than' between two integers, because <code>13</code> is less than <code>120</code>,\nbut it acts as the dictionary ordering between two strings: <code>13</code> is 'alphabetically' after <code>120</code>\nbecause <code>3</code> comes after <code>2</code>.</p>\n<p>See what difference this makes when sorting a list:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"s1\">'120'</span><span class=\"p\">,</span> <span class=\"s1\">'13'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">]))</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "less_than_sorting_strings", "hints": [], "solution": {"tokens": ["print", "(", "sorted", "(", "[", "120", ",", " ", "13", ",", " ", "0", "]", ")", ")", "\n", "print", "(", "sorted", "(", "[", "'120'", ",", " ", "'13'", ",", " ", "'0'", "]", ")", ")"], "maskedIndices": [11, 27, 16, 18, 22, 3, 13, 21, 9, 6, 28, 17, 30, 5, 0, 24, 19, 12, 29, 14, 2, 4, 1, 25, 20, 8], "mask": [true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": ["[0, 13, 120]\n['0', '120', '13']", "[0, 13, 120]\n['13', '120', '0']", "[0, 13, 120]\n['120', '13', '0']", "[120, 13, 0]\n['0', '120', '13']", "[120, 13, 0]\n['13', '120', '0']", "[120, 13, 0]\n['120', '13', '0']", "Error"], "answer": "[0, 13, 120]\n['0', '120', '13']"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 6, "text": "<p>What happens if you use an operator between a <code>str</code> and an <code>int</code>? Try in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"mi\">12</span> <span class=\"o\">+</span> <span class=\"s1\">'34'</span>\n</span></code></pre>", "name": "common_type_errors", "hints": [], "solution": {"tokens": ["12", " ", "+", " ", "'34'"], "maskedIndices": [2, 4, 0], "mask": [true, false, true, false, true], "lines": null}, "prediction": {"choices": ["46", "'46'", "1234", "'1234'", "Error"], "answer": "Error"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 7, "text": "<p>Using a string instead of an integer in <code>range</code> like <code>range('5')</code>,\nor in list subscripting like <code>list['3']</code> will also lead to an error.</p>\n<p>Most of these problems can be solved by converting the string to an integer by using <code>int</code> as a function:\n<code>int('5')</code> will return the integer <code>5</code>.\nSimilarly an integer can be converted to a string by using <code>str</code> as a function:\n<code>str(5)</code> will return the string <code>'5'</code>.</p>\n<p>Using this new knowledge, fix this broken program:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"s1\">'3'</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Starting... '</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Go!'</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>The correct program should print:</p>\n<pre><code>Starting... 1\nStarting... 2\nStarting... 3\nGo!\n</code></pre>\n<p>Your solution should work for any value of the variable <code>number</code>.</p>", "name": "fixing_type_errors_with_conversion", "hints": ["<p>At what points is this code broken?</p>", "<p>There are values that need to be converted to a different type.</p>", "<p>Specifically there's a <code>str</code> that needs to be converted to an <code>int</code>.</p>", "<p>And an <code>int</code> that needs to be converted to a <code>str</code>.</p>"], "solution": {"tokens": ["for", " ", "i", " ", "in", " ", "range", "(", "int", "(", "number", ")", ")", ":", "\n", "    ", "print", "(", "'Starting... '", " ", "+", " ", "str", "(", "i", " ", "+", " ", "1", ")", ")", "\n", "print", "(", "'Go!'", ")"], "maskedIndices": [11, 2, 26, 32, 0, 20, 8, 30, 18, 9, 34, 4, 6, 10, 12, 33, 29, 28, 7, 22, 23, 16, 17, 13, 35, 24], "mask": [true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"s1\">'1'</span>\n</span></code></pre>"}]}, {"index": 8, "text": "<p>Write an improved version of <code>format_board</code> that has row and column numbers like this:</p>\n<pre><code> 123\n1XOX\n2 OO\n3 X\n</code></pre>\n<p>It should work for boards of any single-digit size. Here's a test case:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">format_board</span><span class=\"p\">([</span>\n        <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">]</span>\n    <span class=\"p\">]),</span>\n    <span class=\"s1\">' 123</span><span class=\"se\">\\n</span><span class=\"s1\">1XOX</span><span class=\"se\">\\n</span><span class=\"s1\">2O  </span><span class=\"se\">\\n</span><span class=\"s1\">3 XO'</span>\n<span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "format_board_with_numbers", "hints": ["<p>You can start by using the ideas from your previous solution to <code>format_board</code>. Using <code>join</code> is highly recommended!</p>", "<p>The first line has to be treated separately from the rest.</p>", "<p>Remember that <code>range</code> yields numbers in the way: 0, 1, 2, ...</p>", "<p>We want numbers on the first line like this: 1, 2, 3...</p>", "<p>Each number has to be converted to a string before being added to the first row!</p>", "<p>For the rows of the board itself, do something similar.</p>", "<p>Start with a list consisting only of the first line that you built above.</p>", "<p>Add each row's string to the list, then join the list with a newline character.</p>"], "solution": {"tokens": ["def", " ", "format_board", "(", "board", ")", ":", "\n", "    ", "first_row", " ", "=", " ", "' '", "\n", "    ", "for", " ", "i", " ", "in", " ", "range", "(", "len", "(", "board", ")", ")", ":", "\n", "        ", "first_row", " ", "+=", " ", "str", "(", "i", " ", "+", " ", "1", ")", "\n", "    ", "joined_rows", " ", "=", " ", "[", "first_row", "]", "\n", "    ", "for", " ", "i", " ", "in", " ", "range", "(", "len", "(", "board", ")", ")", ":", "\n", "        ", "joined_row", " ", "=", " ", "str", "(", "i", " ", "+", " ", "1", ")", " ", "+", " ", "''", ".", "join", "(", "board", "[", "i", "]", ")", "\n", "        ", "joined_rows", ".", "append", "(", "joined_row", ")", "\n", "    ", "return", " ", "\"\\n\"", ".", "join", "(", "joined_rows", ")"], "maskedIndices": [90, 6, 109, 98, 105, 28, 52, 32, 76, 5, 25, 63, 100, 0, 43, 91, 16, 51, 94, 64, 75, 23, 27, 108, 101, 67, 55, 48, 71, 79, 93, 112, 107, 22, 92, 81, 59, 66, 36, 68, 11, 61, 9, 4, 50, 42, 77, 82, 65, 40, 97, 20, 24, 46, 87, 2, 3, 57, 99, 84, 37, 38, 29, 86, 102, 26, 62, 111, 88, 13, 89, 34, 73, 110, 18], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true], "lines": [{"id": "8", "content": "    <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">joined_rows</span><span class=\"p\">)</span>"}, {"id": "0", "content": "<span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>"}, {"id": "6", "content": "        <span class=\"n\">joined_row</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>"}, {"id": "5", "content": "    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)):</span>"}, {"id": "7", "content": "        <span class=\"n\">joined_rows</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">joined_row</span><span class=\"p\">)</span>"}, {"id": "3", "content": "        <span class=\"n\">first_row</span> <span class=\"o\">+=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>"}, {"id": "4", "content": "    <span class=\"n\">joined_rows</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">first_row</span><span class=\"p\">]</span>"}, {"id": "2", "content": "    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)):</span>"}, {"id": "1", "content": "    <span class=\"n\">first_row</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; &#39;</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 9, "text": "<p>Excellent!</p>\n<p>By the way, when you need to concatenate strings and numbers, remember that you can also\nuse f-strings. They often look nicer.</p>\n<p>You've learned about types in Python and how to avoid common errors by converting types.\nKeep going with the rest of the project!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "InteractiveProgramsWithInput": {"slug": "InteractiveProgramsWithInput", "title": "Interactive Programs with <code>input()</code>", "index": 53, "step_names": ["first_input", "convert_input_to_int", "final_text"], "steps": [{"index": 0, "text": "<p>The programs we have written so far are not interactive.\nTo make our interactive Tic-tac-toe game, we will need a method of receiving input from the players.\nPython allows us to do that with the built-in <code>input</code> function. Run this program:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Type your name, then press Enter:'</span><span class=\"p\">)</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Hello </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s1\">!'</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>When <code>name = input()</code> runs, the program actually stops and waits for you to type in the shell and press Enter,\nso you will need to do that for it to complete.</p>", "name": "first_input", "hints": [], "solution": {"tokens": ["print", "(", "'Type your name, then press Enter:'", ")", "\n", "name", " ", "=", " ", "input", "(", ")", "\n", "print", "(", "f'Hello {name}!'", ")"], "maskedIndices": [7, 9, 11, 2, 13, 10, 0, 14, 3, 5, 15, 16, 1], "mask": [true, true, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Whatever you typed in (not including pressing Enter at the end) is returned from the <code>input()</code> function as a string.</p>\n<p>It's essential to understand that <code>input()</code> <strong><em>always returns a string</em></strong>, no matter what the user typed in.\nIt's up to you to convert that string to the type you need.\nForgetting this detail is a common source of confusing bugs.</p>\n<p>For example, this program looks fine at a glance, but if you try it out you'll see that it doesn't actually work:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">super_secret_number</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"What number am I thinking of?\"</span><span class=\"p\">)</span>\n<span class=\"n\">guess</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">guess</span> <span class=\"o\">==</span> <span class=\"n\">super_secret_number</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Amazing! Are you psychic?\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Nope!\"</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Fix the program so that when the user inputs the value of <code>super_secret_number</code> (<code>7</code> in this example)\nthe program prints <code>Amazing! Are you psychic?</code> as expected.\nIt should work when <code>super_secret_number</code> is any whole number (<code>int</code>).</p>", "name": "convert_input_to_int", "hints": ["<p><code>input()</code> always returns a string.</p>", "<p>A string that looks like a number is still a string, not a number.</p>", "<p>In <code>super_secret_number = 7</code>, <code>7</code> is a number, not a string.</p>", "<p>That makes <code>super_secret_number</code> also a number.</p>", "<p>A string cannot equal a number.</p>", "<p>To check that two values are equal, make sure they're the same type first.</p>", "<p>So to compare a number and a string, first convert the number to a string or convert the string to a number.</p>", "<p>You learned how to convert between strings and numbers in the previous page.</p>", "<p>Use <code>int()</code> to convert to an integer (whole number) or <code>str()</code> to convert to a string.</p>"], "solution": {"tokens": ["print", "(", "\"What number am I thinking of?\"", ")", "\n", "guess", " ", "=", " ", "input", "(", ")", "\n", "if", " ", "int", "(", "guess", ")", " ", "==", " ", "super_secret_number", ":", "\n", "    ", "print", "(", "\"Amazing! Are you psychic?\"", ")", "\n", "else", ":", "\n", "    ", "print", "(", "\"Nope!\"", ")"], "maskedIndices": [20, 32, 16, 2, 11, 13, 38, 23, 35, 3, 26, 27, 28, 9, 37, 36, 10, 17, 15, 29, 22, 0, 7, 18, 5, 1, 31], "mask": [true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "non_function_exercise", "inputs": "<pre><code class=\"codehilite\"><span><span class=\"n\">super_secret_number</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n</span></code></pre>"}, {"type": "exercise_stdin"}]}, {"index": 2, "text": "<p>Perfect!</p>\n<p>There's two main fixes that would work here. You can convert the input to a number:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">guess</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">super_secret_number</span><span class=\"p\">:</span>\n</span></code></pre>\n<p>or convert the correct answer to a string:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">if</span> <span class=\"n\">guess</span> <span class=\"o\">==</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">super_secret_number</span><span class=\"p\">):</span>\n</span></code></pre>\n<p>An important difference between these two approaches is that the first approach will raise an error\nif the user types something that isn't a number, which may or may not be what you want.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "NestedListAssignment": {"slug": "NestedListAssignment", "title": "Nested List Assignment: Playing Moves on the Board", "index": 54, "step_names": ["modify_list_in_function", "nested_assignment_two_lines", "nested_assignment_input", "final_text"], "steps": [{"index": 0, "text": "<p>We've seen how to get input from the user, now let's use that to actually put pieces\non the board and play the game. For starters, try out this code:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">):</span>\n    <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">player</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">play_game</span><span class=\"p\">():</span>\n    <span class=\"n\">game_board</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\" \"</span><span class=\"p\">,</span> <span class=\"s2\">\" \"</span><span class=\"p\">,</span> <span class=\"s2\">\" \"</span><span class=\"p\">]</span>\n    <span class=\"n\">play_move</span><span class=\"p\">(</span><span class=\"n\">game_board</span><span class=\"p\">,</span> <span class=\"s2\">\"X\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">game_board</span><span class=\"p\">)</span>\n\n<span class=\"n\">play_game</span><span class=\"p\">()</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "modify_list_in_function", "hints": [], "solution": {"tokens": ["def", " ", "play_move", "(", "board", ",", " ", "player", ")", ":", "\n", "    ", "board", "[", "1", "]", " ", "=", " ", "player", "\n", "\n", "def", " ", "play_game", "(", ")", ":", "\n", "    ", "game_board", " ", "=", " ", "[", "\" \"", ",", " ", "\" \"", ",", " ", "\" \"", "]", "\n", "    ", "play_move", "(", "game_board", ",", " ", "\"X\"", ")", "\n", "    ", "print", "(", "game_board", ")", "\n", "\n", "play_game", "(", ")"], "maskedIndices": [48, 35, 0, 2, 62, 13, 27, 41, 32, 60, 57, 39, 8, 5, 26, 14, 4, 47, 56, 12, 45, 61, 3, 7, 51, 17, 55, 50, 54, 25, 38, 34, 36, 19, 46, 22, 30, 24, 15, 9, 42], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true], "lines": null}, "prediction": {"choices": ["X", "' '", "'X'", "[' ']", "['X']", "[' ', ' ', ' ']", "['X', ' ', ' ']", "[' ', 'X', ' ']", "[' ', ' ', 'X']", "Error"], "answer": "[' ', 'X', ' ']"}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Note how calling <code>play_move(game_board, 'X')</code> actually <em>modifies</em> <code>game_board</code> directly.\nThe variable <code>board</code> inside the call to <code>play_move</code> and\nthe variable <code>game_board</code> inside the call to <code>play_game</code> point to the same list object.\nThere's no copying. Python Tutor is good at showing this with arrows.</p>\n<p>This also means that in this case there's no need for <code>play_move</code> to return anything,\nit can just modify <code>board</code> and the caller (<code>play_game</code> in this case) will see the effect.</p>\n<p>However, our board is two dimensional, represented by a nested list.\nSo we need to assign <code>player</code> to an element of an inner list, something like this:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">):</span>\n    <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">player</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">play_game</span><span class=\"p\">():</span>\n    <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"s2\">\" \"</span><span class=\"p\">,</span> <span class=\"s2\">\" \"</span><span class=\"p\">,</span> <span class=\"s2\">\" \"</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s2\">\" \"</span><span class=\"p\">,</span> <span class=\"s2\">\" \"</span><span class=\"p\">,</span> <span class=\"s2\">\" \"</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s2\">\" \"</span><span class=\"p\">,</span> <span class=\"s2\">\" \"</span><span class=\"p\">,</span> <span class=\"s2\">\" \"</span><span class=\"p\">],</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"s2\">\"X\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)</span>\n\n<span class=\"n\">play_game</span><span class=\"p\">()</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "nested_assignment_two_lines", "hints": [], "solution": {"tokens": ["def", " ", "play_move", "(", "board", ",", " ", "player", ")", ":", "\n", "    ", "row", " ", "=", " ", "board", "[", "1", "]", "\n", "    ", "row", "[", "0", "]", " ", "=", " ", "player", "\n", "\n", "def", " ", "play_game", "(", ")", ":", "\n", "    ", "board", " ", "=", " ", "[", "\n", "        ", "[", "\" \"", ",", " ", "\" \"", ",", " ", "\" \"", "]", ",", "\n", "        ", "[", "\" \"", ",", " ", "\" \"", ",", " ", "\" \"", "]", ",", "\n", "        ", "[", "\" \"", ",", " ", "\" \"", ",", " ", "\" \"", "]", ",", "\n", "    ", "]", "\n", "    ", "play_move", "(", "board", ",", " ", "\"X\"", ")", "\n", "    ", "print", "(", "board", ")", "\n", "\n", "play_game", "(", ")"], "maskedIndices": [44, 42, 3, 76, 63, 22, 86, 17, 48, 79, 71, 24, 56, 88, 2, 91, 97, 73, 59, 40, 25, 78, 32, 16, 61, 47, 64, 51, 9, 34, 37, 72, 23, 95, 12, 4, 87, 101, 103, 36, 14, 35, 75, 27, 98, 83, 66, 80, 89, 7, 8, 52, 102, 55, 29, 0, 5, 54, 60, 18, 19, 49, 68, 92, 67, 96], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>These two lines:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">player</span>\n</span></code></pre>\n<p>can be combined into one:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">player</span>\n</span></code></pre>\n<p>The two pieces of code are pretty much exactly equivalent. Python first evaluates\n<code>board[1]</code> to <em>get</em> the inner list, while the <code>[0] = ...</code> sets an element of <code>board[1]</code>.\nYou can see the value of <code>board[1]</code> in <code>birdseye</code> because it's an expression,\nand you could actually replace it with any other expression.</p>\n<p>Now you know how to set elements in nested lists, it's time to make this interactive!\nWrite your own version of <code>play_move</code> that takes input from the user\nto determine where to play, instead of always playing at <code>board[1][0]</code>.\nIt should call <code>input()</code> twice, so the user can give the row and the column\nas two separate numbers. Also, our users are not programmers, so they start counting from 1,\nnot 0.</p>\n<p>For example, if the user types in these inputs:</p>\n<pre><code class=\"codehilite\"><span><span class=\"mi\">2</span>\n<span class=\"mi\">1</span>\n</span></code></pre>\n<p>that means they want to play a move in the second row and first column, which is the same\nas our original example.</p>\n<p>Here is some starting code:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"n\">first_row</span> <span class=\"o\">=</span> <span class=\"s1\">' '</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)):</span>\n        <span class=\"n\">first_row</span> <span class=\"o\">+=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">joined_rows</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">first_row</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)):</span>\n        <span class=\"n\">joined_row</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n        <span class=\"n\">joined_rows</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">joined_row</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">joined_rows</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">play_game</span><span class=\"p\">():</span>\n    <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n    <span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">X to play:</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">O to play:</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">play_game</span><span class=\"p\">()</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>This calls <code>play_move</code> twice so the user will need to enter two pairs of numbers.\nHere's an example of what a 'game' should look like:</p>\n<pre><code> 123\n1\n2\n3\n\nX to play:\n\n2\n1\n 123\n1\n2X\n3\n\nO to play:\n\n1\n3\n 123\n1  O\n2X\n3\n</code></pre>\n<p>You don't need to use the provided code exactly, it's just to give you a feeling of what's happening.\nThe important thing is that your <code>play_move</code> function modifies the <code>board</code> argument correctly.\nIt doesn't need to return or print anything, that will not be checked.</p>\n<p>You can assume that the user will always enter valid numbers. Later we will learn how to deal\nwith invalid inputs, like numbers out of range or inputs that aren't numbers at all.</p>", "name": "nested_assignment_input", "hints": ["<p>Your function needs to call <code>input()</code> twice. Input isn't passed to <code>play_move</code> as an argument.</p>", "<p><code>input()</code> always returns a string.</p>", "<p>A string that looks like a number is still a string, not a number.</p>", "<p>List indices have to be numbers, not strings.</p>", "<p>If the board is 3x3, the user might input 1, 2, or 3 for each coordinate.</p>", "<p>What are the valid indices of a list of length 3?</p>", "<p>You need to take the input of 1, 2, or 3 and turn it into 0, 1, or 2.</p>", "<p>You also need to be able to handle bigger boards, like 9x9 or beyond.</p>", "<p>You can't do maths with strings, only numbers.</p>", "<p>How can you convert a string to a number?</p>", "<p>Once you've got two numbers, you need to modify the nested list <code>board</code> with them.</p>", "<p>The code for this has been shown to you above.</p>", "<p>You just need to use the numbers from user input instead of the hardcoded 1 and 0.</p>", "<p>You can use nested subscripting in one line, or do it in two steps.</p>"], "solution": {"tokens": ["def", " ", "play_move", "(", "board", ",", " ", "player", ")", ":", "\n", "    ", "row", " ", "=", " ", "int", "(", "input", "(", ")", ")", " ", "-", " ", "1", "\n", "    ", "col", " ", "=", " ", "int", "(", "input", "(", ")", ")", " ", "-", " ", "1", "\n", "    ", "board", "[", "row", "]", "[", "col", "]", " ", "=", " ", "player"], "maskedIndices": [9, 49, 32, 35, 50, 37, 34, 33, 7, 28, 54, 18, 19, 17, 39, 20, 44, 46, 12, 16, 52, 23, 45, 47, 8, 5, 4, 48, 21, 25, 41, 14, 2, 3, 30, 0, 36], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "exercise_stdin"}, {"type": "custom", "message": "<p>Your function should modify the <code>board</code> argument. It doesn't need to <code>return</code> or <code>print</code> anything.</p>"}]}, {"index": 3, "text": "<p>Brilliant! You're almost ready to put it all together, keep going!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "MakingTheBoard": {"slug": "MakingTheBoard", "title": "Making the Board", "index": 55, "step_names": ["naive_make_board", "fix_make_board", "final_text"], "steps": [{"index": 0, "text": "<p>So far the board has been provided for you as a nested list.\nBut for the full program, you need to create it yourself.\nShould be easy, right? Here's some code to do that:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">make_board</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n    <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n        <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">)</span>\n    <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n        <span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">board</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n    <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">make_board</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n    <span class=\"p\">])</span>\n    <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'X'</span>\n    <span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">],</span>\n    <span class=\"p\">])</span>\n\n<span class=\"n\">test</span><span class=\"p\">()</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>It's close, but there's a subtle problem with it.\nMake sure you understand the code,\nand bonus points if you can spot the bug!\nIf not, don't feel bad or waste too much time on it.</p>", "name": "naive_make_board", "hints": [], "solution": {"tokens": ["def", " ", "make_board", "(", "size", ")", ":", "\n", "    ", "row", " ", "=", " ", "[", "]", "\n", "    ", "for", " ", "_", " ", "in", " ", "range", "(", "size", ")", ":", "\n", "        ", "row", ".", "append", "(", "' '", ")", "\n", "    ", "board", " ", "=", " ", "[", "]", "\n", "    ", "for", " ", "_", " ", "in", " ", "range", "(", "size", ")", ":", "\n", "        ", "board", ".", "append", "(", "row", ")", "\n", "    ", "return", " ", "board", "\n", "\n", "def", " ", "test", "(", ")", ":", "\n", "    ", "board", " ", "=", " ", "make_board", "(", "3", ")", "\n", "    ", "assert_equal", "(", "board", ",", " ", "[", "\n", "        ", "[", "' '", ",", " ", "' '", ",", " ", "' '", "]", ",", "\n", "        ", "[", "' '", ",", " ", "' '", ",", " ", "' '", "]", ",", "\n", "        ", "[", "' '", ",", " ", "' '", ",", " ", "' '", "]", ",", "\n", "    ", "]", ")", "\n", "    ", "board", "[", "0", "]", "[", "0", "]", " ", "=", " ", "'X'", "\n", "    ", "assert_equal", "(", "board", ",", " ", "[", "\n", "        ", "[", "'X'", ",", " ", "' '", ",", " ", "' '", "]", ",", "\n", "        ", "[", "' '", ",", " ", "' '", ",", " ", "' '", "]", ",", "\n", "        ", "[", "' '", ",", " ", "' '", ",", " ", "' '", "]", ",", "\n", "    ", "]", ")", "\n", "\n", "test", "(", ")"], "maskedIndices": [14, 126, 112, 6, 167, 84, 156, 188, 48, 185, 114, 54, 105, 141, 117, 138, 90, 118, 46, 201, 92, 154, 176, 75, 63, 123, 195, 95, 143, 74, 76, 35, 91, 32, 67, 148, 161, 163, 53, 2, 31, 196, 99, 187, 151, 86, 172, 34, 173, 183, 180, 199, 102, 131, 200, 27, 19, 179, 134, 64, 55, 171, 135, 17, 0, 100, 13, 30, 153, 25, 59, 127, 85, 111, 144, 140, 191, 24, 4, 192, 168, 152, 9, 184, 52, 82, 40, 42, 50, 38, 26, 107, 98, 5, 77, 80, 115, 160, 33, 146, 178, 164, 62, 139, 190, 122, 56, 69, 61, 119, 159, 142, 93, 21, 175, 87, 60, 129, 103, 106, 124, 166, 3, 72, 130, 11, 110, 23, 43], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 1, "text": "<p>Can you see what happened?</p>\n<p>Every row got an <code>'X'</code> in the first position!\nIt's as if the code actually did this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'X'</span>\n<span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'X'</span>\n<span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'X'</span>\n</span></code></pre>\n<p>Try and figure out what's wrong by yourself.\nBut again, it's tricky, so don't drive yourself crazy over it.</p>\n<p>If you want, here's some hints:</p>\n<ul>\n<li>Try running the code through some debuggers.</li>\n<li>Experiment. Make changes to the code and see what happens.</li>\n<li>No, the code didn't do 3 assignments like I suggested above. There was just one list assignment.</li>\n<li>There's no hidden loops or anything.</li>\n<li>How many lists does <code>board</code> contain? 3?</li>\n<li>The previous page has a subtle hint at what happened.</li>\n<li>There is a page from a previous chapter where this kind of problem is explained directly.</li>\n<li>Specifically <a href=\"#EqualsVsIs\">this page</a>.</li>\n<li>Try running the code with Python Tutor.</li>\n</ul>\n<p>OK, if you're ready, here's the answer.</p>\n<p>The list <code>row</code> was only created once, and reused several times.\n<code>board</code> contains the same list three times. Not copies, just one list in three places.\nIt's like it did this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">]</span>\n</span></code></pre>\n<p>Which means that this code:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'X'</span>\n</span></code></pre>\n<p>is equivalent to:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'X'</span>\n</span></code></pre>\n<p>which affects 'all the lists' in <code>board</code> because they're all just the one list <code>row</code>.\nIn other words, the above line is <em>also</em> equivalent to each of these two lines:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'X'</span>\n<span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'X'</span>\n</span></code></pre>\n<p>because <code>row</code> is <code>board[0]</code>, <code>board[1]</code>, and <code>board[2]</code> all at once.</p>\n<p>Your job now is to fix <code>make_board</code> to not have this problem.\nIt should still return a list of length <code>size</code> where each\nelement is also list of length <code>size</code> where each element is the string <code>' '</code>.\nThe sublists should all be separate list objects, not the same\nlist repeated.</p>", "name": "fix_make_board", "hints": ["<p>The existing code is almost correct.</p>", "<p>There are several ways to solve this.</p>", "<p>Some solutions involve adding something small.</p>", "<p>You can also rearrange the code without adding or removing anything (except spaces).</p>", "<p>The problem is that a single list <code>row</code> is used several times.</p>", "<p>So one solution is to make copies of <code>row</code> which will all be separate.</p>", "<p>Another solution is to make a new <code>row</code> from scratch each time.</p>", "<p>There are a few ways to copy a list in Python with a tiny bit of code.</p>", "<p>Making a new row each time can be done by just rearranging the code.</p>"], "solution": {"tokens": ["def", " ", "make_board", "(", "size", ")", ":", "\n", "    ", "board", " ", "=", " ", "[", "]", "\n", "    ", "for", " ", "_", " ", "in", " ", "range", "(", "size", ")", ":", "\n", "        ", "row", " ", "=", " ", "[", "]", "\n", "        ", "for", " ", "_", " ", "in", " ", "range", "(", "size", ")", ":", "\n", "            ", "row", ".", "append", "(", "' '", ")", "\n", "        ", "board", ".", "append", "(", "row", ")", "\n", "    ", "return", " ", "board"], "maskedIndices": [17, 64, 23, 60, 54, 35, 0, 13, 26, 46, 47, 53, 9, 14, 30, 27, 40, 45, 44, 38, 63, 59, 48, 67, 56, 51, 2, 52, 11, 61, 34, 6, 3, 32, 55, 69, 25, 5, 24, 42, 4, 62, 21, 19], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true], "lines": [{"id": "3", "content": "        <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>"}, {"id": "7", "content": "    <span class=\"k\">return</span> <span class=\"n\">board</span>"}, {"id": "4", "content": "        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>"}, {"id": "6", "content": "        <span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>"}, {"id": "2", "content": "    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>"}, {"id": "5", "content": "            <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span>"}, {"id": "0", "content": "<span class=\"k\">def</span> <span class=\"nf\">make_board</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>"}, {"id": "1", "content": "    <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">make_board</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n</span></code></pre>"}]}, {"index": 2, "text": "<p>Well done!</p>\n<p>This could be solved by moving the first loop inside the second to make a new <code>row</code> each time:</p>\n<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">make_board</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n    <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n        <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n            <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">)</span>\n        <span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">board</span>\n</span></code></pre>\n<p>Another way is to make a copy of <code>row</code> each time, e.g. keep the original code but change one line:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">())</span>\n</span></code></pre>\n<p>You can also copy <code>row</code> with <code>row[:]</code> or <code>list(row)</code>. But it's important to know that\nall these methods make a <em>shallow copy</em> of the list.\nThat means they copy the whole list at the top level, without making copies of each element.\nThat's fine in this case where <code>row</code> only contains strings which can't be modified\nand don't need copying. But if the elements are mutable objects like lists,\nas is the case with <code>board</code>, you may run into the same problem again.\nHere's an example:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">make_board</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n    <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n        <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">)</span>\n    <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n        <span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">board</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_cube</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n    <span class=\"n\">cube</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">make_board</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n        <span class=\"n\">cube</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">cube</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n    <span class=\"n\">cube</span> <span class=\"o\">=</span> <span class=\"n\">make_cube</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cube</span><span class=\"p\">)</span>\n    <span class=\"n\">cube</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'X'</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cube</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cube</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">cube</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cube</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">cube</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cube</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">cube</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"n\">test</span><span class=\"p\">()</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Here each element of <code>cube</code> is a separate list, a copy of <code>board</code>.\nAnd within each of those copies, each element is also a separate list, a copy of <code>row</code>.\nBut the shallow copies of <code>board</code> all have the same first element as each other (the first copy of <code>row</code>),\nthe same second element, and so on.\nChanging <code>make_board</code> won't fix anything here, the solution is to either:</p>\n<ul>\n<li>Call <code>make_board</code> repeatedly to make a new <code>board</code> each time, or</li>\n<li>Use the <code>deepcopy</code> function instead of <code>board.copy()</code>.\n  <code>deepcopy</code> makes copies at every level of nested objects.</li>\n</ul>\n<p>If you're still confused, don't worry.\nThis is just preparing you to deal with your code behaving weirdly in the future.\nYou're not required to understand this right now and this lesson will still be valuable.</p>\n<p>Either way, we're ready to make the full game. You can do it!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "TheFullTicTacToeGame": {"slug": "TheFullTicTacToeGame", "title": "The Full Tic-Tac-Toe Game", "index": 56, "step_names": ["the_full_game", "final_text"], "steps": [{"index": 0, "text": "<p>It's time to put it all together! Below is some code to get started.</p>\n<p>It includes implementations of the various functions we defined in previous pages for solving parts\nof the problem, using some tricks you haven't learned yet to make them shorter. Don't change them.</p>\n<p>Your task is to implement <code>play_game</code> correctly. The current implementation shows what\nshould happen at the start of the game, but it's obviously incomplete.\nThe solution should work for any board size and continue the game until it's finished.\nThe last thing that <code>play_game</code> should do is either call <code>print_winner(player)</code>\nif <code>winner(board)</code> is true, or call <code>print_draw()</code> if the board is filled up with no winner.</p>\n<p>You can assume that the user will only enter valid inputs,\ni.e. numbers from 1 to <code>board_size</code> to choose a cell on the board that isn't already taken.</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">winning_line</span><span class=\"p\">(</span><span class=\"n\">strings</span><span class=\"p\">):</span>\n    <span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">strings</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">strings</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"s1\">' '</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">strings</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">row_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">winning_line</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">board</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">column_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">row_winner</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">board</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main_diagonal_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">winning_line</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">diagonal_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">main_diagonal_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">main_diagonal_winner</span><span class=\"p\">(</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">row_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">column_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">diagonal_winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>\n    <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)</span>\n    <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">  </span><span class=\"si\">{</span><span class=\"s2\">\"+\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">\"-\"</span> <span class=\"o\">*</span> <span class=\"n\">size</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n    <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"s2\">\"|\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\">'</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">'  </span><span class=\"si\">{</span><span class=\"s2\">\" \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">))</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">player</span><span class=\"si\">}</span><span class=\"s1\"> to play:'</span><span class=\"p\">)</span>\n    <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">player</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_board</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[[</span><span class=\"s1\">' '</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">size</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_winner</span><span class=\"p\">(</span><span class=\"n\">player</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">player</span><span class=\"si\">}</span><span class=\"s1\"> wins!'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_draw</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"It's a draw!\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">play_game</span><span class=\"p\">(</span><span class=\"n\">board_size</span><span class=\"p\">,</span> <span class=\"n\">player1</span><span class=\"p\">,</span> <span class=\"n\">player2</span><span class=\"p\">):</span>\n    <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">make_board</span><span class=\"p\">(</span><span class=\"n\">board_size</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">))</span>\n\n    <span class=\"n\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">player1</span><span class=\"p\">)</span>\n    <span class=\"n\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">player2</span><span class=\"p\">)</span>\n    <span class=\"n\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">player1</span><span class=\"p\">)</span>\n    <span class=\"n\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">player2</span><span class=\"p\">)</span>\n\n<span class=\"n\">play_game</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "the_full_game", "hints": ["<p>You should use all of the functions <code>winner</code>, <code>format_board</code> (not counting its use in <code>play_move</code>), <code>play_move</code>, <code>make_board</code>, <code>print_winner</code>, and <code>print_draw</code> somewhere.</p>", "<p>You only need to mention each of those functions once in your code, although some of them will be called several times as the program runs.</p>", "<p>You will need a for loop to repeatedly play moves.</p>", "<p>You don't need to check if the board has been filled up, because you can always calculate how many moves it takes to fill up the board.</p>", "<p>So you can just use a loop that will run a fixed number of iterations, and inside the loop check if the loop needs to be ended early.</p>", "<p>What's the maximum number of moves that can be played in a 3x3 board? 4x4?</p>", "<p>A loop over a <code>range</code> is an easy way to iterate a fixed number of times.</p>", "<p>So you can use <code>for _ in range(N):</code> to play at most <code>N</code> moves.</p>", "<p>Once there's a winner, you need to end the loop and the game.</p>", "<p>Either <code>print_winner</code> or <code>print_draw</code> should be called, not both.</p>", "<p>Whichever function is called, it must be called exactly once.</p>", "<p>One easy way to make sure you don't call a function multiple times is to call it outside of any loop.</p>", "<p>We've learned about two ways to make a loop stop.</p>", "<p>One way is <code>break</code>, which specifically ends one loop and no more.</p>", "<p>The second way ends not just the loop but the whole function call.</p>", "<p>The second way is <code>return</code>.</p>", "<p>Don't play moves in pairs like <code>play_move(board, player1)</code> and <code>play_move(board, player2)</code> in the sample code.</p>", "<p>Instead, each loop iteration should play one move.</p>", "<p>You need a variable to keep track of which player's turn it is.</p>", "<p>The player should be switched in each loop iteration.</p>", "<p>An <code>if</code> statement is a good way to do this.</p>", "<p>Especially combined with an <code>else</code>.</p>", "<p>Make sure <code>player1</code> plays the first move.</p>", "<p>Only call <code>print_winner</code> after checking <code>winner</code> with an <code>if</code> statement.</p>", "<p>You need to check for the winner inside the loop since you don't know when a player might win.</p>", "<p>Once you call <code>print_winner</code>, you can use <code>return</code> to end the function.</p>", "<p>Just <code>return</code> by itself is fine, <code>play_game</code> isn't meant to return a value.</p>", "<p>Don't use <code>else</code> after checking for a winner to call <code>print_draw</code> if there isn't a winner. Just because no one has won yet doesn't mean it's a draw already.</p>", "<p><code>print_draw</code> should only be called after all moves have been played and there's still no winner.</p>", "<p>So it should be called after the loop, outside of it.</p>", "<p>Check the indentation to make sure <code>print_draw</code> isn't in the body of the for loop.</p>"], "solution": {"tokens": ["def", " ", "play_game", "(", "board_size", ",", " ", "player1", ",", " ", "player2", ")", ":", "\n", "    ", "board", " ", "=", " ", "make_board", "(", "board_size", ")", "\n", "    ", "print", "(", "format_board", "(", "board", ")", ")", "\n", "\n", "    ", "player", " ", "=", " ", "player1", "\n", "    ", "for", " ", "_", " ", "in", " ", "range", "(", "board_size", " ", "*", " ", "board_size", ")", ":", "\n", "        ", "play_move", "(", "board", ",", " ", "player", ")", "\n", "\n", "        ", "if", " ", "winner", "(", "board", ")", ":", "\n", "            ", "print_winner", "(", "player", ")", "\n", "            ", "return", "\n", "\n", "        ", "if", " ", "player", " ", "==", " ", "player1", ":", "\n", "            ", "player", " ", "=", " ", "player2", "\n", "        ", "else", ":", "\n", "            ", "player", " ", "=", " ", "player1", "\n", "\n", "    ", "print_draw", "(", ")"], "maskedIndices": [78, 80, 42, 39, 71, 113, 12, 19, 73, 26, 118, 10, 69, 55, 15, 94, 3, 79, 59, 95, 0, 2, 30, 72, 48, 56, 109, 7, 52, 117, 8, 28, 65, 81, 90, 74, 20, 17, 21, 31, 11, 64, 5, 46, 50, 44, 102, 100, 61, 60, 92, 29, 106, 35, 111, 105, 98, 25, 119, 88, 27, 84, 22, 4, 54, 62, 75, 49, 37], "mask": [true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, true, true], "lines": [{"id": "9", "content": "            <span class=\"n\">print_winner</span><span class=\"p\">(</span><span class=\"n\">player</span><span class=\"p\">)</span>"}, {"id": "13", "content": "            <span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"n\">player2</span>"}, {"id": "15", "content": "            <span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"n\">player1</span>"}, {"id": "10", "content": "            <span class=\"k\">return</span>"}, {"id": "6", "content": "        <span class=\"n\">play_move</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">)</span>"}, {"id": "5", "content": "    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">board_size</span> <span class=\"o\">*</span> <span class=\"n\">board_size</span><span class=\"p\">):</span>"}, {"id": "1", "content": "    <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">make_board</span><span class=\"p\">(</span><span class=\"n\">board_size</span><span class=\"p\">)</span>"}, {"id": "14", "content": "        <span class=\"k\">else</span><span class=\"p\">:</span>"}, {"id": "2", "content": "    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">format_board</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">))</span>"}, {"id": "12", "content": "        <span class=\"k\">if</span> <span class=\"n\">player</span> <span class=\"o\">==</span> <span class=\"n\">player1</span><span class=\"p\">:</span>"}, {"id": "17", "content": "    <span class=\"n\">print_draw</span><span class=\"p\">()</span>"}, {"id": "8", "content": "        <span class=\"k\">if</span> <span class=\"n\">winner</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">):</span>"}, {"id": "4", "content": "    <span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"n\">player1</span>"}, {"id": "0", "content": "<span class=\"k\">def</span> <span class=\"nf\">play_game</span><span class=\"p\">(</span><span class=\"n\">board_size</span><span class=\"p\">,</span> <span class=\"n\">player1</span><span class=\"p\">,</span> <span class=\"n\">player2</span><span class=\"p\">):</span>"}]}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">play_game</span><span class=\"p\">(</span><span class=\"n\">board_size</span><span class=\"p\">,</span> <span class=\"n\">player1</span><span class=\"p\">,</span> <span class=\"n\">player2</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "exercise_stdin"}]}, {"index": 1, "text": "<h3><strong><em>CONGRATULATIONS!!!</em></strong></h3>\n<p>You did it!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "IntroducingDictionaries": {"slug": "IntroducingDictionaries", "title": "Introducing Dictionaries", "index": 57, "step_names": ["first_dict", "dict_access", "dict_access2", "dict_access3", "dict_access4", "final_text"], "steps": [{"index": 0, "text": "<p>We've seen several types: <code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, and <code>list</code>.\nOnly one of these types can contain multiple values: <code>list</code>.\nNow we're going to learn about another container type: <code>dict</code>, short for <strong><em>dictionary</em></strong>.</p>\n<p>Think of the familiar kind of dictionary where you look up a word to find its definition or a translation in another language.\nDictionaries in Python are similar, but more general. You look up a <em>key</em> (e.g. a word) to get the associated <em>value</em> (e.g. a definition or translation).</p>\n<p>For example, here's a little dictionary translating English words to French:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">french</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"s1\">'pomme'</span><span class=\"p\">,</span> <span class=\"s1\">'box'</span><span class=\"p\">:</span> <span class=\"s1\">'boite'</span><span class=\"p\">}</span>\n</span></code></pre>\n<p>Run the line above in the shell.</p>", "name": "first_dict", "hints": [], "solution": {"tokens": ["french", " ", "=", " ", "{", "'apple'", ":", " ", "'pomme'", ",", " ", "'box'", ":", " ", "'boite'", "}"], "maskedIndices": [2, 11, 9, 6, 0, 15, 12, 5, 4, 8, 14], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 1, "text": "<p><code>french</code> is a dictionary with two key-value pairs:</p>\n<ul>\n<li><code>'apple': 'pomme'</code> where <code>'apple'</code> is the key and <code>'pomme'</code> is the value.</li>\n<li><code>'box': 'boite'</code> where <code>'box'</code> is the key and <code>'boite'</code> is the value.</li>\n</ul>\n<p>Like lists, a comma (<code>,</code>) is used to separate items (key-value pairs) from each other. A colon (<code>:</code>) separates the keys from the values.\nNote that curly brackets (<code>{}</code>) are used to create the dictionary instead of the square brackets (<code>[]</code>) used when writing lists.</p>\n<p>Remember that with lists, you get values based on their <em>index</em>, i.e. their position in the list.\nSo if <code>words = ['apple', 'box']</code>, then <code>words[0]</code> is <code>'apple'</code> and <code>words[1]</code> is <code>'box'</code>.\nTry this in the shell:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">french</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</span></code></pre>", "name": "dict_access", "hints": [], "solution": {"tokens": ["french", "[", "0", "]"], "maskedIndices": [3, 2, 0, 1], "mask": [true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 2, "text": "<p>That doesn't work because the position of items in a dictionary usually doesn't matter.\nYou don't usually care what's the 2nd or 5th or 100th word of the dictionary,\nyou just want to find a specific word like 'apple'. So try that instead:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">french</span><span class=\"p\">[</span><span class=\"s1\">'apple'</span><span class=\"p\">]</span>\n</span></code></pre>", "name": "dict_access2", "hints": [], "solution": {"tokens": ["french", "[", "'apple'", "]"], "maskedIndices": [0, 1, 3, 2], "mask": [true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 3, "text": "<p>That's better!</p>\n<p>Now run a similar line in the shell to look up the translation for <code>'box'</code>.</p>", "name": "dict_access3", "hints": [], "solution": {"tokens": ["french", "[", "'box'", "]"], "maskedIndices": [2, 0, 3, 1], "mask": [true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same code as the previous step (<code>french['apple']</code>) in the shell, but replace <code>'apple'</code> with <code>'box'</code>.</p>"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 4, "text": "<p>And now you know both Python and French!</p>\n<p>Now let's translate from French to English:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">french</span><span class=\"p\">[</span><span class=\"s1\">'pomme'</span><span class=\"p\">]</span>\n</span></code></pre>", "name": "dict_access4", "hints": [], "solution": {"tokens": ["french", "[", "'pomme'", "]"], "maskedIndices": [2, 0, 3, 1], "mask": [true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}, {"type": "custom", "message": "<p>Type your code directly in the shell after <code>&gt;&gt;&gt;</code> and press Enter.</p>"}]}, {"index": 5, "text": "<p>Sorry, you can't do that either. You can only look up a key to get its value, not the other way around.\nThe dictionary <code>french</code> only has 2 keys: <code>'apple'</code> and <code>'box'</code>. <code>'pomme'</code> is a value, not a key.\nWe'll soon learn why you can't just look up values directly, and what you can do about it.</p>\n<p>Note that both <code>french[0]</code> and <code>french['pomme']</code> raised the same type of error: a <code>KeyError</code>.\nThis error means that the provided key (<code>0</code> or <code>'pomme'</code> in this case) wasn't found in the dictionary.\nIt's not that <code>french[0]</code> isn't <em>allowed</em>, it's just that it means the same thing as always:\nfind the value associated with the key <code>0</code>. In this case it finds that no such key exists.\nBut <code>0</code> <em>could</em> be a key, because many types of keys are allowed, including strings and numbers.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "UsingDictionaries": {"slug": "UsingDictionaries", "title": "Using Dictionaries in Practice", "index": 58, "step_names": ["shopping_cart1", "shopping_cart4", "dna_part1", "dna_part2", "final_text"], "steps": [{"index": 0, "text": "<p>Let's see dictionaries in a real life problem. Imagine you're building an online shopping website.\nYou keep the prices of all your items in a dictionary:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">prices</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'box'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cat'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'dog'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">}</span>\n</span></code></pre>\n<p>Here you can see one reason why looking up values in a dictionary could be a problem.\nWhat would <code>prices[100]</code> be? <code>'dog'</code>? <code>'cat'</code>? <code>['dog', 'cat']</code>?\nThe same value can be repeated any number of times in a dictionary.\nOn the other hand, keys have to be unique. Imagine if your prices started like this:</p>\n<pre><code class=\"codehilite\"><span><span class=\"n\">prices</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n</span></code></pre>\n<p>How much does an apple cost? We know it's <code>prices['apple']</code>, but is that <code>2</code> or <code>3</code>?\nClearly there should only be one price, so duplicate keys aren't allowed.</p>\n<p>Anyway, this is a normal shop where things have one price.\nThis normal shop has normal customers with normal shopping lists like <code>['apple', 'box', 'cat']</code>.\nAnd even though your customers have calculators in their pockets, they still expect you to add up all the prices\nyourself and tell them how much this will all cost, because that's what normal shops do.</p>\n<p>So let's write a function that does that. Complete the function below, particularly the line <code>price = ...</code></p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">total_cost</span><span class=\"p\">(</span><span class=\"n\">cart</span><span class=\"p\">,</span> <span class=\"n\">prices</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">cart</span><span class=\"p\">:</span>\n        <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n        <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">price</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">total_cost</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s1\">'apple'</span><span class=\"p\">,</span> <span class=\"s1\">'box'</span><span class=\"p\">,</span> <span class=\"s1\">'cat'</span><span class=\"p\">],</span>\n        <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'box'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cat'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'dog'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">},</span>\n    <span class=\"p\">),</span>\n    <span class=\"mi\">107</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "shopping_cart1", "hints": ["<p>Remember that <code>prices</code> is a dictionary.</p>", "<p>To access a value in a dictionary, you need a key.</p>", "<p>The keys for <code>prices</code> are the items in the <code>cart</code>.</p>"], "solution": {"tokens": ["def", " ", "total_cost", "(", "cart", ",", " ", "prices", ")", ":", "\n", "    ", "result", " ", "=", " ", "0", "\n", "    ", "for", " ", "item", " ", "in", " ", "cart", ":", "\n", "        ", "price", " ", "=", " ", "prices", "[", "item", "]", "\n", "        ", "result", " ", "+=", " ", "price", "\n", "    ", "return", " ", "result"], "maskedIndices": [21, 41, 12, 36, 23, 5, 31, 19, 25, 3, 43, 9, 35, 16, 0, 2, 7, 4, 14, 8, 39, 29, 46, 33, 48, 26, 34], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">total_cost</span><span class=\"p\">(</span><span class=\"n\">cart</span><span class=\"p\">,</span> <span class=\"n\">prices</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 1, "text": "<p>Perfect! You publish your website and start dreaming about how rich you're going to be.</p>\n<p>But soon you get a complaint from a customer who wants to buy 5 million dogs...and 2 boxes to put them in.</p>\n<p>Your website allows buying the same items several times, e.g. <code>total_cost(['box', 'box'], {...})</code> works,\nbut they have to add each item one at a time, and for some reason this customer doesn't want to click\n'Add to Cart' 5 million times. People are so lazy!</p>\n<p>Here's the new code for you to fix:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">total_cost</span><span class=\"p\">(</span><span class=\"n\">cart</span><span class=\"p\">,</span> <span class=\"n\">quantities</span><span class=\"p\">,</span> <span class=\"n\">prices</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">cart</span><span class=\"p\">:</span>\n        <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n        <span class=\"n\">quantity</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n        <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">price</span> <span class=\"o\">*</span> <span class=\"n\">quantity</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">total_cost</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s1\">'dog'</span><span class=\"p\">,</span> <span class=\"s1\">'box'</span><span class=\"p\">],</span>\n        <span class=\"p\">{</span><span class=\"s1\">'dog'</span><span class=\"p\">:</span> <span class=\"mi\">5000000</span><span class=\"p\">,</span> <span class=\"s1\">'box'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'box'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cat'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'dog'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">},</span>\n    <span class=\"p\">),</span>\n    <span class=\"mi\">500000010</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>We've added another parameter called <code>quantities</code> to <code>total_cost</code>.\nNow <code>cart</code> is still a list of strings, but it doesn't have any duplicates.\n<code>quantities</code> is a dictionary where the keys are the items in <code>cart</code> and the corresponding values are the quantity\nof that item that the customer wants to buy.</p>", "name": "shopping_cart4", "hints": ["<p>Remember that the keys for <code>prices</code> and <code>quantities</code> are the same.</p>", "<p>This is very similar to the previous exercise, we're just practicing.</p>", "<p><code>price</code> should be a value from <code>prices</code>, and similarly for <code>quantity</code>.</p>", "<p>What key should be used to obtain each value?</p>"], "solution": {"tokens": ["def", " ", "total_cost", "(", "cart", ",", " ", "quantities", ",", " ", "prices", ")", ":", "\n", "    ", "result", " ", "=", " ", "0", "\n", "    ", "for", " ", "item", " ", "in", " ", "cart", ":", "\n", "        ", "price", " ", "=", " ", "prices", "[", "item", "]", "\n", "        ", "quantity", " ", "=", " ", "quantities", "[", "item", "]", "\n", "        ", "result", " ", "+=", " ", "price", " ", "*", " ", "quantity", "\n", "    ", "return", " ", "result"], "maskedIndices": [44, 49, 29, 15, 32, 0, 52, 46, 48, 26, 60, 22, 37, 11, 3, 5, 47, 38, 42, 19, 2, 63, 34, 39, 8, 10, 24, 58, 56, 12, 65, 36, 28, 17, 4, 54, 7], "mask": [true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">total_cost</span><span class=\"p\">(</span><span class=\"n\">cart</span><span class=\"p\">,</span> <span class=\"n\">quantities</span><span class=\"p\">,</span> <span class=\"n\">prices</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 2, "text": "<p>Not bad! But you may have noticed that it looks a bit awkward. Why do we have to specify <code>'dog'</code> and <code>'box'</code> in both the <code>cart</code> and the <code>quantities</code>?\nOn the next page we'll look at how to loop directly over the keys of a dictionary,\nso we can get rid of the <code>cart</code> argument.</p>\n<p>But first, let's practice what we've learned a bit more.</p>\n<p><a href=\"#IntroducingElif\">Earlier in the course</a> we looked at converting one strand of DNA\ninto a new strand with matching nucleotides.\nHere's a version of that code using a function. It substitutes each letter in the input <code>string</code>\nwith a different one.</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">substitute</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n    <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">string</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'A'</span><span class=\"p\">:</span>\n            <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'T'</span>\n        <span class=\"k\">elif</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'T'</span><span class=\"p\">:</span>\n            <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'A'</span>\n        <span class=\"k\">elif</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'G'</span><span class=\"p\">:</span>\n            <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'C'</span>\n        <span class=\"k\">elif</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'C'</span><span class=\"p\">:</span>\n            <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s1\">'G'</span>\n        <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"s1\">'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'</span>\n<span class=\"n\">expected</span> <span class=\"o\">=</span> <span class=\"s1\">'TCATCGCAGGAATCAATGTCCTACCGAATA'</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">substitute</span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"p\">),</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "dna_part1", "hints": [], "solution": {"tokens": ["def", " ", "substitute", "(", "string", ")", ":", "\n", "    ", "result", " ", "=", " ", "''", "\n", "    ", "for", " ", "char", " ", "in", " ", "string", ":", "\n", "        ", "if", " ", "char", " ", "==", " ", "'A'", ":", "\n", "            ", "char", " ", "=", " ", "'T'", "\n", "        ", "elif", " ", "char", " ", "==", " ", "'T'", ":", "\n", "            ", "char", " ", "=", " ", "'A'", "\n", "        ", "elif", " ", "char", " ", "==", " ", "'G'", ":", "\n", "            ", "char", " ", "=", " ", "'C'", "\n", "        ", "elif", " ", "char", " ", "==", " ", "'C'", ":", "\n", "            ", "char", " ", "=", " ", "'G'", "\n", "        ", "result", " ", "+=", " ", "char", "\n", "    ", "return", " ", "result", "\n", "\n", "original", " ", "=", " ", "'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'", "\n", "expected", " ", "=", " ", "'TCATCGCAGGAATCAATGTCCTACCGAATA'", "\n", "assert_equal", "(", "substitute", "(", "original", ")", ",", " ", "expected", ")"], "maskedIndices": [40, 108, 3, 47, 22, 38, 87, 77, 123, 50, 30, 11, 120, 118, 33, 26, 36, 94, 45, 0, 23, 72, 98, 70, 2, 119, 13, 6, 89, 55, 83, 112, 60, 110, 96, 91, 32, 62, 74, 127, 116, 67, 64, 79, 5, 9, 103, 122, 114, 4, 121, 43, 53, 49, 81, 16, 28, 84, 124, 57, 20, 66, 101, 18, 126, 106], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 3, "text": "<p>Now we can use dictionaries to make this code both shorter and more general so it can be used for other purposes.</p>\n<p>Your job is to add another argument to the <code>substitute</code> function: a dictionary called <code>d</code>.\nThe keys of <code>d</code> represent characters\nin the first argument <code>string</code> that should be replaced by the corresponding values of <code>d</code>. For example, <code>'A': 'T'</code>\nmeans that <code>'A'</code> should be replaced by <code>'T'</code>:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">substitute</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"s1\">'AGTAGCGTCCTTAGTTACAGGATGGCTTAT'</span>\n<span class=\"n\">expected</span> <span class=\"o\">=</span> <span class=\"s1\">'TCATCGCAGGAATCAATGTCCTACCGAATA'</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">substitute</span><span class=\"p\">(</span><span class=\"n\">original</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"s1\">'T'</span><span class=\"p\">,</span> <span class=\"s1\">'T'</span><span class=\"p\">:</span> <span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">:</span> <span class=\"s1\">'G'</span><span class=\"p\">,</span> <span class=\"s1\">'G'</span><span class=\"p\">:</span> <span class=\"s1\">'C'</span><span class=\"p\">}),</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>This version of <code>substitute</code> should work for any arguments where all the characters in <code>string</code> are keys in <code>d</code>.\nNo more <code>if</code> statements needed!</p>", "name": "dna_part2", "hints": ["<p>This is still very similar to the previous exercises, but with strings instead of numbers.</p>", "<p>You just have to think about the keys and values of <code>d</code>.</p>", "<p>You need to obtain the correct values to build up a string to return.</p>", "<p>You can basically replace the whole <code>if/elif</code> chain with a single line.</p>", "<p>That line simply needs to use <code>d</code> to get the correct value.</p>", "<p>Remember that the keys of <code>d</code> are the characters in <code>string</code>.</p>"], "solution": {"tokens": ["def", " ", "substitute", "(", "string", ",", " ", "d", ")", ":", "\n", "    ", "result", " ", "=", " ", "\"\"", "\n", "    ", "for", " ", "letter", " ", "in", " ", "string", ":", "\n", "        ", "result", " ", "+=", " ", "d", "[", "letter", "]", "\n", "    ", "return", " ", "result"], "maskedIndices": [34, 3, 26, 2, 29, 4, 5, 7, 25, 33, 23, 41, 9, 39, 0, 12, 31, 16, 14, 36, 21, 19, 8, 35], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">substitute</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 4, "text": "<p>Nice! Here's an example of how this function can also be used to encrypt and decrypt secret messages:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">substitute</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"n\">string</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">letter</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"n\">plaintext</span> <span class=\"o\">=</span> <span class=\"s1\">'helloworld'</span>\n<span class=\"n\">encrypted</span> <span class=\"o\">=</span> <span class=\"s1\">'qpeefifmez'</span>\n<span class=\"n\">letters</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'h'</span><span class=\"p\">:</span> <span class=\"s1\">'q'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"s1\">'p'</span><span class=\"p\">,</span> <span class=\"s1\">'l'</span><span class=\"p\">:</span> <span class=\"s1\">'e'</span><span class=\"p\">,</span> <span class=\"s1\">'o'</span><span class=\"p\">:</span> <span class=\"s1\">'f'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">:</span> <span class=\"s1\">'i'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">:</span> <span class=\"s1\">'m'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"s1\">'z'</span><span class=\"p\">}</span>\n<span class=\"n\">reverse</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"s1\">'h'</span><span class=\"p\">,</span> <span class=\"s1\">'p'</span><span class=\"p\">:</span> <span class=\"s1\">'e'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"s1\">'l'</span><span class=\"p\">,</span> <span class=\"s1\">'f'</span><span class=\"p\">:</span> <span class=\"s1\">'o'</span><span class=\"p\">,</span> <span class=\"s1\">'i'</span><span class=\"p\">:</span> <span class=\"s1\">'w'</span><span class=\"p\">,</span> <span class=\"s1\">'m'</span><span class=\"p\">:</span> <span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">:</span> <span class=\"s1\">'d'</span><span class=\"p\">}</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">substitute</span><span class=\"p\">(</span><span class=\"n\">plaintext</span><span class=\"p\">,</span> <span class=\"n\">letters</span><span class=\"p\">),</span> <span class=\"n\">encrypted</span><span class=\"p\">)</span>\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">substitute</span><span class=\"p\">(</span><span class=\"n\">encrypted</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"p\">),</span> <span class=\"n\">plaintext</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>The same function works in both directions, we just need to pass it different dictionaries.</p>\n<p>The two dictionaries are almost the same, we just swap around the key and value in each pair.\nSo to encrypt, we replace <code>e</code> with <code>p</code>, and to decrypt we change <code>p</code> back to <code>e</code>.</p>\n<p>Note that <code>'e'</code> is both a key and a value in <code>letters</code>.</p>\n<p>Looking up <code>letters['e']</code> means that we're asking about <code>'e'</code> as a <em>key</em>, so it gives <code>'p'</code>.\nRemember, we can't use <code>letters</code> to ask which key is associated with <code>'e'</code> as a <em>value</em>.\nBut in this case we can use the other dictionary for that: <code>reverse['e']</code> gives <code>'l'</code>,\nand <code>letters['l']</code> gives <code>'e'</code> again.</p>\n<p>Soon you'll write a function to create a dictionary like <code>reverse</code> automatically,\ni.e. <code>reverse = swap_keys_values(letters)</code>.</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}, "DictionaryKeysAndValues": {"slug": "DictionaryKeysAndValues", "title": "Iterating over Dictionary Keys", "index": 59, "step_names": ["introducing_keys", "keys_are_iterable", "keys_are_iterable2", "cleanup_shopping_cart", "english_to_french", "english_to_german", "nested_dictionaries", "final_text"], "steps": [{"index": 0, "text": "<p>Copy this code into the editor:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">quantities</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'cat'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">quantities</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>Then change <code>print(quantities)</code> to <code>print(quantities.keys())</code>, and run the whole program.</p>", "name": "introducing_keys", "hints": [], "solution": {"tokens": ["quantities", " ", "=", " ", "{", "'apple'", ":", " ", "1", ",", " ", "'cat'", ":", " ", "10", "}", "\n", "print", "(", "quantities", ".", "keys", "(", ")", ")"], "maskedIndices": [8, 18, 2, 4, 15, 21, 12, 6, 11, 9, 20, 0, 14, 5, 17, 23, 22, 19, 24], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "custom", "message": "<p>Run <code>print(quantities.keys())</code> where <code>quantities</code> is a dictionary.</p>"}]}, {"index": 1, "text": "<p>The <code>.keys()</code> method of <code>dict</code> does basically what you'd expect. You can iterate over the value it returns\njust like you'd iterate over a list:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"n\">quantities</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'cat'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">quantities</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "keys_are_iterable", "hints": [], "solution": {"tokens": ["quantities", " ", "=", " ", "{", "'apple'", ":", " ", "1", ",", " ", "'cat'", ":", " ", "10", "}", "\n", "for", " ", "key", " ", "in", " ", "quantities", ".", "keys", "(", ")", ":", "\n", "    ", "print", "(", "key", ")"], "maskedIndices": [24, 23, 28, 17, 34, 6, 26, 32, 0, 33, 5, 14, 27, 21, 4, 11, 15, 31, 25, 9, 2, 12, 8, 19], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 2, "text": "<p>Actually, you don't even need <code>.keys()</code>. Iterating directly over a dictionary automatically iterates over its keys.\nSometimes it's nice to write <code>.keys()</code> to make your code more readable, but you don't have to.\nRemove the <code>.keys()</code> and run the code again.</p>", "name": "keys_are_iterable2", "hints": [], "solution": {"tokens": ["quantities", " ", "=", " ", "{", "'apple'", ":", " ", "1", ",", " ", "'cat'", ":", " ", "10", "}", "\n", "for", " ", "key", " ", "in", " ", "quantities", ":", "\n", "    ", "print", "(", "key", ")"], "maskedIndices": [21, 5, 27, 19, 0, 6, 23, 12, 15, 9, 4, 14, 11, 8, 24, 2, 29, 30, 28, 17], "mask": [true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "custom", "message": "<p>Run the same code as the previous step, but without <code>.keys()</code>. after <code>quantities</code>, so the middle line is <code>for key in quantities:</code></p>"}]}, {"index": 3, "text": "<p>Now you can use this to modify our function on the previous page to remove the <code>cart</code> argument:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">total_cost</span><span class=\"p\">(</span><span class=\"n\">quantities</span><span class=\"p\">,</span> <span class=\"n\">prices</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"o\">...</span><span class=\"p\">:</span>\n        <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">prices</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span>\n        <span class=\"n\">quantity</span> <span class=\"o\">=</span> <span class=\"n\">quantities</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span>\n        <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">price</span> <span class=\"o\">*</span> <span class=\"n\">quantity</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"n\">assert_equal</span><span class=\"p\">(</span>\n    <span class=\"n\">total_cost</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span><span class=\"s1\">'dog'</span><span class=\"p\">:</span> <span class=\"mi\">5000000</span><span class=\"p\">,</span> <span class=\"s1\">'box'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'box'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'cat'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'dog'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">},</span>\n    <span class=\"p\">),</span>\n    <span class=\"mi\">500000010</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "cleanup_shopping_cart", "hints": ["<p>Remember that we previously had <code>for item in cart</code> in the function, but <code>cart</code> is no longer an argument.</p>", "<p>Now <code>quantities</code> is the only argument that defines what the customer is buying.</p>", "<p>You need to iterate over the keys of <code>quantities</code> instead. Remember that 'iterate' here means 'loop over' with a <code>for</code> loop.</p>", "<p>You can use <code>.keys()</code>, but you don't have to.</p>"], "solution": {"tokens": ["def", " ", "total_cost", "(", "quantities", ",", " ", "prices", ")", ":", "\n", "    ", "result", " ", "=", " ", "0", "\n", "    ", "for", " ", "item", " ", "in", " ", "quantities", ":", "\n", "        ", "price", " ", "=", " ", "prices", "[", "item", "]", "\n", "        ", "quantity", " ", "=", " ", "quantities", "[", "item", "]", "\n", "        ", "result", " ", "+=", " ", "price", " ", "*", " ", "quantity", "\n", "    ", "return", " ", "result"], "maskedIndices": [12, 29, 41, 0, 35, 33, 7, 62, 43, 44, 60, 14, 53, 34, 4, 3, 23, 26, 36, 31, 8, 55, 51, 45, 21, 9, 57, 39, 5, 19, 49, 25, 2, 46, 16], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">total_cost</span><span class=\"p\">(</span><span class=\"n\">quantities</span><span class=\"p\">,</span> <span class=\"n\">prices</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "return"}]}, {"index": 4, "text": "<p>That looks nice! We've fully solved the problem of adding up the total cost.</p>\n<p>Coming back to our first example: write a function\nwhich prints out each word in an English-to-French dictionary and its translation, labeling them with their languages.\nHere's your starting code:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">print_words</span><span class=\"p\">(</span><span class=\"n\">french</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">print_words</span><span class=\"p\">({</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"s1\">'pomme'</span><span class=\"p\">,</span> <span class=\"s1\">'box'</span><span class=\"p\">:</span> <span class=\"s1\">'boite'</span><span class=\"p\">})</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>For example, the last line of code above should print:</p>\n<pre><code>English: apple\nFrench: pomme\n---\nEnglish: box\nFrench: boite\n---\n</code></pre>", "name": "english_to_french", "hints": ["<p>You will need to iterate (loop) over the dictionary.</p>", "<p>You need to print both the key (English word) and the value (French word) of each dictionary entry.</p>", "<p>You can get the value using the key in the same way as always.</p>"], "solution": {"tokens": ["def", " ", "print_words", "(", "french", ")", ":", "\n", "    ", "for", " ", "word", " ", "in", " ", "french", ":", "\n", "        ", "print", "(", "\"English: \"", " ", "+", " ", "word", ")", "\n", "        ", "print", "(", "\"French: \"", " ", "+", " ", "french", "[", "word", "]", ")", "\n", "        ", "print", "(", "\"---\"", ")"], "maskedIndices": [13, 37, 33, 20, 36, 43, 21, 39, 2, 44, 0, 31, 45, 5, 11, 6, 23, 29, 30, 26, 15, 9, 25, 3, 42, 16, 35, 19, 38, 4], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">print_words</span><span class=\"p\">(</span><span class=\"n\">french</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "print"}]}, {"index": 5, "text": "<p>Great! Now let's add a German dictionary as well:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">print_words</span><span class=\"p\">(</span><span class=\"n\">french</span><span class=\"p\">,</span> <span class=\"n\">german</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">print_words</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"s1\">'pomme'</span><span class=\"p\">,</span> <span class=\"s1\">'box'</span><span class=\"p\">:</span> <span class=\"s1\">'boite'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"s1\">'apfel'</span><span class=\"p\">,</span> <span class=\"s1\">'box'</span><span class=\"p\">:</span> <span class=\"s1\">'kasten'</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>\n<p>That should print:</p>\n<pre><code>English: apple\nFrench: pomme\nGerman: apfel\n---\nEnglish: box\nFrench: boite\nGerman: kasten\n---\n</code></pre>\n<p>The two dictionaries will always have the same keys, just different values.</p>", "name": "english_to_german", "hints": ["<p>This is still very similar to the previous exercise, nothing special yet.</p>", "<p>You can reuse your previous solution, just add another argument and a tiny bit of code inside.</p>", "<p>You now have to print one dictionary key and two dictionary values.</p>"], "solution": {"tokens": ["def", " ", "print_words", "(", "french", ",", " ", "german", ")", ":", "\n", "    ", "for", " ", "word", " ", "in", " ", "french", ":", "\n", "        ", "print", "(", "\"English: \"", " ", "+", " ", "word", ")", "\n", "        ", "print", "(", "\"French: \"", " ", "+", " ", "french", "[", "word", "]", ")", "\n", "        ", "print", "(", "\"German: \"", " ", "+", " ", "german", "[", "word", "]", ")", "\n", "        ", "print", "(", "\"---\"", ")"], "maskedIndices": [54, 49, 32, 42, 22, 0, 8, 61, 38, 5, 23, 40, 26, 7, 46, 19, 29, 16, 47, 45, 36, 53, 4, 34, 41, 51, 3, 55, 9, 58, 12, 28, 18, 14, 39, 2, 59, 60, 33, 24, 52], "mask": [true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "exercise"}, {"type": "function_exercise", "header": "<pre><code class=\"codehilite\"><span><span class=\"k\">def</span> <span class=\"nf\">print_words</span><span class=\"p\">(</span><span class=\"n\">french</span><span class=\"p\">,</span> <span class=\"n\">german</span><span class=\"p\">):</span>\n</span></code></pre>"}, {"type": "function_exercise_goal", "print_or_return": "print"}]}, {"index": 6, "text": "<p>Beautiful! There's a pattern emerging here. The two languages could be merged into one big nested dictionary:</p>\n<pre><code class=\"codehilite copyable\"><span><span class=\"k\">def</span> <span class=\"nf\">print_words</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">words</span><span class=\"p\">:</span>\n        <span class=\"n\">translations</span> <span class=\"o\">=</span> <span class=\"n\">words</span><span class=\"p\">[</span><span class=\"n\">word</span><span class=\"p\">]</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"English: </span><span class=\"si\">{</span><span class=\"n\">word</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">language</span> <span class=\"ow\">in</span> <span class=\"n\">translations</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">language</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">translations</span><span class=\"p\">[</span><span class=\"n\">language</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"---\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_words</span><span class=\"p\">({</span>\n    <span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'French'</span><span class=\"p\">:</span> <span class=\"s1\">'pomme'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'German'</span><span class=\"p\">:</span> <span class=\"s1\">'apfel'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'box'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'French'</span><span class=\"p\">:</span> <span class=\"s1\">'boite'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'German'</span><span class=\"p\">:</span> <span class=\"s1\">'kasten'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">})</span>\n</span><button class=\"btn btn-primary copy-button\">Copy</button></code></pre>", "name": "nested_dictionaries", "hints": [], "solution": {"tokens": ["def", " ", "print_words", "(", "words", ")", ":", "\n", "    ", "for", " ", "word", " ", "in", " ", "words", ":", "\n", "        ", "translations", " ", "=", " ", "words", "[", "word", "]", "\n", "\n", "        ", "print", "(", "f\"English: {word}\"", ")", "\n", "        ", "for", " ", "language", " ", "in", " ", "translations", ":", "\n", "            ", "print", "(", "f\"{language}: {translations[language]}\"", ")", "\n", "        ", "print", "(", "f\"---\"", ")", "\n", "\n", "print_words", "(", "{", "\n", "    ", "'apple'", ":", " ", "{", "\n", "        ", "'French'", ":", " ", "'pomme'", ",", "\n", "        ", "'German'", ":", " ", "'apfel'", ",", "\n", "    ", "}", ",", "\n", "    ", "'box'", ":", " ", "{", "\n", "        ", "'French'", ":", " ", "'boite'", ",", "\n", "        ", "'German'", ":", " ", "'kasten'", ",", "\n", "    ", "}", ",", "\n", "}", ")"], "maskedIndices": [0, 94, 96, 42, 90, 48, 73, 84, 111, 24, 79, 97, 64, 6, 13, 107, 93, 108, 46, 32, 59, 21, 19, 36, 2, 11, 31, 76, 49, 100, 3, 23, 54, 66, 4, 80, 53, 69, 30, 63, 43, 72, 26, 83, 87, 70, 60, 25, 15, 103, 110, 16, 33, 55, 101, 9, 47, 5, 77, 88, 52, 38, 58, 40, 104], "mask": [true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, true, true, false, false, true, true, false, true, true], "lines": null}, "prediction": {"choices": null, "answer": null}, "requirements": [{"type": "verbatim"}, {"type": "program_in_text"}]}, {"index": 7, "text": "<p>Congratulations! You've reached the end of the course so far. More is on the way!</p>", "name": "final_text", "hints": [], "solution": null, "prediction": {"choices": null, "answer": null}, "requirements": null}]}}, "pageSlugsList": ["IntroducingTheShell", "NavigatingShellHistory", "IntroducingStrings", "AddingStrings", "IntroducingVariables", "UsingVariables", "WritingPrograms", "StoringCalculationsInVariables", "IntroducingForLoops", "Indentation", "BasicForLoopExercises", "BuildingUpStrings", "BuildingUpStringsExercises", "BasicTerminology", "IntroducingIfStatements", "CombiningCompoundStatements", "UnderstandingProgramsWithSnoop", "IfAndElse", "TheEqualityOperator", "IntroducingElif", "OtherComparisonOperators", "IntroducingLists", "BuildingNewLists", "UsingBreak", "GettingElementsAtPosition", "GettingElementsAtPositionExercises", "CallingFunctionsTerminology", "FunctionsAndMethodsForLists", "MoreListFunctionsAndMethods", "StringMethodsUnderstandingMutation", "HowToFindInformationWithGoogleAndMore", "UnderstandingProgramsWithPythonTutor", "EqualsVsIs", "ModifyingWhileIterating", "SingleAndDoubleQuotesInStrings", "IntroducingFstrings", "IntroducingNestedLoops", "IntroducingBirdseye", "IntroducingNestedLists", "LoopingOverNestedLists", "DefiningFunctions", "CallingFunctionsWithinFunctions", "ReturningValuesFromFunctions", "TestingFunctions", "MoreOnReturn", "IntroducingOr", "IntroducingAnd", "MultiLineExpressions", "CombiningAndAndOr", "IntroducingNotPage", "IntroducingTicTacToe", "NewlinesAndFormatBoard", "Types", "InteractiveProgramsWithInput", "NestedListAssignment", "MakingTheBoard", "TheFullTicTacToeGame", "IntroducingDictionaries", "UsingDictionaries", "DictionaryKeysAndValues"]}